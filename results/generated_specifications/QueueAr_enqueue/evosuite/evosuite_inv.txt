===========================================================================
DataStructures.QueueAr:::OBJECT
daikon.Quant.getElement_Object(this.theArray, this.front) == daikon.Quant.getElement_Object(this.theArray, this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.currentSize == 0 || this.currentSize == 1 || this.currentSize == 2
this.front == 0 || this.front == 1 || this.front == 2
this.back >= 0
daikon.Quant.size(this.theArray) >= 1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.front)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0 || this.currentSize == 1
this.front == 0
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize >= this.front
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= this.back
1293 * this.currentSize + this.back - daikon.Quant.size(this.theArray) + 1 == 0
1293 * this.currentSize + this.back - daikon.Quant.size(this.theArray)-1 == 0
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.front == \old(this.front)
this.back == \old(this.currentSize)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.currentSize-1)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.front)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
\old(x) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
\old(x) == daikon.Quant.getElement_Object(this.theArray, \old(this.front))
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.front))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize == 1 || this.currentSize == 2
this.front == 0
this.back == 0 || this.back == 1
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
this.currentSize > this.front
this.currentSize > this.back
\old(this.back) % this.currentSize == 0
this.currentSize != \old(this.back)
daikon.Quant.size(this.theArray) % this.currentSize == 0
this.currentSize != daikon.Quant.size(this.theArray)-1
this.front <= this.back
this.front <= \old(this.back)
\old(this.back) <= daikon.Quant.size(this.theArray)-1
1293 * this.currentSize + \old(this.back) - daikon.Quant.size(this.theArray) - 1292 == 0
1293 * this.currentSize + \old(this.back) - daikon.Quant.size(this.theArray)-1 - 1293 == 0
1293 * this.back + \old(this.back) - daikon.Quant.size(this.theArray) + 1 == 0
1293 * this.back + \old(this.back) - daikon.Quant.size(this.theArray)-1 == 0
