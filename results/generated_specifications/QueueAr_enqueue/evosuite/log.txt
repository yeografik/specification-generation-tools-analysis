
=======================================================================
                    first daikon command
=======================================================================
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

=======================================================================
                    second daikon command
=======================================================================
Chicory warning: ClassFile: org.junit.rules.TestRule - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.runners.model.Statement - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.LoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.ILoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.event.LoggingEvent - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.SubstituteLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.Logger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.Util - classfile version (49) is out of date and may not be processed correctly.
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLogger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.MarkerIgnoringBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NamedLoggerBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.Assert - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.ComparisonFailure - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.internal.AssumptionViolatedException - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.SelfDescribing - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Matcher - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Description - classfile version (49) is out of date and may not be processed correctly.
Daikon version 5.8.16, released November 9, 2022; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 2 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 1 invocation
  DataStructures.QueueAr.enqueue(java.lang.Object) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
this has only one value
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray[this.front] == this.theArray[this.back]
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
this.back >= 0
size(this.theArray[]) >= 1
this.currentSize <= size(this.theArray[])
this.front <= size(this.theArray[])-1
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
capacity >= 1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(capacity)-1]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.theArray[] elements are equal
this.front one of { 0, 1 }
this.back one of { 0, 1 }
size(this.theArray[]) one of { 1, 1294 }
this.theArray[] elements == this.theArray[this.front]
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.front])
orig(this.theArray[post(this.front)]) == orig(this.theArray[this.front])
orig(this.theArray[post(this.back)]) == orig(this.theArray[this.front])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.theArray[].getClass().getName() one of { [null], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null] }
this.currentSize one of { 0, 1 }
this.back one of { 0, 1 }
return.getClass().getName() == java.lang.Object.class
size(this.theArray[]) one of { 1, 1294 }
this.theArray[] elements == this.theArray[this.currentSize]
return.getClass().getName() in orig(this.theArray[].getClass().getName())
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.theArray[this.currentSize] == this.theArray[this.currentSize-1]
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this has only one value
this.theArray has only one value
this.theArray[] contains only nulls and has only one value, of length 1294
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.currentSize == 2
this.front == 0
this.back == 1
size(this.theArray[]) == 1294
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.front)
this.front == orig(this.currentSize)
this.back == orig(this.back)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.front-1]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)-1]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)-1])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)-1])
this.theArray[this.currentSize] == orig(this.theArray[this.currentSize])
this.theArray[this.currentSize] == orig(this.theArray[this.currentSize-1])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[this.currentSize] == orig(this.theArray[this.back-1])
this.theArray has only one value
this.theArray[] contains only nulls and has only one value, of length 1294
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front == 2
this.back == 1
size(this.theArray[]) == 1294
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize one of { 0, 1 }
this.front == 0
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize >= this.front
this.currentSize <= size(this.theArray[])-1
this.front <= this.back
1293 * this.currentSize + this.back - size(this.theArray[]) + 1 == 0
1293 * this.currentSize + this.back - size(this.theArray[])-1 == 0
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
this.back == orig(this.currentSize)
orig(x) == this.theArray[this.currentSize-1]
orig(x) == this.theArray[this.front]
orig(x) == this.theArray[this.back]
orig(x) == this.theArray[orig(this.currentSize)]
orig(x) == this.theArray[orig(this.front)]
size(this.theArray[]) == orig(size(this.theArray[]))
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[post(this.front)]) == orig(this.theArray[this.currentSize])
this.currentSize one of { 1, 2 }
this.front == 0
this.back one of { 0, 1 }
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.currentSize > this.front
this.currentSize > this.back
orig(this.back) % this.currentSize == 0
this.currentSize != orig(this.back)
size(this.theArray[]) % this.currentSize == 0
this.currentSize != size(this.theArray[])-1
this.front <= this.back
this.front <= orig(this.back)
orig(this.back) <= size(this.theArray[])-1
1293 * this.currentSize + orig(this.back) - size(this.theArray[]) - 1292 == 0
1293 * this.currentSize + orig(this.back) - size(this.theArray[])-1 - 1293 == 0
1293 * this.back + orig(this.back) - size(this.theArray[]) + 1 == 0
1293 * this.back + orig(this.back) - size(this.theArray[])-1 == 0
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.front == this.back
this.currentSize one of { 0, 1 }
this.front == 0
size(this.theArray[]) one of { 1, 32, 503 }
this.theArray[this.currentSize] == null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == this.back
this.front == orig(this.front)
this.front == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[this.back]
return == this.theArray[orig(this.front)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.front])
return == orig(this.theArray[this.back])
this.currentSize one of { 0, 1 }
this.front == 0
return.getClass().getName() == java.lang.String.class
size(this.theArray[]) one of { 1, 32, 503 }
this.theArray[this.currentSize] == null
return.getClass().getName() in this.theArray[].getClass().getName()
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.front] == this.theArray[orig(this.back)]
this.theArray[this.front] == orig(this.theArray[post(this.back)])
this.theArray[this.front] == orig(this.theArray[this.back])
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.front one of { 0, 1, 2 })
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
(this.currentSize one of { 1, 2 })  <==>  (return == false)
(this.currentSize one of { 1, 2 })  ==>  (size(this.theArray[]) % this.currentSize == 0)
(this.currentSize one of { 1, 2 })  ==>  (this.back one of { 0, 1 })
(this.currentSize one of { 1, 2 })  ==>  (this.currentSize != size(this.theArray[])-1)
(this.currentSize one of { 1, 2 })  ==>  (this.currentSize >= this.back)
(this.currentSize one of { 1, 2 })  ==>  (this.currentSize >= this.front)
(this.currentSize one of { 1, 2 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2 })  ==>  (this.front one of { 0, 1 })
(this.currentSize one of { 1, 2 })  ==>  (this.theArray[this.currentSize-1] == this.theArray[this.front])
(this.currentSize one of { 1, 2 })  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.currentSize)-1]))
(this.currentSize one of { 1, 2 })  ==>  (this.theArray[this.front] == orig(this.theArray[this.currentSize-1]))
(this.currentSize one of { 1, 2 })  ==>  (this.theArray[this.front] == this.theArray[orig(this.currentSize)-1])
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.theArray[this.currentSize-1] == this.theArray[this.front]
this.theArray[this.front] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.currentSize)-1])
this.theArray[this.front] == orig(this.theArray[this.currentSize-1])
this.currentSize one of { 1, 2 }
this.front one of { 0, 1 }
this.back one of { 0, 1 }
return == false
this.currentSize >= this.front
this.currentSize >= this.back
size(this.theArray[]) % this.currentSize == 0
this.currentSize != size(this.theArray[])-1
this.front <= this.back
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.theArray[] elements are equal
this.currentSize one of { 0, 1 }
this.front == 0
this.theArray[] elements == this.theArray[this.front]
this.currentSize >= this.front
this.front <= this.back
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.front] == this.theArray[orig(this.back)]
this.theArray[this.front] == orig(this.theArray[post(this.back)])
this.theArray[this.front] == orig(this.theArray[this.back])
(return == false)  <==>  (this.currentSize <= size(this.theArray[])-1)
(return == false)  ==>  (1293 * this.currentSize + this.back - size(this.theArray[]) + 1 == 0)
(return == false)  ==>  (1293 * this.currentSize + this.back - size(this.theArray[])-1 == 0)
(return == false)  ==>  (this.currentSize one of { 0, 1 })
(return == false)  ==>  (this.theArray[] elements == null)
(return == false)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(return == false)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(return == false)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(return == false)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(return == false)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == false)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (size(this.theArray[]) == 1)
(return == true)  ==>  (this.currentSize == 1)
(return == true)  ==>  (this.front == size(this.theArray[])-1)
(return == true)  ==>  (this.front == this.back)
(return == true)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)-1]))
(return == true)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize-1]))
(return == true)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)-1])
(return == true)  ==>  (this.theArray[] elements == this.theArray[this.currentSize-1])
(return == true)  ==>  (this.theArray[].getClass().getName() one of { [null], [java.lang.Object] })
(return == true)  ==>  (this.theArray[this.currentSize-1] == this.theArray[this.front])
(return == true)  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.currentSize)-1]))
(return == true)  ==>  (this.theArray[this.front] == orig(this.theArray[this.currentSize-1]))
(return == true)  ==>  (this.theArray[this.front] == this.theArray[orig(this.currentSize)-1])
this.theArray[] elements are equal
this.currentSize one of { 0, 1 }
this.front == 0
this.theArray[] elements == this.theArray[this.front]
this.currentSize >= this.front
this.front <= this.back
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == this.back
this.front == orig(this.back)
this.front == size(this.theArray[])-1
this.front == orig(size(this.theArray[]))-1
this.theArray[this.currentSize-1] == this.theArray[this.front]
this.theArray[this.front] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.currentSize)-1])
this.theArray[this.front] == orig(this.theArray[this.currentSize-1])
this.theArray[].getClass().getName() one of { [null], [java.lang.Object] }
this.currentSize == 1
return == true
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
return == false
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= size(this.theArray[])-1
1293 * this.currentSize + this.back - size(this.theArray[]) + 1 == 0
1293 * this.currentSize + this.back - size(this.theArray[])-1 == 0
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this has only one value
this.theArray has only one value
this.theArray[] contains only nulls and has only one value, of length 32
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
size(this.theArray[]) == 32
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == this.front
this.currentSize == orig(this.currentSize)
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)-1]
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)-1])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[this.currentSize] == orig(this.theArray[this.back-1])
this.theArray has only one value
this.theArray[] contains only nulls and has only one value, of length 32
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
size(this.theArray[]) == 32
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.TestDriverEvosuite.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
DataStructures.TestDriverEvosuite.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
Exiting Daikon.

=======================================================================
                    printing invariants
=======================================================================
