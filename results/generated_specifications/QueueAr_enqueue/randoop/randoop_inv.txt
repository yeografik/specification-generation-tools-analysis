===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.currentSize >= 0
this.front >= 0
this.back >= -1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
daikon.Quant.getElement_Object(this.theArray, this.front) == daikon.Quant.getElement_Object(this.theArray, this.back)
this.currentSize == 0 || this.currentSize == 1 || this.currentSize == 2
this.front == 0 || this.front == 1
this.back >= 0
daikon.Quant.size(this.theArray) >= 1
this.theArray.getClass().getName() != x.getClass().getName()
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.front == \old(this.front)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize-1) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize == 1 || this.currentSize == 2 || this.currentSize == 3
this.front == 0 || this.front == 1
this.back == 0 || this.back == 1 || this.back == 2
daikon.Quant.size(this.theArray) >= 1
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == null
this.theArray.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
this.currentSize >= this.front
this.currentSize >= this.back
this.currentSize > \old(this.currentSize)
this.front <= this.back
this.front <= daikon.Quant.size(this.theArray)-1
this.back >= \old(this.currentSize)
\old(this.currentSize) <= daikon.Quant.size(this.theArray)-1
\old(this.back) <= daikon.Quant.size(this.theArray)-1
this.currentSize + this.front - this.back - 1 == 0
this.front - this.back + \old(this.currentSize) == 0
