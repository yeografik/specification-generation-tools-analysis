
=======================================================================
                    first daikon command
=======================================================================
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

=======================================================================
                    second daikon command
=======================================================================
Chicory warning: ClassFile: org.junit.rules.TestRule - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.runners.model.Statement - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.LoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.ILoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.event.LoggingEvent - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.SubstituteLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.Logger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.Util - classfile version (49) is out of date and may not be processed correctly.
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLogger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.MarkerIgnoringBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NamedLoggerBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.Assert - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.ComparisonFailure - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.internal.AssumptionViolatedException - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.SelfDescribing - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Matcher - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Description - classfile version (49) is out of date and may not be processed correctly.
Daikon version 5.8.16, released November 9, 2022; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 3 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.ListComp02.q() : 1 invocation
  examples.ListComp02.insert_r(examples.R) : 1 invocation
  examples.ListComp02.insert_s(examples.S) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
examples.ListComp02:::OBJECT
this._var50[] elements != null
this._var50[].getClass().getName() elements == examples.S.class
this._var50[].getClass().getName() one of { [], [examples.S] }
size(this._var49[]) one of { 0, 1 }
size(this._var50[]) one of { 0, 1 }
===========================================================================
examples.ListComp02.ListComp02():::EXIT
this._var49[] == []
this._var49[].getClass().getName() == []
this._var50[] == []
this._var50[].getClass().getName() == []
===========================================================================
examples.ListComp02.ListComp02(java.util.ArrayList, java.util.ArrayList):::ENTER
Rs[] == []
Rs[].getClass().getName() == []
Ss[] == []
Ss[].getClass().getName() == []
===========================================================================
examples.ListComp02.ListComp02(java.util.ArrayList, java.util.ArrayList):::EXIT
this._var49 == orig(Rs)
this._var50 == orig(Ss)
Rs[] == orig(Rs[])
Ss[] == orig(Ss[])
this._var49[] == []
this._var49[].getClass().getName() == []
this._var50[] == []
this._var50[].getClass().getName() == []
Rs[] == []
Rs[].getClass().getName() == []
Ss[] == []
Ss[].getClass().getName() == []
===========================================================================
examples.ListComp02.clear():::ENTER
this._var49[] == []
this._var49[].getClass().getName() == []
this._var50[] == []
this._var50[].getClass().getName() == []
===========================================================================
examples.ListComp02.clear():::EXIT
this._var49[] == orig(this._var49[])
this._var49[].getClass().getName() == orig(this._var49[].getClass().getName())
this._var50[] == orig(this._var50[])
this._var50[].getClass().getName() == orig(this._var50[].getClass().getName())
this._var49[] == []
this._var49[].getClass().getName() == []
this._var50[] == []
this._var50[].getClass().getName() == []
this._var49[] is the reverse of orig(this._var49[])
this._var50[] is the reverse of orig(this._var50[])
===========================================================================
examples.ListComp02.insert_r(examples.R):::ENTER
this._var49[] == []
this._var49[].getClass().getName() == []
r.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.ListComp02.insert_r(examples.R):::EXIT
this._var49 == orig(this._var49)
this._var50 == orig(this._var50)
this._var50[] == orig(this._var50[])
r.A == orig(r.A)
r.B == orig(r.B)
r.B.toString == orig(r.B.toString)
size(this._var49[])-1 == orig(size(this._var49[]))
this._var49[].getClass().getName() one of { [null], [examples.R] }
r.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
size(this._var49[]) == 1
===========================================================================
examples.ListComp02.insert_s(examples.S):::ENTER
this._var49[] elements has only one value
this._var49[].getClass().getName() elements == examples.R.class
this._var49[].getClass().getName() one of { [], [examples.R] }
this._var50[] == []
this._var50[].getClass().getName() == []
s.B.toString one of { ";aeodkf[6j'", "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.ListComp02.insert_s(examples.S):::EXIT
this._var49 == orig(this._var49)
this._var49[] == orig(this._var49[])
this._var50 == orig(this._var50)
s.B == orig(s.B)
s.B.toString == orig(s.B.toString)
s.C == orig(s.C)
size(this._var50[])-1 == orig(size(this._var50[]))
this._var49[] elements has only one value
this._var49[].getClass().getName() elements == examples.R.class
this._var49[].getClass().getName() one of { [], [examples.R] }
this._var50[].getClass().getName() == [examples.S]
s.B.toString one of { ";aeodkf[6j'", "JZJ#a%+7cdh", "oSU|O_z$_}a" }
size(this._var50[]) == 1
===========================================================================
examples.ListComp02.q():::ENTER
this._var49[].getClass().getName() == [examples.R]
this._var49[].getClass().getName() elements == examples.R.class
size(this._var49[]) == 1
===========================================================================
examples.ListComp02.q():::EXIT
this._var49 == orig(this._var49)
this._var49[] == orig(this._var49[])
this._var50 == orig(this._var50)
this._var50[] == orig(this._var50[])
this._var49[].getClass().getName() == [examples.R]
this._var49[].getClass().getName() elements == examples.R.class
size(this._var49[]) == 1
===========================================================================
examples.R:::OBJECT
this.B.toString one of { "", "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.R.R(java.lang.Integer, java.lang.String):::ENTER
B.toString one of { "", "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.R.R(java.lang.Integer, java.lang.String):::EXIT
this.A == orig(A)
this.B == orig(B)
B.toString == orig(B.toString)
B.toString one of { "", "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.R.getA():::ENTER
this.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.R.getA():::EXIT
this.A == return
this.B == orig(this.B)
this.B.toString == orig(this.B.toString)
return == orig(this.A)
this.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.S:::OBJECT
===========================================================================
examples.S.S(java.lang.String, java.lang.Integer):::ENTER
===========================================================================
examples.S.S(java.lang.String, java.lang.Integer):::EXIT
this.B == orig(B)
this.C == orig(C)
B.toString == orig(B.toString)
===========================================================================
examples.S.getC():::ENTER
this.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.S.getC():::EXIT
this.B == orig(this.B)
this.B.toString == orig(this.B.toString)
this.C == return
return == orig(this.C)
this.B.toString one of { "JZJ#a%+7cdh", "oSU|O_z$_}a" }
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
Exiting Daikon.

=======================================================================
                    printing invariants
=======================================================================
