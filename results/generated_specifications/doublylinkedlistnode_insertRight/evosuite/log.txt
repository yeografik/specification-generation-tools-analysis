
=======================================================================
                    first daikon command
=======================================================================
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

=======================================================================
                    second daikon command
=======================================================================
Chicory warning: ClassFile: org.junit.rules.TestRule - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.runners.model.Statement - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.LoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.ILoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.event.LoggingEvent - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.SubstituteLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.Logger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.Util - classfile version (49) is out of date and may not be processed correctly.
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLogger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.MarkerIgnoringBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NamedLoggerBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.Assert - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.ComparisonFailure - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.internal.AssumptionViolatedException - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.SelfDescribing - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Matcher - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Description - classfile version (49) is out of date and may not be processed correctly.
Daikon version 5.8.16, released November 9, 2022; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 2 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode) : 2 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
examples.DoublyLinkedListNode:::OBJECT
this.left != null
this.left.left != null
this.left.left.left != null
this.left.left.right != null
this.left.right != null
this.left.right.left != null
this.left.right.right != null
this.right != null
this.right.left != null
this.right.left.left != null
this.right.left.right != null
this.right.right != null
this.right.right.left != null
this.right.right.right != null
===========================================================================
examples.DoublyLinkedListNode.DoublyLinkedListNode():::EXIT
this.left == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right
this.left == this.right.right.left
this.left == this.right.right.right
===========================================================================
examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode):::ENTER
this == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right.left
this.left == this.right.right.right
this.left.left == this.left.right
this.left.left == this.right.left
this.left.left == this.right.right
n == n.left
n == n.left.left
n == n.left.right
n == n.right
n == n.right.left
n == n.right.right
===========================================================================
examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode):::EXIT
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left == n.left.left
this.left.left.left == n.right.right
this.left.right == n.left
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
this.right == n.left.right
this.right == n.right.left
this.right == orig(n)
this.right == orig(n.left)
this.right == orig(n.left.left)
this.right == orig(n.left.right)
this.right == orig(n.right)
this.right == orig(n.right.left)
this.right == orig(n.right.right)
this.right.left == n.left
this.right.right == n.right
this.right.right.right == n.right.right
n.left == orig(this)
n.left == orig(this.left.left)
n.left == orig(this.left.right)
n.left == orig(this.right.left)
n.left == orig(this.right.right)
n.right == orig(this.left)
n.right == orig(this.left.left.left)
n.right == orig(this.left.left.right)
n.right == orig(this.left.right.left)
n.right == orig(this.left.right.right)
n.right == orig(this.right)
n.right == orig(this.right.left.left)
n.right == orig(this.right.left.right)
n.right == orig(this.right.right.left)
n.right == orig(this.right.right.right)
===========================================================================
examples.DoublyLinkedListNode.remove():::ENTER
this == this.left.right
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left == this.right.right
this.left.left == this.right
this.left.left.left == this.left.right
this.left.right == this.right.left
this.left.right == this.right.right.right
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
this has only one value
this.left has only one value
this.left.right has only one value
this.right has only one value
===========================================================================
examples.DoublyLinkedListNode.remove():::EXIT
this.left == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right
this.left == this.right.right.left
this.left == this.right.right.right
this.left == orig(this)
this.left == orig(this.left.left.left)
this.left == orig(this.left.right)
this.left == orig(this.right.left)
this.left == orig(this.right.right.right)
this.left has only one value
===========================================================================
examples.DoublyLinkedListNode.setLeft(examples.DoublyLinkedListNode):::ENTER
this.left.left.right == this.right.left.left
this.right == this.right.left.right
===========================================================================
examples.DoublyLinkedListNode.setLeft(examples.DoublyLinkedListNode):::EXIT
this.left == this.left.right.left
this.left == n.right.left
this.left == orig(n)
this.left.left == n.left
this.left.left.left == n.left.left
this.left.left.right == n.left.right
this.left.right == n.right
this.left.right.right == n.right.right
this.right == this.right.left.right
this.right == orig(this.right)
this.right == orig(this.right.left.right)
this.right.right == orig(this.right.right)
this.right.right.right == orig(this.right.right.right)
n.right == orig(n.right)
n.right.right == orig(n.right.right)
===========================================================================
examples.DoublyLinkedListNode.setRight(examples.DoublyLinkedListNode):::ENTER
this.left == this.left.right.left
this.left.left.right == this.right
this.right == this.right.left.right
n == n.right.left
===========================================================================
examples.DoublyLinkedListNode.setRight(examples.DoublyLinkedListNode):::EXIT
this.left == orig(this.left)
this.left == orig(this.left.right.left)
this.left.left == orig(this.left.left)
this.left.left.left == orig(this.left.left.left)
this.left.left.right == n.left.left
this.right == this.right.right.left
this.right == n.right.left
this.right == orig(n)
this.right == orig(n.right.left)
this.right.left == n.left
this.right.left.left == n.left.left
this.right.left.right == n.left.right
this.right.right == n.right
this.right.right.right == n.right.right
n.left == orig(n.left)
n.left.left == orig(n.left.left)
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
Exiting Daikon.

=======================================================================
                    printing invariants
=======================================================================
