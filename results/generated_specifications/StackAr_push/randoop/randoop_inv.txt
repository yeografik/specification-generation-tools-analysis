===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.topOfStack >= -1
this.topOfStack <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
daikon.Quant.size(this.theArray) >= 1
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.topOfStack)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
this.topOfStack >= 0
daikon.Quant.size(this.theArray) >= 1
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.topOfStack))) == null
this.theArray.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
this.topOfStack - \old(this.topOfStack) - 1 == 0
\old(this.topOfStack) < daikon.Quant.size(this.theArray)-1
