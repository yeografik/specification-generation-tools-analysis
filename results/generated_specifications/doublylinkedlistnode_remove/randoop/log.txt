
=======================================================================
                    first daikon command
=======================================================================

=======================================================================
                    second daikon command
=======================================================================
Chicory warning: ClassFile: org.junit.Assert - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.ComparisonFailure - classfile version (49) is out of date and may not be processed correctly.
Daikon version 5.8.16, released November 9, 2022; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 759 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode) : 759 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
examples.DoublyLinkedListNode:::OBJECT
this.left != null
this.left.left != null
this.left.left.left != null
this.left.left.right != null
this.left.right != null
this.left.right.left != null
this.left.right.right != null
this.right != null
this.right.left != null
this.right.left.left != null
this.right.left.right != null
this.right.right != null
this.right.right.left != null
this.right.right.right != null
===========================================================================
examples.DoublyLinkedListNode.DoublyLinkedListNode():::EXIT
this.left == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right
this.left == this.right.right.left
this.left == this.right.right.right
===========================================================================
examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode):::ENTER
this == this.left.right
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left.right == this.right.left
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
n == n.left
n == n.left.left
n == n.left.right
n == n.right
n == n.right.left
n == n.right.right
n != null
===========================================================================
examples.DoublyLinkedListNode.insertRight(examples.DoublyLinkedListNode):::EXIT
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left == n.left.left
this.left.right == n.left
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
this.right == n.left.right
this.right == n.right.left
this.right == orig(n)
this.right == orig(n.left)
this.right == orig(n.left.left)
this.right == orig(n.left.right)
this.right == orig(n.right)
this.right == orig(n.right.left)
this.right == orig(n.right.right)
this.right.left == n.left
this.right.right == n.right
this.right.right.right == n.right.right
n.left == orig(this)
n.left == orig(this.left.right)
n.left == orig(this.right.left)
n.right == orig(this.left.right.right)
n.right == orig(this.right)
n.right == orig(this.right.left.right)
n.right == orig(this.right.right.left)
n.left != null
n.right != null
n.right.right != null
===========================================================================
examples.DoublyLinkedListNode.remove():::ENTER
this == this.left.right
this.left == this.left.left.right
this.left == this.left.right.left
this.left == this.right.left.left
this.left.right == this.right.left
this.left.right.right == this.right
this.right == this.right.left.right
this.right == this.right.right.left
===========================================================================
examples.DoublyLinkedListNode.remove():::EXIT
this.left == this.left.left
this.left == this.left.left.left
this.left == this.left.left.right
this.left == this.left.right
this.left == this.left.right.left
this.left == this.left.right.right
this.left == this.right
this.left == this.right.left
this.left == this.right.left.left
this.left == this.right.left.right
this.left == this.right.right
this.left == this.right.right.left
this.left == this.right.right.right
this.left == orig(this)
this.left == orig(this.left.right)
this.left == orig(this.right.left)
===========================================================================
examples.DoublyLinkedListNode.setLeft(examples.DoublyLinkedListNode):::ENTER
n != null
n.left != null
n.left.left != null
n.left.right != null
n.right != null
n.right.left != null
n.right.right != null
===========================================================================
examples.DoublyLinkedListNode.setLeft(examples.DoublyLinkedListNode):::EXIT
this.left == this.left.right.left
this.left == n.right.left
this.left == orig(n)
this.left.left == n.left
this.left.left.left == n.left.left
this.left.left.right == n.left.right
this.left.right == n.right
this.left.right.right == n.right.right
this.right == this.right.left.right
this.right == orig(this.right)
this.right.right == orig(this.right.right)
this.right.right.right == orig(this.right.right.right)
n.right == orig(n.right)
n.right.right == orig(n.right.right)
n.left != null
n.left.left != null
n.left.right != null
n.right != null
n.right.right != null
===========================================================================
examples.DoublyLinkedListNode.setRight(examples.DoublyLinkedListNode):::ENTER
this.left == this.left.right.left
this.right == this.right.left.right
n != null
n.left != null
n.left.left != null
n.left.right != null
n.right != null
n.right.left != null
n.right.right != null
===========================================================================
examples.DoublyLinkedListNode.setRight(examples.DoublyLinkedListNode):::EXIT
this.left == orig(this.left)
this.left == orig(this.left.right.left)
this.left.left == orig(this.left.left)
this.left.left.left == orig(this.left.left.left)
this.right == orig(n)
this.right.left == n.left
this.right.left.left == n.left.left
this.right.left.right == n.left.right
this.right.right == n.right
this.right.right.left == n.right.left
this.right.right.right == n.right.right
n.left == orig(n.left)
n.left.left == orig(n.left.left)
n.right.left == orig(n.right.left)
n.left != null
n.left.left != null
n.left.right != null
n.right != null
n.right.left != null
n.right.right != null
Exiting Daikon.

=======================================================================
                    printing invariants
=======================================================================
