
=======================================================================
                    first daikon command
=======================================================================
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

=======================================================================
                    second daikon command
=======================================================================
Chicory warning: ClassFile: org.junit.rules.TestRule - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.runners.model.Statement - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.LoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.ILoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.event.LoggingEvent - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.SubstituteLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.Logger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLoggerFactory - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.Util - classfile version (49) is out of date and may not be processed correctly.
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Chicory warning: ClassFile: org.slf4j.helpers.NOPLogger - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.MarkerIgnoringBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.slf4j.helpers.NamedLoggerBase - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.Assert - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.ComparisonFailure - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.junit.internal.AssumptionViolatedException - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.SelfDescribing - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Matcher - classfile version (49) is out of date and may not be processed correctly.
Chicory warning: ClassFile: org.hamcrest.Description - classfile version (49) is out of date and may not be processed correctly.
Daikon version 5.8.16, released November 9, 2022; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 2 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.MaxBag.add(java.lang.Integer) : 1 invocation
  examples.MaxBag.MaxBag(java.util.ArrayList) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
examples.MaxBag:::OBJECT
this._var4384._0 == this._var5992
this._var4384._0 != null
this._var4384._1 != null
this._var4384._1.getClass().getName() == java.lang.Integer[].class
===========================================================================
examples.MaxBag.MaxBag():::EXIT
this._var587 == this._var4384._0
this._var587 == this._var5992
this._var587 has only one value
this._var721 has only one value
this._var1457 has only one value
this._var4384 has only one value
this._var4384._1 has only one value
this._var4384._1[] == []
this._var4384._1[].getClass().getName() == []
this._var66253 has only one value
this._var66253[] == []
this._var66253[].getClass().getName() == []
===========================================================================
examples.MaxBag.MaxBag(java.util.ArrayList):::ENTER
l != null
l[] elements != null
l[].getClass().getName() elements == java.lang.Integer.class
size(l[]) one of { 0, 1, 2 }
===========================================================================
examples.MaxBag.MaxBag(java.util.ArrayList):::EXIT
this._var66253 == orig(l)
l[] == orig(l[])
this._var587 != null
this._var721 != null
this._var1457 != null
this._var4384 != null
this._var4384._1[] sorted by >=
this._var5992 != null
this._var66253 != null
this._var66253[] elements != null
this._var66253[].getClass().getName() elements == java.lang.Integer.class
l[] elements != null
l[].getClass().getName() elements == java.lang.Integer.class
size(this._var4384._1[]) one of { 0, 1, 3 }
size(this._var66253[]) one of { 0, 1, 2 }
===========================================================================
examples.MaxBag.add(java.lang.Integer):::ENTER
this._var587 != null
this._var721 != null
this._var1457 != null
this._var4384 != null
this._var5992 != null
this._var66253 != null
this._var66253[] elements != null
this._var66253[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
examples.MaxBag.add(java.lang.Integer):::EXIT
this._var721 == orig(this._var721)
this._var4384 == orig(this._var4384)
this._var4384._1.getClass().getName() == orig(this._var4384._1.getClass().getName())
this._var66253 == orig(this._var66253)
size(this._var66253[])-1 == orig(size(this._var66253[]))
this._var721 != null
this._var1457 has only one value
this._var1457 != null
this._var4384 != null
this._var5992 != null
this._var66253 != null
size(this._var4384._1[]) one of { 1, 3, 7 }
size(this._var66253[]) >= 1
this._var587 in this._var4384._1[]
this._var4384._1[] > orig(this._var4384._1[]) (lexically)
this._var4384._1[] >= orig(this._var4384._1[]) (lexically)
orig(x) in this._var4384._1[]
size(this._var4384._1[]) >= orig(size(this._var4384._1[]))
size(this._var4384._1[])-1 >= orig(size(this._var4384._1[]))-1
===========================================================================
examples.MaxBag.clear():::ENTER
this._var587 == this._var4384._0
this._var587 == this._var5992
this._var4384._0 has only one value
this._var4384._1 has only one value
this._var4384._1[] == []
this._var4384._1[].getClass().getName() == []
this._var66253[] == []
this._var66253[].getClass().getName() == []
===========================================================================
examples.MaxBag.clear():::EXIT
this._var587 == this._var4384._0
this._var587 == this._var5992
this._var587 == orig(this._var4384._0)
this._var4384._1.getClass().getName() == orig(this._var4384._1.getClass().getName())
this._var4384._1[] == orig(this._var4384._1[])
this._var4384._1[].getClass().getName() == orig(this._var4384._1[].getClass().getName())
this._var66253[] == orig(this._var66253[])
this._var66253[].getClass().getName() == orig(this._var66253[].getClass().getName())
this._var587 has only one value
this._var1457 has only one value
this._var4384._1[] == []
this._var4384._1[].getClass().getName() == []
this._var66253[] == []
this._var66253[].getClass().getName() == []
this._var4384._1[] is the reverse of orig(this._var4384._1[])
this._var66253[] is the reverse of orig(this._var66253[])
===========================================================================
examples.MaxBag.getMax():::ENTER
this._var721 != null
this._var1457 != null
this._var4384 != null
this._var5992 != null
this._var66253 != null
===========================================================================
examples.MaxBag.getMax():::EXIT
this._var587 == return
this._var721 == orig(this._var721)
this._var1457 == orig(this._var1457)
this._var4384 == orig(this._var4384)
this._var4384._1 == orig(this._var4384._1)
this._var4384._1.getClass().getName() == orig(this._var4384._1.getClass().getName())
this._var4384._1[] == orig(this._var4384._1[])
this._var5992 == orig(this._var4384._0)
this._var5992 == orig(this._var5992)
this._var66253 == orig(this._var66253)
this._var66253[] == orig(this._var66253[])
return == orig(this._var587)
this._var721 != null
this._var1457 != null
this._var4384 != null
this._var5992 != null
this._var66253 != null
===========================================================================
examples.MaxBag.remove(java.lang.Integer):::ENTER
this._var66253[].getClass().getName() elements == java.lang.Integer.class
this._var4384._1[] elements <= x
===========================================================================
examples.MaxBag.remove(java.lang.Integer):::EXIT
this._var721 == orig(this._var721)
this._var1457 == orig(this._var1457)
this._var4384 == orig(this._var4384)
this._var4384._1 == orig(this._var4384._1)
this._var4384._1.getClass().getName() == orig(this._var4384._1.getClass().getName())
this._var66253 == orig(this._var66253)
size(this._var4384._1[]) == orig(size(this._var4384._1[]))
this._var66253[].getClass().getName() elements == java.lang.Integer.class
this._var4384._1[] elements < this._var5992
this._var4384._1[] <= orig(this._var4384._1[]) (lexically)
this._var4384._1[] elements <= orig(x)
orig(this._var4384._1[]) elements < this._var5992
size(this._var66253[]) <= orig(size(this._var66253[]))
size(this._var66253[]) >= orig(size(this._var66253[]))-1
size(this._var66253[])-1 <= orig(size(this._var66253[]))-1
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
examples.TestDriverEvosuite.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
examples._Type328393:::OBJECT
this._0 has only one value
this._0 != null
this._1 != null
this._1.getClass().getName() == java.lang.Integer[].class
this._1[] == []
this._1[].getClass().getName() == []
===========================================================================
examples._Type328393._Type328393(java.lang.Integer, java.lang.Integer[]):::ENTER
_0 has only one value
_0 != null
_1 != null
_1.getClass().getName() == java.lang.Integer[].class
_1[] == []
===========================================================================
examples._Type328393._Type328393(java.lang.Integer, java.lang.Integer[]):::EXIT
this._0 == orig(_0)
this._1 == orig(_1)
this._1.getClass().getName() == orig(_1.getClass().getName())
_1[] == orig(_1[])
_1[] == []
Exiting Daikon.

=======================================================================
                    printing invariants
=======================================================================
