===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.currentSize == 0 || this.currentSize == 1 || this.currentSize == 2
this.front == 0 || this.front == 1 || this.front == 2
this.back >= -1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
daikon.Quant.getElement_Object(this.theArray, this.front) == daikon.Quant.getElement_Object(this.theArray, this.back)
this.front == 0 || this.front == 1
this.back == 0 || this.back == 1
daikon.Quant.size(this.theArray) == 1 || daikon.Quant.size(this.theArray) == 1294 || daikon.Quant.size(this.theArray) == 1989
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.back == \old(this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.front)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.front))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.back))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.front)))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))) == \old(daikon.Quant.getElement_Object(this.theArray, this.front))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == \old(daikon.Quant.getElement_Object(this.theArray, this.front))
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0 || this.currentSize == 1
this.back == 0 || this.back == 1
\result.getClass().getName() == java.lang.Object.class.getName()
daikon.Quant.size(this.theArray) == 1 || daikon.Quant.size(this.theArray) == 1294 || daikon.Quant.size(this.theArray) == 1989
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize))
daikon.Quant.memberOf(\result.getClass().getName() , \old(daikon.Quant.typeArray(this.theArray)) )
