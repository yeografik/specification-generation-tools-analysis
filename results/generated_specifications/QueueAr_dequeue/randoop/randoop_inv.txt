===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.currentSize >= 0
this.front >= 0
this.back >= -1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.currentSize == 0 || this.currentSize == 1 || this.currentSize == 2
this.front == 0 || this.front == 1 || this.front == 2
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.back == \old(this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
this.currentSize == 0 || this.currentSize == 1
this.theArray.getClass().getName() != \result.getClass().getName()
this.currentSize <= this.front
this.currentSize <= \old(this.currentSize)
this.front >= \old(this.front)
daikon.Quant.memberOf(\result.getClass().getName() , \old(daikon.Quant.typeArray(this.theArray)) )
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
\old(this.front) <= daikon.Quant.size(this.theArray)
