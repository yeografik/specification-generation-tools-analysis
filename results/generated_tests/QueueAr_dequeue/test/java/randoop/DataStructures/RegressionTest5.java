package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isEmpty();
        java.lang.Object obj13 = queueAr8.getFront();
        java.lang.Object obj14 = queueAr8.dequeue();
        boolean boolean15 = queueAr8.isFull();
        java.lang.Object obj16 = queueAr8.getFront();
        boolean boolean17 = queueAr8.isFull();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Class<?> wildcardClass55 = overflow24.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        queueAr16.enqueue((java.lang.Object) 8);
        java.lang.Object obj23 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        boolean boolean38 = queueAr25.isEmpty();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        boolean boolean42 = queueAr40.isEmpty();
        queueAr40.dequeueAll();
        queueAr40.makeEmpty();
        boolean boolean45 = queueAr40.isFull();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj48 = queueAr47.getFront();
        queueAr47.dequeueAll();
        java.lang.Object obj50 = queueAr47.dequeue();
        queueAr40.enqueue(obj50);
        queueAr40.makeEmpty();
        queueAr40.dequeueAll();
        java.lang.Object obj54 = queueAr40.getFront();
        queueAr25.enqueue((java.lang.Object) queueAr40);
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean58 = queueAr57.isEmpty();
        java.lang.Object obj59 = queueAr57.dequeue();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr61.dequeueAll();
        java.lang.Object obj63 = queueAr61.getFront();
        queueAr61.makeEmpty();
        boolean boolean65 = queueAr61.isFull();
        queueAr57.enqueue((java.lang.Object) queueAr61);
        java.lang.Object obj67 = queueAr57.dequeue();
        queueAr40.enqueue((java.lang.Object) queueAr57);
        java.lang.Object obj69 = queueAr40.getFront();
        queueAr16.enqueue((java.lang.Object) queueAr40);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Class<?> wildcardClass72 = queueAr16.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 8 + "'", obj23, 8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        java.lang.Object obj13 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.dequeue();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.enqueue((java.lang.Object) (-2));
        boolean boolean9 = queueAr6.isFull();
        queueAr6.makeEmpty();
        boolean boolean11 = queueAr6.isEmpty();
        java.lang.Object obj12 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        boolean boolean19 = queueAr14.isFull();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj22 = queueAr21.getFront();
        queueAr21.dequeueAll();
        java.lang.Object obj24 = queueAr21.dequeue();
        queueAr14.enqueue(obj24);
        queueAr14.makeEmpty();
        queueAr14.dequeueAll();
        queueAr6.enqueue((java.lang.Object) queueAr14);
        queueAr1.enqueue((java.lang.Object) queueAr14);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        queueAr1.enqueue((java.lang.Object) overflow10);
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow5.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = null;
        queueAr1.enqueue(obj7);
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray35 = overflow23.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow62);
        overflow42.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray69 = overflow56.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray71 = overflow23.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray73 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow76);
        overflow60.addSuppressed((java.lang.Throwable) overflow76);
        overflow47.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Class<?> wildcardClass83 = overflow76.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + false + "'", obj9, false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.getFront();
        java.lang.Object obj13 = queueAr5.getFront();
        boolean boolean14 = queueAr5.isFull();
        boolean boolean15 = queueAr5.isFull();
        boolean boolean16 = queueAr5.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        boolean boolean22 = queueAr11.isEmpty();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow39);
        queueAr11.enqueue((java.lang.Object) overflow28);
        overflow5.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow45.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow74.addSuppressed((java.lang.Throwable) overflow89);
        overflow28.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray94 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow74.getSuppressed();
        java.lang.String str96 = overflow74.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        java.lang.Object obj19 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class DataStructures.QueueAr");
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        java.lang.Object obj18 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean21 = queueAr20.isEmpty();
        java.lang.Object obj22 = queueAr20.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr20.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj30 = queueAr20.getFront();
        queueAr20.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.Object obj70 = queueAr1.dequeue();
        boolean boolean71 = queueAr1.isFull();
        boolean boolean72 = queueAr1.isEmpty();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.dequeueAll();
        boolean boolean19 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        queueAr14.enqueue((java.lang.Object) overflow23);
        java.lang.Throwable[] throwableArray31 = overflow23.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow23);
        java.lang.Class<?> wildcardClass33 = overflow23.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        java.lang.Object obj14 = queueAr12.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr16.makeEmpty();
        boolean boolean20 = queueAr16.isFull();
        queueAr12.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj22 = queueAr12.getFront();
        java.lang.Object obj23 = queueAr12.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray45 = overflow27.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow48.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow48.addSuppressed((java.lang.Throwable) overflow68);
        overflow27.addSuppressed((java.lang.Throwable) overflow48);
        // The following exception was thrown during execution in test generation
        try {
            queueAr12.enqueue((java.lang.Object) overflow27);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow20.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.String str49 = overflow45.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DataStructures.Overflow" + "'", str49, "DataStructures.Overflow");
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow24.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray80 = overflow0.getSuppressed();
        java.lang.String str81 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Overflow" + "'", str81, "DataStructures.Overflow");
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean45 = queueAr44.isEmpty();
        java.lang.Object obj46 = queueAr44.dequeue();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr48.dequeueAll();
        java.lang.Object obj50 = queueAr48.getFront();
        queueAr48.makeEmpty();
        boolean boolean52 = queueAr48.isFull();
        queueAr44.enqueue((java.lang.Object) queueAr48);
        java.lang.Object obj54 = queueAr44.dequeue();
        queueAr41.enqueue((java.lang.Object) queueAr44);
        java.lang.Object obj56 = queueAr44.getFront();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        queueAr44.enqueue((java.lang.Object) overflow69);
        overflow37.addSuppressed((java.lang.Throwable) overflow69);
        queueAr1.enqueue((java.lang.Object) overflow69);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow76.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        overflow76.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray87 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow76.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow76);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow6.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray39 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow17.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray42 = overflow6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow14.getSuppressed();
        java.lang.String str22 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DataStructures.Overflow" + "'", str22, "DataStructures.Overflow");
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass15 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean41 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        queueAr15.makeEmpty();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        queueAr15.enqueue((java.lang.Object) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow60.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow60.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray83 = overflow60.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow60);
        queueAr1.enqueue((java.lang.Object) overflow20);
        java.lang.Class<?> wildcardClass86 = overflow20.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        java.lang.String str63 = overflow56.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DataStructures.Overflow" + "'", str63, "DataStructures.Overflow");
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isFull();
        boolean boolean5 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        boolean boolean2 = queueAr1.isFull();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        java.lang.Object obj22 = queueAr17.getFront();
        java.lang.Object obj23 = queueAr17.dequeue();
        java.lang.Object obj24 = queueAr17.dequeue();
        java.lang.Object obj25 = queueAr17.dequeue();
        queueAr1.enqueue(obj25);
        boolean boolean27 = queueAr1.isFull();
        java.lang.Object obj28 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr26.makeEmpty();
        queueAr26.makeEmpty();
        java.lang.Class<?> wildcardClass49 = queueAr26.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) '#');
        queueAr5.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean9 = queueAr5.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        queueAr14.enqueue((java.lang.Object) queueAr18);
        java.lang.Object obj24 = queueAr14.dequeue();
        queueAr11.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj26 = queueAr14.getFront();
        queueAr5.enqueue(obj26);
        boolean boolean28 = queueAr5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj41 = queueAr27.dequeue();
        boolean boolean42 = queueAr27.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        queueAr27.enqueue((java.lang.Object) 2);
        java.lang.Object obj46 = queueAr27.getFront();
        queueAr27.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + 2 + "'", obj46, 2);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = obj10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow74.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow88);
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray91 = overflow86.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray93 = overflow86.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow86);
        overflow40.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray96 = overflow40.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow43.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray34 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow23.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow36.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow23.addSuppressed((java.lang.Throwable) overflow36);
        overflow12.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray49 = overflow12.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow50.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray68 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow57.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.QueueAr queueAr73 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr73.dequeueAll();
        boolean boolean75 = queueAr73.isEmpty();
        queueAr73.dequeueAll();
        queueAr73.dequeueAll();
        boolean boolean78 = queueAr73.isEmpty();
        queueAr73.dequeueAll();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        queueAr73.enqueue((java.lang.Object) overflow82);
        overflow57.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray91 = overflow82.getSuppressed();
        java.lang.String str92 = overflow82.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DataStructures.Overflow" + "'", str92, "DataStructures.Overflow");
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        java.lang.Object obj23 = queueAr1.dequeue();
        boolean boolean24 = queueAr1.isFull();
        java.lang.Object obj25 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        queueAr14.makeEmpty();
        boolean boolean18 = queueAr14.isFull();
        queueAr14.dequeueAll();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow22.getSuppressed();
        queueAr14.enqueue((java.lang.Object) throwableArray29);
        boolean boolean31 = queueAr14.isEmpty();
        boolean boolean32 = queueAr14.isFull();
        queueAr1.enqueue((java.lang.Object) boolean32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow21.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr30.dequeueAll();
        boolean boolean32 = queueAr30.isEmpty();
        queueAr30.dequeueAll();
        queueAr30.makeEmpty();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        queueAr30.enqueue((java.lang.Object) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow51);
        overflow18.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray58 = overflow51.getSuppressed();
        java.lang.Class<?> wildcardClass59 = throwableArray58.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow8.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray17 = overflow8.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow45);
        overflow23.addSuppressed((java.lang.Throwable) overflow33);
        queueAr16.enqueue((java.lang.Object) overflow23);
        overflow6.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray54 = overflow23.getSuppressed();
        java.lang.String str55 = overflow23.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray43 = overflow32.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow56.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow85);
        overflow32.addSuppressed((java.lang.Throwable) overflow56);
        overflow2.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray93 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow32.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow4.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray26 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow19.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        boolean boolean25 = queueAr9.isFull();
        boolean boolean26 = queueAr9.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow8.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray22 = overflow14.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow14.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        java.lang.Object obj43 = queueAr41.getFront();
        queueAr41.makeEmpty();
        queueAr41.enqueue((java.lang.Object) (-3));
        boolean boolean47 = queueAr41.isEmpty();
        java.lang.Object obj48 = queueAr41.getFront();
        queueAr41.makeEmpty();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow64.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray82 = overflow71.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray92 = overflow88.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow88);
        overflow58.addSuppressed((java.lang.Throwable) overflow88);
        queueAr41.enqueue((java.lang.Object) overflow58);
        overflow25.addSuppressed((java.lang.Throwable) overflow58);
        queueAr1.enqueue((java.lang.Object) overflow25);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + (-3) + "'", obj48, (-3));
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(7);
        queueAr9.dequeueAll();
        java.lang.Object obj11 = queueAr9.getFront();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj15 = queueAr14.getFront();
        queueAr14.dequeueAll();
        java.lang.Object obj17 = queueAr14.dequeue();
        java.lang.Object obj18 = queueAr14.dequeue();
        java.lang.Object obj19 = queueAr14.getFront();
        java.lang.Object obj20 = queueAr14.dequeue();
        queueAr14.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr14.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        boolean boolean18 = queueAr14.isEmpty();
        boolean boolean19 = queueAr14.isFull();
        boolean boolean20 = queueAr14.isFull();
        boolean boolean21 = queueAr14.isFull();
        queueAr14.makeEmpty();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        java.lang.Object obj27 = queueAr24.getFront();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow28.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        queueAr24.enqueue((java.lang.Object) overflow28);
        queueAr14.enqueue((java.lang.Object) overflow28);
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj42 = queueAr1.getFront();
        boolean boolean43 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = obj25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow3.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray22 = overflow15.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.String str24 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DataStructures.Overflow" + "'", str24, "DataStructures.Overflow");
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        boolean boolean18 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        boolean boolean23 = queueAr21.isEmpty();
        queueAr21.dequeueAll();
        queueAr21.makeEmpty();
        java.lang.Object obj26 = queueAr21.dequeue();
        queueAr21.enqueue((java.lang.Object) (-5));
        boolean boolean29 = queueAr21.isFull();
        java.lang.Object obj30 = queueAr21.dequeue();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        queueAr21.enqueue((java.lang.Object) throwableArray47);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        queueAr1.makeEmpty();
        boolean boolean51 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + (-5) + "'", obj30, (-5));
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow34.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow69);
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        overflow40.addSuppressed((java.lang.Throwable) overflow56);
        overflow34.addSuppressed((java.lang.Throwable) overflow56);
        overflow6.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray78 = overflow56.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 10);
        queueAr1.makeEmpty();
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        boolean boolean16 = queueAr11.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray35 = overflow24.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        queueAr11.enqueue((java.lang.Object) overflow41);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow65.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray84 = overflow77.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray86 = overflow77.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray86);
        boolean boolean88 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow23.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray42 = overflow35.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.String str44 = overflow35.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DataStructures.Overflow" + "'", str44, "DataStructures.Overflow");
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        java.lang.Object obj62 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr(2);
        java.lang.Object obj65 = queueAr64.dequeue();
        boolean boolean66 = queueAr64.isFull();
        java.lang.Object obj67 = queueAr64.dequeue();
        queueAr64.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr64);
        boolean boolean70 = queueAr64.isEmpty();
        queueAr64.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr57.dequeueAll();
        boolean boolean59 = queueAr57.isEmpty();
        queueAr57.dequeueAll();
        queueAr57.makeEmpty();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        queueAr57.enqueue((java.lang.Object) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray90 = overflow86.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray92 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow24.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isFull();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray47 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow41.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr3.enqueue((java.lang.Object) (-2));
        boolean boolean6 = queueAr3.isFull();
        queueAr3.makeEmpty();
        boolean boolean8 = queueAr3.isEmpty();
        java.lang.Object obj9 = queueAr3.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        boolean boolean16 = queueAr11.isFull();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj19 = queueAr18.getFront();
        queueAr18.dequeueAll();
        java.lang.Object obj21 = queueAr18.dequeue();
        queueAr11.enqueue(obj21);
        queueAr11.makeEmpty();
        queueAr11.dequeueAll();
        queueAr3.enqueue((java.lang.Object) queueAr11);
        java.lang.Object obj26 = queueAr11.getFront();
        java.lang.Object obj27 = queueAr11.getFront();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        java.lang.Object obj43 = queueAr29.dequeue();
        boolean boolean44 = queueAr29.isEmpty();
        queueAr11.enqueue((java.lang.Object) queueAr29);
        boolean boolean46 = queueAr11.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        java.lang.Throwable[] throwableArray34 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow27.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        overflow60.addSuppressed((java.lang.Throwable) overflow76);
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        overflow39.addSuppressed((java.lang.Throwable) overflow60);
        overflow27.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray82 = overflow60.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.dequeue();
        boolean boolean25 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow4.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray26 = overflow19.getSuppressed();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        boolean boolean31 = queueAr28.isEmpty();
        java.lang.Object obj32 = queueAr28.getFront();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow50.addSuppressed((java.lang.Throwable) overflow57);
        overflow35.addSuppressed((java.lang.Throwable) overflow57);
        queueAr28.enqueue((java.lang.Object) overflow57);
        overflow19.addSuppressed((java.lang.Throwable) overflow57);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj45 = queueAr16.getFront();
        boolean boolean46 = queueAr16.isEmpty();
        java.lang.Class<?> wildcardClass47 = queueAr16.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj12 = queueAr10.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        java.lang.Object obj15 = queueAr12.getFront();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        queueAr12.enqueue((java.lang.Object) overflow16);
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray47 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow36.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow49.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow36.addSuppressed((java.lang.Throwable) overflow49);
        overflow16.addSuppressed((java.lang.Throwable) overflow36);
        queueAr1.enqueue((java.lang.Object) overflow16);
        java.lang.Throwable[] throwableArray63 = overflow16.getSuppressed();
        java.lang.Class<?> wildcardClass64 = overflow16.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow86);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray94 = overflow92.getSuppressed();
        overflow86.addSuppressed((java.lang.Throwable) overflow92);
        overflow79.addSuppressed((java.lang.Throwable) overflow86);
        overflow64.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray98 = overflow64.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow64);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        boolean boolean18 = queueAr1.isFull();
        boolean boolean19 = queueAr1.isFull();
        java.lang.Object obj20 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10L + "'", obj13, 10L);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 10L + "'", obj14, 10L);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        boolean boolean18 = queueAr14.isEmpty();
        java.lang.Object obj19 = queueAr14.getFront();
        java.lang.Object obj20 = queueAr14.dequeue();
        java.lang.Object obj21 = queueAr14.dequeue();
        java.lang.Object obj22 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr14.enqueue((java.lang.Object) queueAr24);
        queueAr1.enqueue((java.lang.Object) queueAr14);
        boolean boolean28 = queueAr14.isEmpty();
        java.lang.Object obj29 = queueAr14.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow31.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray61 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow54.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray81 = overflow66.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray83 = overflow46.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        boolean boolean6 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        queueAr13.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        queueAr13.makeEmpty();
        queueAr13.dequeueAll();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj20 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.getFront();
        boolean boolean28 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        boolean boolean18 = queueAr14.isEmpty();
        java.lang.Object obj19 = queueAr14.getFront();
        java.lang.Object obj20 = queueAr14.dequeue();
        boolean boolean21 = queueAr14.isFull();
        java.lang.Object obj22 = queueAr14.getFront();
        boolean boolean23 = queueAr14.isFull();
        boolean boolean24 = queueAr14.isFull();
        queueAr14.makeEmpty();
        java.lang.Object obj26 = queueAr14.dequeue();
        java.lang.Object obj27 = queueAr14.getFront();
        java.lang.Class<?> wildcardClass28 = queueAr14.getClass();
        queueAr10.enqueue((java.lang.Object) queueAr14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        java.lang.Object obj72 = queueAr13.dequeue();
        java.lang.Object obj73 = queueAr13.dequeue();
        queueAr13.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        boolean boolean13 = queueAr9.isEmpty();
        boolean boolean14 = queueAr9.isFull();
        boolean boolean15 = queueAr9.isFull();
        queueAr9.dequeueAll();
        queueAr9.dequeueAll();
        boolean boolean18 = queueAr9.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        java.lang.Object obj2 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        java.lang.Object obj6 = queueAr4.getFront();
        queueAr4.makeEmpty();
        boolean boolean8 = queueAr4.isFull();
        queueAr4.dequeueAll();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        queueAr4.enqueue((java.lang.Object) throwableArray19);
        boolean boolean21 = queueAr4.isEmpty();
        boolean boolean22 = queueAr4.isEmpty();
        boolean boolean23 = queueAr4.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow28.addSuppressed((java.lang.Throwable) overflow44);
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray48 = overflow28.getSuppressed();
        java.lang.Class<?> wildcardClass49 = overflow28.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr4.enqueue((java.lang.Object) overflow28);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        java.lang.Object obj62 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr(2);
        java.lang.Object obj65 = queueAr64.dequeue();
        boolean boolean66 = queueAr64.isFull();
        java.lang.Object obj67 = queueAr64.dequeue();
        queueAr64.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr64);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Class<?> wildcardClass74 = overflow70.getClass();
        queueAr64.enqueue((java.lang.Object) wildcardClass74);
        queueAr64.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray14 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow8.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow40);
        overflow18.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        overflow47.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray58 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow47.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray61 = overflow47.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow74);
        overflow47.addSuppressed((java.lang.Throwable) overflow74);
        overflow8.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray80 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow47.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj21 = queueAr20.getFront();
        queueAr20.dequeueAll();
        java.lang.Object obj23 = queueAr20.dequeue();
        java.lang.Object obj24 = queueAr20.getFront();
        boolean boolean25 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        java.lang.Object obj28 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = null;
        queueAr1.enqueue(obj10);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean31 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj35 = queueAr33.getFront();
        boolean boolean36 = queueAr33.isFull();
        boolean boolean37 = queueAr33.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj29 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray61 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow8.getSuppressed();
        java.lang.Class<?> wildcardClass64 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow20.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str31 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj32 = queueAr16.getFront();
        boolean boolean33 = queueAr16.isFull();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.enqueue((java.lang.Object) (-2));
        boolean boolean38 = queueAr35.isFull();
        queueAr35.makeEmpty();
        boolean boolean40 = queueAr35.isEmpty();
        java.lang.Object obj41 = queueAr35.dequeue();
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr43.dequeueAll();
        boolean boolean45 = queueAr43.isEmpty();
        queueAr43.dequeueAll();
        queueAr43.makeEmpty();
        boolean boolean48 = queueAr43.isFull();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj51 = queueAr50.getFront();
        queueAr50.dequeueAll();
        java.lang.Object obj53 = queueAr50.dequeue();
        queueAr43.enqueue(obj53);
        queueAr43.makeEmpty();
        queueAr43.dequeueAll();
        queueAr35.enqueue((java.lang.Object) queueAr43);
        queueAr35.makeEmpty();
        DataStructures.QueueAr queueAr60 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean61 = queueAr60.isEmpty();
        java.lang.Object obj62 = queueAr60.getFront();
        java.lang.Object obj63 = queueAr60.dequeue();
        DataStructures.QueueAr queueAr65 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr65.dequeueAll();
        java.lang.Object obj67 = queueAr65.getFront();
        java.lang.Object obj68 = queueAr65.getFront();
        boolean boolean69 = queueAr65.isFull();
        queueAr65.dequeueAll();
        queueAr60.enqueue((java.lang.Object) queueAr65);
        queueAr35.enqueue((java.lang.Object) queueAr65);
        queueAr16.enqueue((java.lang.Object) queueAr35);
        queueAr35.makeEmpty();
        java.lang.Object obj75 = queueAr35.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        boolean boolean29 = queueAr25.isEmpty();
        java.lang.Object obj30 = queueAr25.getFront();
        java.lang.Object obj31 = queueAr25.dequeue();
        queueAr25.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr25);
        queueAr25.makeEmpty();
        java.lang.Class<?> wildcardClass35 = queueAr25.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 8 + "'", obj9, 8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj19 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean22 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow0.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray55 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow44.getSuppressed();
        DataStructures.QueueAr queueAr58 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr58.dequeueAll();
        boolean boolean60 = queueAr58.isEmpty();
        queueAr58.dequeueAll();
        queueAr58.makeEmpty();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        queueAr58.enqueue((java.lang.Object) overflow63);
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow63);
        overflow0.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.String str70 = overflow44.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DataStructures.Overflow" + "'", str70, "DataStructures.Overflow");
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(10);
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        java.lang.Object obj5 = queueAr3.dequeue();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        java.lang.Object obj9 = queueAr7.getFront();
        queueAr7.makeEmpty();
        boolean boolean11 = queueAr7.isFull();
        queueAr3.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj13 = queueAr3.dequeue();
        boolean boolean14 = queueAr3.isEmpty();
        boolean boolean15 = queueAr3.isFull();
        boolean boolean16 = queueAr3.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow49.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow35.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow49.addSuppressed((java.lang.Throwable) overflow74);
        overflow22.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray79 = overflow22.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow84);
        overflow22.addSuppressed((java.lang.Throwable) overflow84);
        queueAr1.enqueue((java.lang.Object) overflow22);
        java.lang.Object obj93 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + true + "'", obj93, true);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        java.lang.Object obj19 = queueAr14.dequeue();
        queueAr14.enqueue((java.lang.Object) (-5));
        boolean boolean22 = queueAr14.isEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj24 = queueAr8.dequeue();
        java.lang.Object obj25 = queueAr8.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        queueAr1.dequeueAll();
        java.lang.Object obj28 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        java.lang.Object obj17 = queueAr1.getFront();
        boolean boolean18 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        java.lang.Object obj34 = queueAr1.dequeue();
        boolean boolean35 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj37 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        java.lang.Object obj9 = queueAr7.getFront();
        java.lang.Object obj10 = queueAr7.getFront();
        queueAr7.dequeueAll();
        java.lang.Object obj12 = queueAr7.getFront();
        queueAr1.enqueue(obj12);
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isEmpty();
        java.lang.Object obj13 = queueAr8.getFront();
        java.lang.Class<?> wildcardClass14 = queueAr8.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass14);
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        queueAr1.enqueue((java.lang.Object) overflow10);
        boolean boolean18 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray39 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        java.lang.Object obj43 = queueAr41.getFront();
        java.lang.Object obj44 = queueAr41.getFront();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow45.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        queueAr41.enqueue((java.lang.Object) overflow45);
        java.lang.Throwable[] throwableArray57 = overflow45.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray76 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow65.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow78.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow65.addSuppressed((java.lang.Throwable) overflow78);
        overflow45.addSuppressed((java.lang.Throwable) overflow65);
        overflow20.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray92 = overflow20.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray8);
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.getFront();
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        boolean boolean34 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        queueAr37.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr1.dequeue();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj43);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 100);
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow34);
        overflow18.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Class<?> wildcardClass40 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean44 = queueAr43.isEmpty();
        java.lang.Object obj45 = queueAr43.dequeue();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        java.lang.Object obj49 = queueAr47.getFront();
        queueAr47.makeEmpty();
        boolean boolean51 = queueAr47.isFull();
        queueAr43.enqueue((java.lang.Object) queueAr47);
        java.lang.Object obj53 = queueAr43.dequeue();
        boolean boolean54 = queueAr43.isEmpty();
        java.lang.Object obj55 = queueAr43.dequeue();
        boolean boolean56 = queueAr43.isEmpty();
        boolean boolean57 = queueAr43.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean57);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 100 + "'", obj12, 100);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        boolean boolean13 = queueAr9.isEmpty();
        boolean boolean14 = queueAr9.isFull();
        boolean boolean15 = queueAr9.isFull();
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj14 = queueAr7.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        java.lang.Object obj19 = queueAr16.getFront();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        queueAr16.enqueue((java.lang.Object) overflow20);
        queueAr16.dequeueAll();
        queueAr7.enqueue((java.lang.Object) queueAr16);
        queueAr7.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        boolean boolean56 = queueAr1.isFull();
        java.lang.Object obj57 = queueAr1.getFront();
        java.lang.Object obj58 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "DataStructures.Overflow");
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        boolean boolean17 = queueAr14.isEmpty();
        java.lang.Object obj18 = queueAr14.getFront();
        boolean boolean19 = queueAr14.isFull();
        java.lang.Object obj20 = queueAr14.getFront();
        java.lang.Object obj21 = queueAr14.getFront();
        boolean boolean22 = queueAr14.isFull();
        queueAr1.enqueue((java.lang.Object) boolean22);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr26.makeEmpty();
        boolean boolean48 = queueAr26.isFull();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr50.dequeueAll();
        boolean boolean52 = queueAr50.isEmpty();
        queueAr50.dequeueAll();
        queueAr50.makeEmpty();
        boolean boolean55 = queueAr50.isFull();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj58 = queueAr57.getFront();
        queueAr57.dequeueAll();
        java.lang.Object obj60 = queueAr57.dequeue();
        queueAr50.enqueue(obj60);
        queueAr50.makeEmpty();
        queueAr50.dequeueAll();
        java.lang.Object obj64 = queueAr50.dequeue();
        boolean boolean65 = queueAr50.isEmpty();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        overflow68.addSuppressed((java.lang.Throwable) overflow76);
        queueAr50.enqueue((java.lang.Object) overflow76);
        queueAr50.makeEmpty();
        java.lang.Object obj84 = queueAr50.getFront();
        queueAr50.makeEmpty();
        queueAr26.enqueue((java.lang.Object) queueAr50);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj19 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean40 = queueAr26.isFull();
        queueAr26.makeEmpty();
        queueAr26.makeEmpty();
        boolean boolean43 = queueAr26.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.QueueAr queueAr59 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr59.dequeueAll();
        java.lang.Object obj61 = queueAr59.getFront();
        queueAr59.makeEmpty();
        queueAr59.dequeueAll();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray92 = overflow88.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow88);
        overflow66.addSuppressed((java.lang.Throwable) overflow76);
        queueAr59.enqueue((java.lang.Object) overflow66);
        overflow49.addSuppressed((java.lang.Throwable) overflow66);
        overflow37.addSuppressed((java.lang.Throwable) overflow49);
        overflow12.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Class<?> wildcardClass99 = overflow49.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str36 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean45 = queueAr44.isEmpty();
        java.lang.Object obj46 = queueAr44.dequeue();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr48.dequeueAll();
        java.lang.Object obj50 = queueAr48.getFront();
        queueAr48.makeEmpty();
        boolean boolean52 = queueAr48.isFull();
        queueAr44.enqueue((java.lang.Object) queueAr48);
        java.lang.Object obj54 = queueAr44.dequeue();
        queueAr41.enqueue((java.lang.Object) queueAr44);
        java.lang.Object obj56 = queueAr44.getFront();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        queueAr44.enqueue((java.lang.Object) overflow69);
        overflow37.addSuppressed((java.lang.Throwable) overflow69);
        queueAr1.enqueue((java.lang.Object) overflow69);
        java.lang.Throwable[] throwableArray76 = overflow69.getSuppressed();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.dequeue();
        boolean boolean6 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        java.lang.Object obj11 = queueAr9.getFront();
        queueAr9.makeEmpty();
        boolean boolean13 = queueAr9.isFull();
        boolean boolean14 = queueAr9.isEmpty();
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        java.lang.Object obj18 = queueAr9.getFront();
        queueAr9.dequeueAll();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj22 = queueAr21.getFront();
        queueAr21.dequeueAll();
        java.lang.Object obj24 = queueAr21.dequeue();
        java.lang.Object obj25 = queueAr21.dequeue();
        queueAr21.makeEmpty();
        queueAr21.makeEmpty();
        queueAr21.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr(6);
        queueAr1.enqueue((java.lang.Object) 6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean16 = queueAr1.isFull();
        java.lang.Object obj17 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.makeEmpty();
        java.lang.Object obj57 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow5.getSuppressed();
        java.lang.String str17 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow20.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray38 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray32 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean35 = queueAr34.isEmpty();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean38 = queueAr37.isEmpty();
        java.lang.Object obj39 = queueAr37.dequeue();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        java.lang.Object obj43 = queueAr41.getFront();
        queueAr41.makeEmpty();
        boolean boolean45 = queueAr41.isFull();
        queueAr37.enqueue((java.lang.Object) queueAr41);
        java.lang.Object obj47 = queueAr37.dequeue();
        queueAr34.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj49 = queueAr37.getFront();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow62);
        queueAr37.enqueue((java.lang.Object) overflow62);
        overflow7.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray68 = overflow62.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean26 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass27 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr64.dequeueAll();
        java.lang.Object obj66 = queueAr64.getFront();
        queueAr64.makeEmpty();
        queueAr64.enqueue((java.lang.Object) (-3));
        java.lang.Object obj70 = queueAr64.dequeue();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow83);
        queueAr64.enqueue((java.lang.Object) overflow83);
        overflow26.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray91 = overflow12.getSuppressed();
        java.lang.String str92 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + (-3) + "'", obj70, (-3));
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DataStructures.Overflow" + "'", str92, "DataStructures.Overflow");
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        java.lang.Object obj62 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        queueAr9.makeEmpty();
        boolean boolean54 = queueAr9.isEmpty();
        boolean boolean55 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean6 = queueAr5.isEmpty();
        java.lang.Object obj7 = queueAr5.dequeue();
        boolean boolean8 = queueAr5.isEmpty();
        java.lang.Object obj9 = queueAr5.getFront();
        boolean boolean10 = queueAr5.isFull();
        java.lang.Object obj11 = queueAr5.getFront();
        java.lang.Object obj12 = queueAr5.getFront();
        boolean boolean13 = queueAr5.isFull();
        java.lang.Class<?> wildcardClass14 = queueAr5.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass14);
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray53 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr55 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr55.dequeueAll();
        boolean boolean57 = queueAr55.isEmpty();
        queueAr55.dequeueAll();
        queueAr55.makeEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        queueAr55.enqueue((java.lang.Object) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow60.addSuppressed((java.lang.Throwable) overflow72);
        overflow31.addSuppressed((java.lang.Throwable) overflow72);
        overflow12.addSuppressed((java.lang.Throwable) overflow31);
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str82 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DataStructures.Overflow" + "'", str82, "DataStructures.Overflow");
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow11.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.makeEmpty();
        boolean boolean49 = queueAr1.isFull();
        java.lang.Object obj50 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass51 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow45);
        overflow23.addSuppressed((java.lang.Throwable) overflow33);
        queueAr16.enqueue((java.lang.Object) overflow23);
        overflow6.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str54 = overflow23.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow21.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow61);
        overflow45.addSuppressed((java.lang.Throwable) overflow61);
        overflow21.addSuppressed((java.lang.Throwable) overflow61);
        overflow14.addSuppressed((java.lang.Throwable) overflow61);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        boolean boolean56 = queueAr1.isFull();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray74 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow59.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray87 = overflow80.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray89 = overflow80.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow80);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        java.lang.Object obj15 = queueAr10.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj17 = queueAr10.dequeue();
        queueAr10.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        boolean boolean34 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr(1);
        boolean boolean38 = queueAr37.isFull();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        boolean boolean42 = queueAr40.isEmpty();
        queueAr40.dequeueAll();
        queueAr40.enqueue((java.lang.Object) (-4L));
        boolean boolean46 = queueAr40.isFull();
        queueAr40.dequeueAll();
        boolean boolean48 = queueAr40.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr50.enqueue((java.lang.Object) (-2));
        boolean boolean53 = queueAr50.isFull();
        java.lang.Class<?> wildcardClass54 = queueAr50.getClass();
        queueAr40.enqueue((java.lang.Object) wildcardClass54);
        queueAr40.dequeueAll();
        queueAr37.enqueue((java.lang.Object) queueAr40);
        boolean boolean58 = queueAr37.isEmpty();
        java.lang.Object obj59 = queueAr37.dequeue();
        queueAr1.enqueue(obj59);
        java.lang.Object obj61 = queueAr1.dequeue();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(obj61);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj16 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr12.dequeueAll();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray27);
        queueAr1.enqueue((java.lang.Object) throwableArray27);
        java.lang.Object obj30 = queueAr1.dequeue();
        java.lang.Object obj31 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        java.lang.Object obj25 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj27 = queueAr9.getFront();
        java.lang.Object obj28 = queueAr9.getFront();
        java.lang.Object obj29 = queueAr9.dequeue();
        java.lang.Object obj30 = queueAr9.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass15 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow9.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        overflow30.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow65.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray88 = overflow84.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow84);
        overflow9.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray91 = overflow65.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow65);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.dequeue();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        queueAr6.makeEmpty();
        boolean boolean9 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        boolean boolean11 = queueAr6.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        boolean boolean13 = queueAr6.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray30 = overflow23.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str32 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray47 = overflow36.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        overflow61.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray89 = overflow87.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow87);
        overflow61.addSuppressed((java.lang.Throwable) overflow81);
        overflow53.addSuppressed((java.lang.Throwable) overflow81);
        overflow26.addSuppressed((java.lang.Throwable) overflow53);
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray95 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean31 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.enqueue((java.lang.Object) queueAr33);
        boolean boolean35 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray44 = overflow29.getSuppressed();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        queueAr46.enqueue((java.lang.Object) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray73 = overflow51.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow74.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow74);
        overflow29.addSuppressed((java.lang.Throwable) overflow51);
        overflow9.addSuppressed((java.lang.Throwable) overflow29);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray84 = overflow9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        java.lang.Object obj20 = queueAr1.dequeue();
        java.lang.Object obj21 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) 'a');
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow34.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow69);
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        overflow40.addSuppressed((java.lang.Throwable) overflow56);
        overflow34.addSuppressed((java.lang.Throwable) overflow56);
        overflow6.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.String str78 = overflow56.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Overflow" + "'", str78, "DataStructures.Overflow");
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj26 = queueAr1.getFront();
        boolean boolean27 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        queueAr28.makeEmpty();
        boolean boolean32 = queueAr28.isFull();
        queueAr28.dequeueAll();
        queueAr15.enqueue((java.lang.Object) queueAr28);
        queueAr15.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        java.lang.Object obj49 = queueAr9.getFront();
        DataStructures.QueueAr queueAr51 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr51.dequeueAll();
        boolean boolean53 = queueAr51.isEmpty();
        queueAr51.dequeueAll();
        boolean boolean55 = queueAr51.isEmpty();
        boolean boolean56 = queueAr51.isFull();
        boolean boolean57 = queueAr51.isFull();
        queueAr51.dequeueAll();
        java.lang.Object obj59 = queueAr51.getFront();
        boolean boolean60 = queueAr51.isFull();
        DataStructures.QueueAr queueAr62 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr62.dequeueAll();
        java.lang.Object obj64 = queueAr62.getFront();
        queueAr62.makeEmpty();
        boolean boolean66 = queueAr62.isFull();
        boolean boolean67 = queueAr62.isEmpty();
        queueAr62.dequeueAll();
        boolean boolean69 = queueAr62.isEmpty();
        queueAr51.enqueue((java.lang.Object) boolean69);
        queueAr9.enqueue((java.lang.Object) boolean69);
        java.lang.Object obj72 = queueAr9.getFront();
        DataStructures.QueueAr queueAr74 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean75 = queueAr74.isEmpty();
        java.lang.Object obj76 = queueAr74.dequeue();
        DataStructures.QueueAr queueAr78 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr78.dequeueAll();
        java.lang.Object obj80 = queueAr78.getFront();
        queueAr78.makeEmpty();
        boolean boolean82 = queueAr78.isFull();
        queueAr74.enqueue((java.lang.Object) queueAr78);
        java.lang.Object obj84 = queueAr74.dequeue();
        boolean boolean85 = queueAr74.isEmpty();
        boolean boolean86 = queueAr74.isFull();
        java.lang.Object obj87 = queueAr74.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr74);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + true + "'", obj72, true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isFull();
        boolean boolean13 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray24);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + (-3) + "'", obj11, (-3));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        java.lang.Object obj5 = queueAr1.dequeue();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isEmpty();
        java.lang.Object obj13 = queueAr8.getFront();
        java.lang.Object obj14 = queueAr8.dequeue();
        java.lang.Object obj15 = queueAr8.dequeue();
        java.lang.Object obj16 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj19 = queueAr18.getFront();
        queueAr8.enqueue((java.lang.Object) queueAr18);
        queueAr1.enqueue((java.lang.Object) queueAr8);
        boolean boolean22 = queueAr8.isEmpty();
        queueAr8.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        DataStructures.QueueAr queueAr54 = new DataStructures.QueueAr(0);
        boolean boolean55 = queueAr54.isEmpty();
        java.lang.Object obj56 = queueAr54.getFront();
        queueAr54.dequeueAll();
        queueAr50.enqueue((java.lang.Object) queueAr54);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        java.lang.Object obj25 = queueAr17.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean28 = queueAr27.isEmpty();
        java.lang.Object obj29 = queueAr27.dequeue();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        java.lang.Object obj33 = queueAr31.getFront();
        queueAr31.makeEmpty();
        boolean boolean35 = queueAr31.isFull();
        queueAr27.enqueue((java.lang.Object) queueAr31);
        java.lang.Object obj37 = queueAr27.dequeue();
        boolean boolean38 = queueAr27.isEmpty();
        java.lang.Object obj39 = queueAr27.dequeue();
        queueAr17.enqueue((java.lang.Object) queueAr27);
        boolean boolean41 = queueAr27.isEmpty();
        queueAr27.makeEmpty();
        java.lang.Object obj43 = queueAr27.dequeue();
        java.lang.Object obj44 = queueAr27.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.dequeue();
        java.lang.Object obj13 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow26.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.String str36 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow8.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow25);
        overflow8.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        boolean boolean37 = queueAr35.isEmpty();
        queueAr35.dequeueAll();
        queueAr35.makeEmpty();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        queueAr35.enqueue((java.lang.Object) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow40.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow63);
        overflow19.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.String str71 = overflow19.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DataStructures.Overflow" + "'", str71, "DataStructures.Overflow");
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        java.lang.String str71 = overflow40.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DataStructures.Overflow" + "'", str71, "DataStructures.Overflow");
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.dequeue();
        java.lang.Object obj26 = queueAr9.getFront();
        java.lang.Object obj27 = queueAr9.getFront();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj10 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj12 = queueAr9.dequeue();
        java.lang.Object obj13 = queueAr9.dequeue();
        java.lang.Object obj14 = queueAr9.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr32.dequeueAll();
        java.lang.Object obj34 = queueAr32.getFront();
        queueAr32.makeEmpty();
        boolean boolean36 = queueAr32.isFull();
        queueAr32.makeEmpty();
        queueAr16.enqueue((java.lang.Object) queueAr32);
        java.lang.Object obj39 = queueAr32.getFront();
        queueAr9.enqueue((java.lang.Object) queueAr32);
        queueAr9.dequeueAll();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.dequeueAll();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.enqueue((java.lang.Object) (-4L));
        boolean boolean10 = queueAr4.isFull();
        queueAr4.dequeueAll();
        boolean boolean12 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr14.getClass();
        queueAr4.enqueue((java.lang.Object) wildcardClass18);
        queueAr4.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj22 = queueAr4.dequeue();
        queueAr4.makeEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        java.lang.Object obj27 = queueAr25.getFront();
        java.lang.Object obj28 = queueAr25.getFront();
        boolean boolean29 = queueAr25.isEmpty();
        boolean boolean30 = queueAr25.isFull();
        queueAr25.dequeueAll();
        java.lang.Object obj32 = queueAr25.getFront();
        queueAr25.dequeueAll();
        boolean boolean34 = queueAr25.isEmpty();
        queueAr4.enqueue((java.lang.Object) boolean34);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        boolean boolean34 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        queueAr37.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr37.dequeue();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.Object obj70 = queueAr1.dequeue();
        boolean boolean71 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass72 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        java.lang.Object obj20 = queueAr17.getFront();
        queueAr17.makeEmpty();
        java.lang.Object obj22 = queueAr17.dequeue();
        queueAr17.makeEmpty();
        boolean boolean24 = queueAr17.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 9.6d + "'", obj5, 9.6d);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow8.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow25);
        overflow8.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        java.lang.Object obj37 = queueAr35.getFront();
        queueAr35.makeEmpty();
        queueAr35.enqueue((java.lang.Object) (-3));
        boolean boolean41 = queueAr35.isEmpty();
        java.lang.Object obj42 = queueAr35.getFront();
        queueAr35.makeEmpty();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray76 = overflow65.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow82);
        overflow52.addSuppressed((java.lang.Throwable) overflow82);
        queueAr35.enqueue((java.lang.Object) overflow52);
        overflow19.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray91 = overflow19.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + (-3) + "'", obj42, (-3));
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray28 = overflow17.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray40 = overflow34.getSuppressed();
        queueAr9.enqueue((java.lang.Object) throwableArray40);
        queueAr1.enqueue((java.lang.Object) queueAr9);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        queueAr14.enqueue((java.lang.Object) queueAr18);
        java.lang.Object obj24 = queueAr14.dequeue();
        java.lang.Object obj25 = queueAr14.getFront();
        queueAr14.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj28 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj30 = queueAr1.getFront();
        boolean boolean31 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean45 = queueAr44.isEmpty();
        java.lang.Object obj46 = queueAr44.dequeue();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr48.dequeueAll();
        java.lang.Object obj50 = queueAr48.getFront();
        queueAr48.makeEmpty();
        boolean boolean52 = queueAr48.isFull();
        queueAr44.enqueue((java.lang.Object) queueAr48);
        java.lang.Object obj54 = queueAr44.dequeue();
        queueAr41.enqueue((java.lang.Object) queueAr44);
        java.lang.Object obj56 = queueAr44.getFront();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        queueAr44.enqueue((java.lang.Object) overflow69);
        overflow37.addSuppressed((java.lang.Throwable) overflow69);
        queueAr1.enqueue((java.lang.Object) overflow69);
        java.lang.Object obj76 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass77 = obj76.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        java.lang.Object obj19 = queueAr8.getFront();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) 'a');
        queueAr8.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj24 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        queueAr1.enqueue((java.lang.Object) overflow20);
        java.lang.Object obj26 = queueAr1.dequeue();
        boolean boolean27 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray23 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow12.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow12.addSuppressed((java.lang.Throwable) overflow25);
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        overflow2.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow79.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow90.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow90);
        overflow2.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray98 = overflow85.getSuppressed();
        java.lang.Throwable[] throwableArray99 = overflow85.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr57.dequeueAll();
        boolean boolean59 = queueAr57.isEmpty();
        queueAr57.dequeueAll();
        queueAr57.makeEmpty();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        queueAr57.enqueue((java.lang.Object) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray90 = overflow86.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray92 = overflow24.getSuppressed();
        java.lang.Class<?> wildcardClass93 = throwableArray92.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) '#');
        queueAr5.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr5.dequeueAll();
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.makeEmpty();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        queueAr4.enqueue((java.lang.Object) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray67 = overflow62.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow68.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        overflow48.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow81.addSuppressed((java.lang.Throwable) overflow87);
        overflow62.addSuppressed((java.lang.Throwable) overflow87);
        overflow35.addSuppressed((java.lang.Throwable) overflow62);
        overflow9.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow93);
        java.lang.Throwable[] throwableArray95 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray96 = overflow35.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray98 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow37.addSuppressed((java.lang.Throwable) overflow49);
        queueAr5.enqueue((java.lang.Object) overflow37);
        boolean boolean61 = queueAr5.isFull();
        java.lang.Object obj62 = queueAr5.getFront();
        java.lang.Object obj63 = queueAr5.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "DataStructures.Overflow");
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        queueAr21.makeEmpty();
        queueAr21.enqueue((java.lang.Object) (-3));
        boolean boolean27 = queueAr21.isFull();
        queueAr1.enqueue((java.lang.Object) boolean27);
        java.lang.Object obj29 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        queueAr11.makeEmpty();
        queueAr11.makeEmpty();
        java.lang.Object obj18 = queueAr11.getFront();
        java.lang.Object obj19 = queueAr11.dequeue();
        java.lang.Object obj20 = queueAr11.getFront();
        queueAr1.enqueue(obj20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        boolean boolean18 = queueAr1.isEmpty();
        java.lang.Object obj19 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        java.lang.Object obj19 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass20 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray35 = overflow23.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow62);
        overflow42.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray69 = overflow56.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray71 = overflow23.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str73 = overflow23.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DataStructures.Overflow" + "'", str73, "DataStructures.Overflow");
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        queueAr19.dequeueAll();
        queueAr19.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr19);
        java.lang.Object obj26 = queueAr19.getFront();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        java.lang.Object obj31 = queueAr28.getFront();
        queueAr28.makeEmpty();
        java.lang.Object obj33 = queueAr28.dequeue();
        boolean boolean34 = queueAr28.isEmpty();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr(7);
        queueAr36.dequeueAll();
        java.lang.Object obj38 = queueAr36.getFront();
        queueAr28.enqueue(obj38);
        queueAr28.makeEmpty();
        queueAr28.dequeueAll();
        queueAr28.dequeueAll();
        queueAr19.enqueue((java.lang.Object) queueAr28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray30);
        java.lang.Object obj32 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        java.lang.Object obj36 = queueAr34.getFront();
        java.lang.Object obj37 = queueAr34.getFront();
        boolean boolean38 = queueAr34.isFull();
        boolean boolean39 = queueAr34.isEmpty();
        java.lang.Object obj40 = queueAr34.dequeue();
        queueAr34.makeEmpty();
        boolean boolean42 = queueAr34.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        boolean boolean17 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        boolean boolean13 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isFull();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        boolean boolean23 = queueAr9.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj25 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        boolean boolean15 = queueAr13.isEmpty();
        queueAr13.dequeueAll();
        java.lang.Object obj17 = queueAr13.dequeue();
        java.lang.Object obj18 = queueAr13.dequeue();
        queueAr13.enqueue((java.lang.Object) false);
        boolean boolean21 = queueAr13.isFull();
        java.lang.Object obj22 = queueAr13.getFront();
        boolean boolean23 = queueAr13.isEmpty();
        boolean boolean24 = queueAr13.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + false + "'", obj22, false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        overflow3.addSuppressed((java.lang.Throwable) overflow41);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + false + "'", obj9, false);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow20.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean21 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        queueAr6.makeEmpty();
        boolean boolean11 = queueAr6.isFull();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        java.lang.Object obj15 = queueAr13.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr13.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj23 = queueAr13.dequeue();
        java.lang.Object obj24 = queueAr13.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) 'a');
        queueAr13.enqueue((java.lang.Object) queueAr26);
        queueAr6.enqueue((java.lang.Object) queueAr26);
        queueAr1.enqueue((java.lang.Object) queueAr26);
        boolean boolean30 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        overflow45.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        overflow45.addSuppressed((java.lang.Throwable) overflow65);
        overflow37.addSuppressed((java.lang.Throwable) overflow65);
        overflow10.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray78 = overflow37.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray78);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean21 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        java.lang.Object obj14 = queueAr11.getFront();
        java.lang.Object obj15 = queueAr11.dequeue();
        queueAr11.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (short) 100);
        java.lang.Object obj14 = queueAr5.dequeue();
        queueAr5.dequeueAll();
        queueAr5.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (short) 100 + "'", obj14, (short) 100);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.getFront();
        java.lang.Object obj10 = queueAr7.dequeue();
        java.lang.Object obj11 = queueAr7.getFront();
        java.lang.Object obj12 = queueAr7.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow15.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow48.addSuppressed((java.lang.Throwable) overflow66);
        overflow15.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow74.addSuppressed((java.lang.Throwable) overflow80);
        overflow48.addSuppressed((java.lang.Throwable) overflow74);
        queueAr7.enqueue((java.lang.Object) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow48);
        java.lang.Throwable[] throwableArray89 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray90 = overflow48.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        queueAr28.makeEmpty();
        boolean boolean32 = queueAr28.isFull();
        queueAr28.dequeueAll();
        queueAr15.enqueue((java.lang.Object) queueAr28);
        boolean boolean35 = queueAr28.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        boolean boolean41 = queueAr39.isEmpty();
        queueAr39.dequeueAll();
        boolean boolean43 = queueAr39.isEmpty();
        boolean boolean44 = queueAr39.isFull();
        boolean boolean45 = queueAr39.isFull();
        boolean boolean46 = queueAr39.isFull();
        queueAr39.makeEmpty();
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr49.dequeueAll();
        java.lang.Object obj51 = queueAr49.getFront();
        java.lang.Object obj52 = queueAr49.getFront();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow53.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        queueAr49.enqueue((java.lang.Object) overflow53);
        queueAr39.enqueue((java.lang.Object) overflow53);
        overflow8.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.String str67 = overflow8.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Overflow" + "'", str67, "DataStructures.Overflow");
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isFull();
        java.lang.Object obj5 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        boolean boolean17 = queueAr12.isFull();
        java.lang.Object obj18 = queueAr12.getFront();
        queueAr12.dequeueAll();
        boolean boolean20 = queueAr12.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean20);
        queueAr1.dequeueAll();
        java.lang.Object obj23 = queueAr1.dequeue();
        boolean boolean24 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow22.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow30.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        overflow30.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray59 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow50.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow50);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) 6);
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 6 + "'", obj8, 6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 6 + "'", obj9, 6);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Class<?> wildcardClass21 = overflow10.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        boolean boolean22 = queueAr17.isFull();
        boolean boolean23 = queueAr17.isFull();
        boolean boolean24 = queueAr17.isFull();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        boolean boolean30 = queueAr26.isEmpty();
        java.lang.Object obj31 = queueAr26.getFront();
        java.lang.Object obj32 = queueAr26.dequeue();
        boolean boolean33 = queueAr26.isFull();
        java.lang.Object obj34 = queueAr26.getFront();
        boolean boolean35 = queueAr26.isFull();
        java.lang.Class<?> wildcardClass36 = queueAr26.getClass();
        queueAr17.enqueue((java.lang.Object) wildcardClass36);
        queueAr17.dequeueAll();
        boolean boolean39 = queueAr17.isEmpty();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        boolean boolean43 = queueAr41.isEmpty();
        queueAr41.dequeueAll();
        queueAr41.makeEmpty();
        java.lang.Object obj46 = queueAr41.dequeue();
        queueAr41.enqueue((java.lang.Object) (-5));
        java.lang.Object obj49 = queueAr41.getFront();
        boolean boolean50 = queueAr41.isEmpty();
        queueAr17.enqueue((java.lang.Object) queueAr41);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        boolean boolean54 = queueAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-5) + "'", obj49, (-5));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean35 = queueAr1.isEmpty();
        boolean boolean36 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        java.lang.Object obj18 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.enqueue((java.lang.Object) (-2));
        boolean boolean29 = queueAr26.isFull();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isEmpty();
        java.lang.Object obj32 = queueAr26.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        boolean boolean36 = queueAr34.isEmpty();
        queueAr34.dequeueAll();
        queueAr34.makeEmpty();
        boolean boolean39 = queueAr34.isFull();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj42 = queueAr41.getFront();
        queueAr41.dequeueAll();
        java.lang.Object obj44 = queueAr41.dequeue();
        queueAr34.enqueue(obj44);
        queueAr34.makeEmpty();
        queueAr34.dequeueAll();
        queueAr26.enqueue((java.lang.Object) queueAr34);
        java.lang.Object obj49 = queueAr34.getFront();
        java.lang.Object obj50 = queueAr34.getFront();
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        boolean boolean54 = queueAr52.isEmpty();
        queueAr52.dequeueAll();
        queueAr52.makeEmpty();
        boolean boolean57 = queueAr52.isFull();
        DataStructures.QueueAr queueAr59 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj60 = queueAr59.getFront();
        queueAr59.dequeueAll();
        java.lang.Object obj62 = queueAr59.dequeue();
        queueAr52.enqueue(obj62);
        queueAr52.makeEmpty();
        queueAr52.dequeueAll();
        java.lang.Object obj66 = queueAr52.dequeue();
        boolean boolean67 = queueAr52.isEmpty();
        queueAr34.enqueue((java.lang.Object) queueAr52);
        boolean boolean69 = queueAr34.isEmpty();
        java.lang.Class<?> wildcardClass70 = queueAr34.getClass();
        queueAr9.enqueue((java.lang.Object) queueAr34);
        boolean boolean72 = queueAr34.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        queueAr7.dequeueAll();
        queueAr7.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        queueAr17.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj34 = queueAr17.dequeue();
        boolean boolean35 = queueAr17.isFull();
        java.lang.Object obj36 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.dequeue();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        boolean boolean25 = queueAr17.isFull();
        java.lang.Object obj26 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean35 = queueAr34.isEmpty();
        java.lang.Object obj36 = queueAr34.dequeue();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr38.dequeueAll();
        java.lang.Object obj40 = queueAr38.getFront();
        queueAr38.makeEmpty();
        boolean boolean42 = queueAr38.isFull();
        queueAr34.enqueue((java.lang.Object) queueAr38);
        boolean boolean44 = queueAr38.isEmpty();
        boolean boolean45 = queueAr38.isFull();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray64 = overflow53.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow88);
        overflow70.addSuppressed((java.lang.Throwable) overflow82);
        queueAr38.enqueue((java.lang.Object) overflow70);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        overflow2.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray96 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow70.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        java.lang.Object obj19 = queueAr14.dequeue();
        queueAr14.enqueue((java.lang.Object) (-5));
        boolean boolean22 = queueAr14.isEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj24 = queueAr8.dequeue();
        java.lang.Object obj25 = queueAr8.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        queueAr1.dequeueAll();
        boolean boolean28 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray28 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow17.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow30.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray47 = overflow42.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow62);
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray67 = overflow56.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray90 = overflow89.getSuppressed();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow91);
        overflow73.addSuppressed((java.lang.Throwable) overflow85);
        overflow42.addSuppressed((java.lang.Throwable) overflow73);
        overflow17.addSuppressed((java.lang.Throwable) overflow73);
        overflow2.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray99 = overflow73.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        java.lang.Class<?> wildcardClass13 = queueAr10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr20.makeEmpty();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        queueAr20.enqueue((java.lang.Object) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow49);
        overflow7.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow71.addSuppressed((java.lang.Throwable) overflow78);
        overflow56.addSuppressed((java.lang.Throwable) overflow78);
        overflow49.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.String str91 = overflow49.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "DataStructures.Overflow" + "'", str91, "DataStructures.Overflow");
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow16.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray46 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray57 = overflow48.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray69 = overflow58.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow58);
        overflow16.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.String str72 = overflow58.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DataStructures.Overflow" + "'", str72, "DataStructures.Overflow");
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        queueAr16.enqueue((java.lang.Object) 8);
        java.lang.Object obj23 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        boolean boolean38 = queueAr25.isEmpty();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        boolean boolean42 = queueAr40.isEmpty();
        queueAr40.dequeueAll();
        queueAr40.makeEmpty();
        boolean boolean45 = queueAr40.isFull();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj48 = queueAr47.getFront();
        queueAr47.dequeueAll();
        java.lang.Object obj50 = queueAr47.dequeue();
        queueAr40.enqueue(obj50);
        queueAr40.makeEmpty();
        queueAr40.dequeueAll();
        java.lang.Object obj54 = queueAr40.getFront();
        queueAr25.enqueue((java.lang.Object) queueAr40);
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean58 = queueAr57.isEmpty();
        java.lang.Object obj59 = queueAr57.dequeue();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr61.dequeueAll();
        java.lang.Object obj63 = queueAr61.getFront();
        queueAr61.makeEmpty();
        boolean boolean65 = queueAr61.isFull();
        queueAr57.enqueue((java.lang.Object) queueAr61);
        java.lang.Object obj67 = queueAr57.dequeue();
        queueAr40.enqueue((java.lang.Object) queueAr57);
        java.lang.Object obj69 = queueAr40.getFront();
        queueAr16.enqueue((java.lang.Object) queueAr40);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        queueAr16.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 8 + "'", obj23, 8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(obj69);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow42.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray64 = overflow42.getSuppressed();
        DataStructures.QueueAr queueAr66 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr66.dequeueAll();
        boolean boolean68 = queueAr66.isEmpty();
        queueAr66.dequeueAll();
        queueAr66.makeEmpty();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        queueAr66.enqueue((java.lang.Object) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow83);
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        overflow42.addSuppressed((java.lang.Throwable) overflow83);
        overflow23.addSuppressed((java.lang.Throwable) overflow42);
        overflow3.addSuppressed((java.lang.Throwable) overflow42);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow37.getSuppressed();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr64.dequeueAll();
        boolean boolean66 = queueAr64.isEmpty();
        queueAr64.dequeueAll();
        queueAr64.makeEmpty();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        queueAr64.enqueue((java.lang.Object) overflow69);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray92 = overflow91.getSuppressed();
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        overflow91.addSuppressed((java.lang.Throwable) overflow93);
        java.lang.Throwable[] throwableArray95 = overflow93.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow93);
        java.lang.Throwable[] throwableArray97 = overflow93.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow93);
        java.lang.String str99 = overflow93.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "DataStructures.Overflow" + "'", str99, "DataStructures.Overflow");
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        java.lang.Object obj19 = queueAr13.dequeue();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        queueAr13.enqueue((java.lang.Object) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow83);
        overflow58.addSuppressed((java.lang.Throwable) overflow83);
        overflow32.addSuppressed((java.lang.Throwable) overflow83);
        queueAr1.enqueue((java.lang.Object) overflow32);
        java.lang.Object obj89 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-3) + "'", obj19, (-3));
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "DataStructures.Overflow");
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.enqueue((java.lang.Object) (-4L));
        boolean boolean17 = queueAr11.isFull();
        queueAr11.dequeueAll();
        boolean boolean19 = queueAr11.isEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        java.lang.Class<?> wildcardClass25 = queueAr21.getClass();
        queueAr11.enqueue((java.lang.Object) wildcardClass25);
        java.lang.Class<?> wildcardClass27 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean29 = queueAr1.isFull();
        boolean boolean30 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        java.lang.Object obj9 = queueAr7.getFront();
        java.lang.Object obj10 = queueAr7.getFront();
        boolean boolean11 = queueAr7.isEmpty();
        boolean boolean12 = queueAr7.isFull();
        java.lang.Object obj13 = queueAr7.dequeue();
        java.lang.Object obj14 = queueAr7.getFront();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Class<?> wildcardClass98 = overflow23.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        queueAr1.dequeueAll();
        java.lang.Object obj18 = queueAr1.getFront();
        boolean boolean19 = queueAr1.isFull();
        java.lang.Object obj20 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow12.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow36.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow71.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow71);
        overflow29.addSuppressed((java.lang.Throwable) overflow71);
        overflow12.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray80 = overflow29.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow29);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        java.lang.Throwable[] throwableArray89 = overflow87.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray91 = overflow87.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray93 = overflow87.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow71);
        overflow49.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow88.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        overflow49.addSuppressed((java.lang.Throwable) overflow90);
        queueAr26.enqueue((java.lang.Object) overflow49);
        java.lang.String str96 = overflow49.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean35 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        java.lang.Object obj14 = queueAr12.getFront();
        boolean boolean15 = queueAr12.isFull();
        queueAr12.makeEmpty();
        java.lang.Object obj17 = queueAr12.dequeue();
        java.lang.Object obj18 = queueAr12.dequeue();
        java.lang.Object obj19 = queueAr12.dequeue();
        queueAr12.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        boolean boolean22 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj24 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        boolean boolean30 = queueAr26.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr32.dequeueAll();
        boolean boolean34 = queueAr32.isEmpty();
        queueAr32.dequeueAll();
        boolean boolean36 = queueAr32.isEmpty();
        java.lang.Object obj37 = queueAr32.getFront();
        java.lang.Object obj38 = queueAr32.dequeue();
        queueAr32.makeEmpty();
        queueAr26.enqueue((java.lang.Object) queueAr32);
        java.lang.Object obj41 = queueAr32.getFront();
        java.lang.Object obj42 = queueAr32.dequeue();
        boolean boolean43 = queueAr32.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj16 = queueAr7.getFront();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        queueAr7.enqueue((java.lang.Object) throwableArray33);
        queueAr7.makeEmpty();
        boolean boolean36 = queueAr7.isEmpty();
        boolean boolean37 = queueAr7.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj13 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10L + "'", obj13, 10L);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray45 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        boolean boolean49 = queueAr47.isEmpty();
        queueAr47.dequeueAll();
        queueAr47.makeEmpty();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        queueAr47.enqueue((java.lang.Object) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Class<?> wildcardClass58 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow23.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow23.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray48 = overflow39.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray59 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow50.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow50);
        overflow12.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray63 = overflow50.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        boolean boolean25 = queueAr19.isEmpty();
        queueAr19.enqueue((java.lang.Object) (-10.5d));
        queueAr11.enqueue((java.lang.Object) queueAr19);
        queueAr11.makeEmpty();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        java.lang.Object obj33 = queueAr31.getFront();
        queueAr31.makeEmpty();
        boolean boolean35 = queueAr31.isFull();
        boolean boolean36 = queueAr31.isEmpty();
        queueAr31.makeEmpty();
        queueAr31.dequeueAll();
        queueAr31.makeEmpty();
        java.lang.Object obj40 = queueAr31.getFront();
        java.lang.Object obj41 = queueAr31.getFront();
        boolean boolean42 = queueAr31.isEmpty();
        queueAr11.enqueue((java.lang.Object) queueAr31);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        java.lang.Object obj34 = queueAr1.dequeue();
        boolean boolean35 = queueAr1.isEmpty();
        boolean boolean36 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray34 = overflow16.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow39.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow39);
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow50.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow58.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow72.addSuppressed((java.lang.Throwable) overflow78);
        overflow58.addSuppressed((java.lang.Throwable) overflow78);
        overflow5.addSuppressed((java.lang.Throwable) overflow78);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.QueueAr queueAr59 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr59.dequeueAll();
        java.lang.Object obj61 = queueAr59.getFront();
        queueAr59.makeEmpty();
        queueAr59.dequeueAll();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray92 = overflow88.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow88);
        overflow66.addSuppressed((java.lang.Throwable) overflow76);
        queueAr59.enqueue((java.lang.Object) overflow66);
        overflow49.addSuppressed((java.lang.Throwable) overflow66);
        overflow37.addSuppressed((java.lang.Throwable) overflow49);
        overflow12.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.String str99 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "DataStructures.Overflow" + "'", str99, "DataStructures.Overflow");
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-4L) + "'", obj8, (-4L));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray53 = overflow38.getSuppressed();
        DataStructures.QueueAr queueAr55 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr55.dequeueAll();
        boolean boolean57 = queueAr55.isEmpty();
        queueAr55.dequeueAll();
        queueAr55.makeEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        queueAr55.enqueue((java.lang.Object) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray80 = overflow76.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray82 = overflow60.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow83.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow83);
        overflow38.addSuppressed((java.lang.Throwable) overflow60);
        overflow18.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray92 = overflow18.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.String str94 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "DataStructures.Overflow" + "'", str94, "DataStructures.Overflow");
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray16 = overflow9.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray16);
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray65 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray68 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow2.getSuppressed();
        java.lang.String str71 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DataStructures.Overflow" + "'", str71, "DataStructures.Overflow");
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        boolean boolean22 = queueAr17.isFull();
        boolean boolean23 = queueAr17.isFull();
        boolean boolean24 = queueAr17.isFull();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        boolean boolean30 = queueAr26.isEmpty();
        java.lang.Object obj31 = queueAr26.getFront();
        java.lang.Object obj32 = queueAr26.dequeue();
        boolean boolean33 = queueAr26.isFull();
        java.lang.Object obj34 = queueAr26.getFront();
        boolean boolean35 = queueAr26.isFull();
        java.lang.Class<?> wildcardClass36 = queueAr26.getClass();
        queueAr17.enqueue((java.lang.Object) wildcardClass36);
        queueAr17.dequeueAll();
        boolean boolean39 = queueAr17.isEmpty();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        boolean boolean43 = queueAr41.isEmpty();
        queueAr41.dequeueAll();
        queueAr41.makeEmpty();
        java.lang.Object obj46 = queueAr41.dequeue();
        queueAr41.enqueue((java.lang.Object) (-5));
        java.lang.Object obj49 = queueAr41.getFront();
        boolean boolean50 = queueAr41.isEmpty();
        queueAr17.enqueue((java.lang.Object) queueAr41);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean53 = queueAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-5) + "'", obj49, (-5));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean14 = queueAr1.isEmpty();
        boolean boolean15 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean8);
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow7.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow7.addSuppressed((java.lang.Throwable) overflow28);
        queueAr1.enqueue((java.lang.Object) overflow7);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 100);
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow34);
        overflow18.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Class<?> wildcardClass40 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Class<?> wildcardClass42 = overflow18.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 100 + "'", obj12, 100);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        boolean boolean6 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        boolean boolean19 = queueAr8.isEmpty();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow36);
        queueAr8.enqueue((java.lang.Object) overflow25);
        queueAr1.enqueue((java.lang.Object) overflow25);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray35 = overflow24.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        overflow13.addSuppressed((java.lang.Throwable) overflow41);
        queueAr1.enqueue((java.lang.Object) overflow41);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow10.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray56 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow41.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray61 = overflow41.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow61.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow61);
        overflow19.addSuppressed((java.lang.Throwable) overflow61);
        overflow2.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray70 = overflow2.getSuppressed();
        java.lang.String str71 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DataStructures.Overflow" + "'", str71, "DataStructures.Overflow");
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        boolean boolean56 = queueAr1.isFull();
        boolean boolean57 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow15.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow50.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow50);
        overflow8.addSuppressed((java.lang.Throwable) overflow50);
        queueAr1.enqueue((java.lang.Object) overflow50);
        boolean boolean59 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow8.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow37.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray52 = overflow37.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray62 = overflow53.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow53);
        overflow29.addSuppressed((java.lang.Throwable) overflow37);
        overflow8.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray66 = overflow8.getSuppressed();
        java.lang.String str67 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Overflow" + "'", str67, "DataStructures.Overflow");
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        boolean boolean17 = queueAr12.isFull();
        java.lang.Object obj18 = queueAr12.getFront();
        queueAr12.dequeueAll();
        boolean boolean20 = queueAr12.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean20);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        queueAr10.enqueue((java.lang.Object) (-3));
        boolean boolean16 = queueAr10.isEmpty();
        java.lang.Object obj17 = queueAr10.getFront();
        queueAr10.makeEmpty();
        java.lang.Object obj19 = queueAr10.getFront();
        java.lang.Object obj20 = queueAr10.getFront();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        boolean boolean24 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        boolean boolean26 = queueAr22.isEmpty();
        java.lang.Object obj27 = queueAr22.getFront();
        java.lang.Object obj28 = queueAr22.dequeue();
        queueAr22.makeEmpty();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) ' ');
        queueAr22.enqueue((java.lang.Object) queueAr31);
        queueAr10.enqueue((java.lang.Object) queueAr31);
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj35 = queueAr10.dequeue();
        boolean boolean36 = queueAr10.isEmpty();
        queueAr10.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 9.6d + "'", obj5, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-3) + "'", obj17, (-3));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.getFront();
        java.lang.Object obj10 = queueAr7.dequeue();
        java.lang.Object obj11 = queueAr7.getFront();
        java.lang.Object obj12 = queueAr7.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow15.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow48.addSuppressed((java.lang.Throwable) overflow66);
        overflow15.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow74.addSuppressed((java.lang.Throwable) overflow80);
        overflow48.addSuppressed((java.lang.Throwable) overflow74);
        queueAr7.enqueue((java.lang.Object) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow48);
        boolean boolean89 = queueAr1.isFull();
        boolean boolean90 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow42);
        overflow12.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray49 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray51 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.enqueue((java.lang.Object) (-4L));
        boolean boolean10 = queueAr4.isFull();
        queueAr4.dequeueAll();
        boolean boolean12 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr14.getClass();
        queueAr4.enqueue((java.lang.Object) wildcardClass18);
        queueAr4.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj22 = queueAr4.dequeue();
        java.lang.Object obj23 = queueAr4.dequeue();
        java.lang.Object obj24 = queueAr4.dequeue();
        java.lang.Object obj25 = queueAr4.dequeue();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow43.addSuppressed((java.lang.Throwable) overflow50);
        overflow28.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray71 = overflow62.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray73 = overflow50.getSuppressed();
        queueAr4.enqueue((java.lang.Object) overflow50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        queueAr9.makeEmpty();
        boolean boolean54 = queueAr9.isEmpty();
        java.lang.Object obj55 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj20 = queueAr8.getFront();
        java.lang.Object obj21 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        boolean boolean25 = queueAr23.isEmpty();
        queueAr23.dequeueAll();
        boolean boolean27 = queueAr23.isEmpty();
        boolean boolean28 = queueAr23.isFull();
        boolean boolean29 = queueAr23.isFull();
        boolean boolean30 = queueAr23.isFull();
        queueAr23.makeEmpty();
        java.lang.Object obj32 = queueAr23.getFront();
        java.lang.Object obj33 = queueAr23.dequeue();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.enqueue((java.lang.Object) (-2));
        boolean boolean38 = queueAr35.isFull();
        java.lang.Class<?> wildcardClass39 = queueAr35.getClass();
        queueAr23.enqueue((java.lang.Object) wildcardClass39);
        queueAr8.enqueue((java.lang.Object) queueAr23);
        java.lang.Object obj42 = queueAr8.dequeue();
        queueAr8.dequeueAll();
        DataStructures.QueueAr queueAr45 = new DataStructures.QueueAr((int) (byte) 100);
        queueAr45.makeEmpty();
        java.lang.Object obj47 = queueAr45.getFront();
        queueAr8.enqueue((java.lang.Object) queueAr45);
        queueAr1.enqueue((java.lang.Object) queueAr45);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj32 = queueAr16.getFront();
        java.lang.Object obj33 = queueAr16.dequeue();
        java.lang.Object obj34 = queueAr16.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow43.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow68.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray86 = overflow75.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray93 = overflow92.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow92.getSuppressed();
        overflow89.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray96 = overflow92.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow92);
        overflow43.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray99 = overflow75.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        boolean boolean20 = queueAr16.isEmpty();
        boolean boolean21 = queueAr16.isFull();
        boolean boolean22 = queueAr16.isFull();
        boolean boolean23 = queueAr16.isFull();
        queueAr16.makeEmpty();
        java.lang.Object obj25 = queueAr16.getFront();
        java.lang.Object obj26 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.enqueue((java.lang.Object) (-2));
        boolean boolean31 = queueAr28.isFull();
        java.lang.Class<?> wildcardClass32 = queueAr28.getClass();
        queueAr16.enqueue((java.lang.Object) wildcardClass32);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj35 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 100);
        queueAr38.makeEmpty();
        java.lang.Object obj40 = queueAr38.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr38);
        boolean boolean42 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        java.lang.Object obj34 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass35 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray74 = overflow66.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray90 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow86.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray93 = overflow89.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray95 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray96 = overflow89.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow89);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        overflow41.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray59 = overflow48.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow65);
        overflow35.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray72 = overflow65.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray74 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow21.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow21);
        overflow2.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray89 = overflow83.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow83);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        java.lang.Object obj13 = queueAr10.getFront();
        boolean boolean14 = queueAr10.isEmpty();
        boolean boolean15 = queueAr10.isFull();
        queueAr10.dequeueAll();
        boolean boolean17 = queueAr10.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        queueAr10.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        boolean boolean10 = queueAr6.isEmpty();
        boolean boolean11 = queueAr6.isFull();
        boolean boolean12 = queueAr6.isFull();
        queueAr6.dequeueAll();
        boolean boolean14 = queueAr6.isFull();
        java.lang.Object obj15 = queueAr6.getFront();
        java.lang.Object obj16 = null;
        queueAr6.enqueue(obj16);
        boolean boolean18 = queueAr6.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        boolean boolean20 = queueAr6.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj16 = queueAr4.getFront();
        java.lang.Object obj17 = queueAr4.getFront();
        queueAr4.makeEmpty();
        java.lang.Object obj19 = queueAr4.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (short) 100);
        boolean boolean14 = queueAr5.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        boolean boolean13 = queueAr1.isEmpty();
        boolean boolean14 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.dequeue();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isFull();
        boolean boolean13 = queueAr1.isEmpty();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr1.dequeueAll();
        java.lang.Object obj25 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        boolean boolean19 = queueAr14.isFull();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj22 = queueAr21.getFront();
        queueAr21.dequeueAll();
        java.lang.Object obj24 = queueAr21.dequeue();
        queueAr14.enqueue(obj24);
        queueAr14.makeEmpty();
        queueAr14.makeEmpty();
        boolean boolean28 = queueAr14.isFull();
        java.lang.Object obj29 = queueAr14.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        boolean boolean31 = queueAr14.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        DataStructures.QueueAr queueAr54 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr54.dequeueAll();
        java.lang.Object obj56 = queueAr54.getFront();
        queueAr54.makeEmpty();
        boolean boolean58 = queueAr54.isFull();
        queueAr54.dequeueAll();
        boolean boolean60 = queueAr54.isFull();
        queueAr54.dequeueAll();
        boolean boolean62 = queueAr54.isEmpty();
        queueAr54.makeEmpty();
        java.lang.Object obj64 = queueAr54.dequeue();
        queueAr50.enqueue((java.lang.Object) queueAr54);
        java.lang.Object obj66 = queueAr50.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow8.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        boolean boolean33 = queueAr31.isEmpty();
        queueAr31.dequeueAll();
        boolean boolean35 = queueAr31.isEmpty();
        java.lang.Object obj36 = queueAr31.getFront();
        java.lang.Object obj37 = queueAr31.dequeue();
        java.lang.Object obj38 = queueAr31.dequeue();
        java.lang.Object obj39 = queueAr31.dequeue();
        queueAr31.makeEmpty();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow69);
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        overflow41.addSuppressed((java.lang.Throwable) overflow57);
        queueAr31.enqueue((java.lang.Object) overflow57);
        overflow8.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow8.addSuppressed(throwable79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow55.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray74 = overflow67.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray76 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow67.getSuppressed();
        java.lang.String str78 = overflow67.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Overflow" + "'", str78, "DataStructures.Overflow");
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        java.lang.Object obj23 = queueAr1.dequeue();
        boolean boolean24 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        queueAr1.enqueue((java.lang.Object) overflow35);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 8 + "'", obj9, 8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        queueAr7.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj32 = queueAr16.getFront();
        boolean boolean33 = queueAr16.isFull();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.enqueue((java.lang.Object) (-2));
        boolean boolean38 = queueAr35.isFull();
        queueAr35.makeEmpty();
        boolean boolean40 = queueAr35.isEmpty();
        java.lang.Object obj41 = queueAr35.dequeue();
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr43.dequeueAll();
        boolean boolean45 = queueAr43.isEmpty();
        queueAr43.dequeueAll();
        queueAr43.makeEmpty();
        boolean boolean48 = queueAr43.isFull();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj51 = queueAr50.getFront();
        queueAr50.dequeueAll();
        java.lang.Object obj53 = queueAr50.dequeue();
        queueAr43.enqueue(obj53);
        queueAr43.makeEmpty();
        queueAr43.dequeueAll();
        queueAr35.enqueue((java.lang.Object) queueAr43);
        queueAr35.makeEmpty();
        DataStructures.QueueAr queueAr60 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean61 = queueAr60.isEmpty();
        java.lang.Object obj62 = queueAr60.getFront();
        java.lang.Object obj63 = queueAr60.dequeue();
        DataStructures.QueueAr queueAr65 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr65.dequeueAll();
        java.lang.Object obj67 = queueAr65.getFront();
        java.lang.Object obj68 = queueAr65.getFront();
        boolean boolean69 = queueAr65.isFull();
        queueAr65.dequeueAll();
        queueAr60.enqueue((java.lang.Object) queueAr65);
        queueAr35.enqueue((java.lang.Object) queueAr65);
        queueAr16.enqueue((java.lang.Object) queueAr35);
        boolean boolean74 = queueAr35.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.getFront();
        queueAr5.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr64.dequeueAll();
        java.lang.Object obj66 = queueAr64.getFront();
        queueAr64.makeEmpty();
        queueAr64.enqueue((java.lang.Object) (-3));
        java.lang.Object obj70 = queueAr64.dequeue();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow83);
        queueAr64.enqueue((java.lang.Object) overflow83);
        overflow26.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray91 = overflow83.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + (-3) + "'", obj70, (-3));
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr(2);
        boolean boolean19 = queueAr18.isEmpty();
        boolean boolean20 = queueAr18.isFull();
        boolean boolean21 = queueAr18.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        java.lang.Object obj19 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        boolean boolean24 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        boolean boolean26 = queueAr22.isEmpty();
        java.lang.Object obj27 = queueAr22.getFront();
        java.lang.Object obj28 = queueAr22.dequeue();
        java.lang.Object obj29 = queueAr22.dequeue();
        java.lang.Object obj30 = queueAr22.dequeue();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr22.enqueue((java.lang.Object) queueAr32);
        queueAr32.dequeueAll();
        java.lang.Object obj36 = queueAr32.dequeue();
        queueAr32.makeEmpty();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) ' ');
        queueAr39.makeEmpty();
        queueAr39.makeEmpty();
        queueAr39.dequeueAll();
        queueAr32.enqueue((java.lang.Object) queueAr39);
        queueAr1.enqueue((java.lang.Object) queueAr32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        boolean boolean22 = queueAr17.isFull();
        boolean boolean23 = queueAr17.isFull();
        java.lang.Object obj24 = queueAr17.dequeue();
        boolean boolean25 = queueAr17.isFull();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow26.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        queueAr17.enqueue((java.lang.Object) throwableArray37);
        queueAr7.enqueue((java.lang.Object) queueAr17);
        boolean boolean40 = queueAr7.isEmpty();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        queueAr42.makeEmpty();
        queueAr42.dequeueAll();
        queueAr42.makeEmpty();
        java.lang.Object obj47 = queueAr42.getFront();
        boolean boolean48 = queueAr42.isEmpty();
        queueAr42.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr7.enqueue((java.lang.Object) queueAr42);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-4L) + "'", obj8, (-4L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean24 = queueAr1.isEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        java.lang.Object obj26 = queueAr1.getFront();
        java.lang.Object obj27 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        boolean boolean56 = queueAr1.isFull();
        java.lang.Object obj57 = queueAr1.getFront();
        java.lang.Object obj58 = queueAr1.getFront();
        java.lang.Object obj59 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "DataStructures.Overflow");
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        boolean boolean15 = queueAr11.isEmpty();
        java.lang.Object obj16 = queueAr11.getFront();
        java.lang.Object obj17 = queueAr11.dequeue();
        boolean boolean18 = queueAr11.isFull();
        java.lang.Object obj19 = queueAr11.getFront();
        boolean boolean20 = queueAr11.isFull();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        queueAr11.makeEmpty();
        queueAr11.dequeueAll();
        java.lang.Object obj25 = queueAr11.getFront();
        queueAr11.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        java.lang.Object obj28 = queueAr11.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isFull();
        boolean boolean18 = queueAr1.isFull();
        java.lang.Object obj19 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj16 = queueAr4.getFront();
        java.lang.Object obj17 = queueAr4.getFront();
        boolean boolean18 = queueAr4.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj63 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        java.lang.Object obj8 = queueAr5.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        queueAr5.enqueue((java.lang.Object) overflow9);
        boolean boolean21 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow30);
        queueAr1.enqueue((java.lang.Object) overflow30);
        queueAr1.dequeueAll();
        boolean boolean44 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        queueAr1.enqueue((java.lang.Object) 10);
        queueAr1.makeEmpty();
        java.lang.Object obj73 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass74 = obj73.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr48.dequeueAll();
        boolean boolean50 = queueAr48.isEmpty();
        queueAr48.dequeueAll();
        boolean boolean52 = queueAr48.isEmpty();
        java.lang.Object obj53 = queueAr48.getFront();
        java.lang.Object obj54 = queueAr48.dequeue();
        boolean boolean55 = queueAr48.isFull();
        java.lang.Object obj56 = queueAr48.getFront();
        boolean boolean57 = queueAr48.isFull();
        queueAr48.dequeueAll();
        queueAr48.makeEmpty();
        queueAr48.makeEmpty();
        queueAr48.dequeueAll();
        java.lang.Object obj62 = queueAr48.getFront();
        queueAr48.makeEmpty();
        queueAr16.enqueue((java.lang.Object) queueAr48);
        boolean boolean65 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-5) + "'", obj10, (-5));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        java.lang.Object obj19 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow56.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray79 = overflow56.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow56);
        queueAr1.enqueue((java.lang.Object) overflow56);
        java.lang.String str82 = overflow56.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DataStructures.Overflow" + "'", str82, "DataStructures.Overflow");
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        java.lang.Object obj2 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = obj2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean8);
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean19 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(5);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow25.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow37);
        overflow19.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray45 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        boolean boolean13 = queueAr10.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray8);
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        boolean boolean18 = queueAr14.isEmpty();
        java.lang.Object obj19 = queueAr14.getFront();
        java.lang.Object obj20 = queueAr14.dequeue();
        queueAr14.makeEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        queueAr14.dequeueAll();
        queueAr14.dequeueAll();
        boolean boolean26 = queueAr14.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj28 = queueAr14.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray16 = overflow9.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray16);
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj22 = queueAr1.getFront();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr(0);
        boolean boolean25 = queueAr24.isEmpty();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj28 = queueAr24.getFront();
        boolean boolean29 = queueAr24.isEmpty();
        boolean boolean30 = queueAr24.isEmpty();
        boolean boolean31 = queueAr24.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray22 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow17.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) throwableArray23);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.dequeue();
        java.lang.Object obj15 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow29.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        overflow40.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray55 = overflow40.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray65 = overflow56.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray76 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow67.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow67);
        overflow29.addSuppressed((java.lang.Throwable) overflow67);
        overflow12.addSuppressed((java.lang.Throwable) overflow67);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        boolean boolean23 = queueAr21.isEmpty();
        queueAr21.dequeueAll();
        queueAr21.makeEmpty();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        queueAr21.enqueue((java.lang.Object) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.String str32 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        boolean boolean25 = queueAr19.isEmpty();
        queueAr19.enqueue((java.lang.Object) (-10.5d));
        queueAr11.enqueue((java.lang.Object) queueAr19);
        java.lang.Object obj29 = queueAr11.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow0.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        overflow54.addSuppressed((java.lang.Throwable) overflow61);
        overflow39.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray82 = overflow73.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray84 = overflow61.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray86 = overflow33.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray92 = overflow91.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow91.getSuppressed();
        overflow87.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray96 = overflow87.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow87.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow87);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr20.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.String str9 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DataStructures.Overflow" + "'", str9, "DataStructures.Overflow");
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.dequeue();
        boolean boolean25 = queueAr17.isFull();
        boolean boolean26 = queueAr17.isEmpty();
        boolean boolean27 = queueAr17.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        boolean boolean15 = queueAr13.isEmpty();
        queueAr13.dequeueAll();
        boolean boolean17 = queueAr13.isEmpty();
        java.lang.Object obj18 = queueAr13.getFront();
        java.lang.Object obj19 = queueAr13.dequeue();
        boolean boolean20 = queueAr13.isFull();
        java.lang.Object obj21 = queueAr13.getFront();
        boolean boolean22 = queueAr13.isFull();
        boolean boolean23 = queueAr13.isFull();
        queueAr13.makeEmpty();
        java.lang.Object obj25 = queueAr13.dequeue();
        java.lang.Object obj26 = queueAr13.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
    }
}

