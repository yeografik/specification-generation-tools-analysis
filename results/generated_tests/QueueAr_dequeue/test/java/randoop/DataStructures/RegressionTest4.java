package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) '#');
        boolean boolean18 = queueAr1.isEmpty();
        java.lang.Object obj19 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj21 = queueAr1.getFront();
        java.lang.Object obj22 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + '#' + "'", obj19, '#');
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        queueAr14.enqueue((java.lang.Object) queueAr18);
        java.lang.Object obj24 = queueAr14.dequeue();
        java.lang.Object obj25 = queueAr14.getFront();
        queueAr14.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj28 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow2.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow77);
        overflow2.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray84 = overflow58.getSuppressed();
        java.lang.Class<?> wildcardClass85 = throwableArray84.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        boolean boolean16 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow3.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray22 = overflow15.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray49 = overflow44.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        overflow30.addSuppressed((java.lang.Throwable) overflow44);
        overflow15.addSuppressed((java.lang.Throwable) overflow30);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isFull();
        java.lang.Object obj20 = queueAr1.dequeue();
        boolean boolean21 = queueAr1.isFull();
        boolean boolean22 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj45 = queueAr16.getFront();
        queueAr16.dequeueAll();
        boolean boolean47 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow6.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow18);
        overflow0.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray26 = overflow0.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow46.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray68 = overflow46.getSuppressed();
        DataStructures.QueueAr queueAr70 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr70.dequeueAll();
        boolean boolean72 = queueAr70.isEmpty();
        queueAr70.dequeueAll();
        queueAr70.makeEmpty();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        queueAr70.enqueue((java.lang.Object) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow81.addSuppressed((java.lang.Throwable) overflow87);
        overflow75.addSuppressed((java.lang.Throwable) overflow87);
        overflow46.addSuppressed((java.lang.Throwable) overflow87);
        overflow27.addSuppressed((java.lang.Throwable) overflow46);
        overflow0.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.String str97 = overflow46.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Overflow" + "'", str97, "DataStructures.Overflow");
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean47 = queueAr9.isEmpty();
        boolean boolean48 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj12 = queueAr8.dequeue();
        queueAr8.dequeueAll();
        java.lang.Object obj14 = queueAr8.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        boolean boolean16 = queueAr8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 9.6d + "'", obj12, 9.6d);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean27 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow89.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow89);
        overflow73.addSuppressed((java.lang.Throwable) overflow89);
        overflow0.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray96 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean12);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean19 = queueAr18.isEmpty();
        java.lang.Object obj20 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        java.lang.Object obj24 = queueAr22.getFront();
        queueAr22.makeEmpty();
        boolean boolean26 = queueAr22.isFull();
        queueAr18.enqueue((java.lang.Object) queueAr22);
        boolean boolean28 = queueAr22.isEmpty();
        boolean boolean29 = queueAr22.isFull();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        queueAr22.enqueue((java.lang.Object) overflow54);
        overflow4.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray79 = overflow4.getSuppressed();
        java.lang.Class<?> wildcardClass80 = throwableArray79.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        boolean boolean47 = queueAr16.isEmpty();
        java.lang.Object obj48 = queueAr16.getFront();
        boolean boolean49 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.dequeueAll();
        java.lang.Object obj35 = queueAr33.getFront();
        queueAr33.makeEmpty();
        boolean boolean37 = queueAr33.isFull();
        java.lang.Object obj38 = queueAr33.dequeue();
        java.lang.Object obj39 = queueAr33.dequeue();
        java.lang.Object obj40 = queueAr33.dequeue();
        queueAr16.enqueue(obj40);
        java.lang.Object obj42 = queueAr16.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        java.lang.Object obj19 = queueAr1.getFront();
        boolean boolean20 = queueAr1.isFull();
        java.lang.Object obj21 = queueAr1.getFront();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        boolean boolean25 = queueAr23.isEmpty();
        queueAr23.dequeueAll();
        queueAr23.makeEmpty();
        boolean boolean28 = queueAr23.isFull();
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj31 = queueAr30.getFront();
        queueAr30.dequeueAll();
        java.lang.Object obj33 = queueAr30.dequeue();
        queueAr23.enqueue(obj33);
        queueAr23.makeEmpty();
        queueAr23.dequeueAll();
        java.lang.Object obj37 = queueAr23.dequeue();
        boolean boolean38 = queueAr23.isFull();
        queueAr23.makeEmpty();
        queueAr23.makeEmpty();
        boolean boolean41 = queueAr23.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray61 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj16 = queueAr1.dequeue();
        java.lang.Object obj17 = null;
        queueAr1.enqueue(obj17);
        boolean boolean19 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Class<?> wildcardClass16 = queueAr7.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow8.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        overflow8.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.String str57 = overflow49.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DataStructures.Overflow" + "'", str57, "DataStructures.Overflow");
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        java.lang.Object obj19 = queueAr8.getFront();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) 'a');
        queueAr8.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        queueAr1.dequeueAll();
        java.lang.Object obj25 = null;
        queueAr1.enqueue(obj25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        java.lang.Object obj11 = queueAr9.getFront();
        java.lang.Object obj12 = queueAr9.getFront();
        queueAr9.makeEmpty();
        java.lang.Object obj14 = queueAr9.dequeue();
        queueAr9.dequeueAll();
        boolean boolean16 = queueAr9.isFull();
        queueAr1.enqueue((java.lang.Object) boolean16);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray33 = overflow27.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Class<?> wildcardClass35 = overflow27.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean47 = queueAr9.isEmpty();
        queueAr9.makeEmpty();
        boolean boolean49 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        queueAr7.enqueue((java.lang.Object) queueAr11);
        queueAr1.enqueue((java.lang.Object) queueAr7);
        boolean boolean18 = queueAr7.isEmpty();
        boolean boolean19 = queueAr7.isFull();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj22 = queueAr7.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.dequeue();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 10L + "'", obj5, 10L);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = null;
        queueAr1.enqueue(obj11);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.enqueue((java.lang.Object) (-4L));
        boolean boolean10 = queueAr4.isFull();
        queueAr4.dequeueAll();
        boolean boolean12 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr14.getClass();
        queueAr4.enqueue((java.lang.Object) wildcardClass18);
        queueAr4.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj22 = queueAr4.dequeue();
        java.lang.Object obj23 = queueAr4.dequeue();
        boolean boolean24 = queueAr4.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        boolean boolean20 = queueAr16.isEmpty();
        boolean boolean21 = queueAr16.isFull();
        boolean boolean22 = queueAr16.isFull();
        boolean boolean23 = queueAr16.isFull();
        queueAr16.makeEmpty();
        java.lang.Object obj25 = queueAr16.getFront();
        java.lang.Object obj26 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.enqueue((java.lang.Object) (-2));
        boolean boolean31 = queueAr28.isFull();
        java.lang.Class<?> wildcardClass32 = queueAr28.getClass();
        queueAr16.enqueue((java.lang.Object) wildcardClass32);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj35 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj37 = queueAr1.dequeue();
        boolean boolean38 = queueAr1.isFull();
        java.lang.Object obj39 = queueAr1.dequeue();
        java.lang.Object obj40 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean11 = queueAr10.isEmpty();
        java.lang.Object obj12 = queueAr10.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        queueAr14.makeEmpty();
        boolean boolean18 = queueAr14.isFull();
        queueAr10.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj20 = queueAr10.dequeue();
        boolean boolean21 = queueAr10.isEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow38);
        queueAr10.enqueue((java.lang.Object) overflow27);
        java.lang.Object obj41 = queueAr10.getFront();
        java.lang.Object obj42 = queueAr10.dequeue();
        queueAr1.enqueue(obj42);
        boolean boolean44 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow20.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray38 = overflow5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr(8);
        boolean boolean7 = queueAr6.isFull();
        queueAr1.enqueue((java.lang.Object) boolean7);
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + false + "'", obj9, false);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean19 = queueAr18.isEmpty();
        java.lang.Object obj20 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        java.lang.Object obj24 = queueAr22.getFront();
        queueAr22.makeEmpty();
        boolean boolean26 = queueAr22.isFull();
        queueAr18.enqueue((java.lang.Object) queueAr22);
        boolean boolean28 = queueAr22.isEmpty();
        boolean boolean29 = queueAr22.isFull();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        queueAr22.enqueue((java.lang.Object) overflow54);
        overflow4.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray90 = overflow83.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow83);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        java.lang.Object obj19 = queueAr13.dequeue();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        queueAr13.enqueue((java.lang.Object) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow83);
        overflow58.addSuppressed((java.lang.Throwable) overflow83);
        overflow32.addSuppressed((java.lang.Throwable) overflow83);
        queueAr1.enqueue((java.lang.Object) overflow32);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-3) + "'", obj19, (-3));
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        boolean boolean29 = queueAr25.isEmpty();
        java.lang.Object obj30 = queueAr25.getFront();
        java.lang.Object obj31 = queueAr25.dequeue();
        queueAr25.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr25);
        boolean boolean34 = queueAr9.isEmpty();
        boolean boolean35 = queueAr9.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow36.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow36);
        overflow12.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray48 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray36 = overflow2.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean49 = queueAr48.isEmpty();
        java.lang.Object obj50 = queueAr48.dequeue();
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        java.lang.Object obj54 = queueAr52.getFront();
        queueAr52.makeEmpty();
        boolean boolean56 = queueAr52.isFull();
        queueAr48.enqueue((java.lang.Object) queueAr52);
        java.lang.Object obj58 = queueAr48.dequeue();
        boolean boolean59 = queueAr48.isEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow76);
        queueAr48.enqueue((java.lang.Object) overflow65);
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow2.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray81 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow65.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        java.lang.Object obj2 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        java.lang.Object obj6 = queueAr4.getFront();
        queueAr4.makeEmpty();
        boolean boolean8 = queueAr4.isFull();
        queueAr4.dequeueAll();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        queueAr4.enqueue((java.lang.Object) throwableArray19);
        boolean boolean21 = queueAr4.isEmpty();
        boolean boolean22 = queueAr4.isEmpty();
        boolean boolean23 = queueAr4.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean25 = queueAr4.isEmpty();
        queueAr4.makeEmpty();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        boolean boolean30 = queueAr28.isEmpty();
        queueAr28.dequeueAll();
        queueAr28.makeEmpty();
        boolean boolean33 = queueAr28.isFull();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj36 = queueAr35.getFront();
        queueAr35.dequeueAll();
        java.lang.Object obj38 = queueAr35.dequeue();
        queueAr28.enqueue(obj38);
        queueAr28.makeEmpty();
        queueAr28.makeEmpty();
        boolean boolean42 = queueAr28.isFull();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj47 = queueAr46.getFront();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr44.enqueue((java.lang.Object) queueAr46);
        queueAr28.enqueue((java.lang.Object) queueAr44);
        queueAr28.makeEmpty();
        queueAr4.enqueue((java.lang.Object) queueAr28);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.makeEmpty();
        boolean boolean57 = queueAr1.isEmpty();
        java.lang.Object obj58 = queueAr1.getFront();
        java.lang.Object obj59 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj61 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + false + "'", obj9, false);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow18.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray33 = overflow18.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray43 = overflow34.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow45.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow45);
        overflow7.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray21 = overflow9.getSuppressed();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean24 = queueAr23.isEmpty();
        java.lang.Object obj25 = queueAr23.dequeue();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        boolean boolean31 = queueAr27.isFull();
        queueAr23.enqueue((java.lang.Object) queueAr27);
        boolean boolean33 = queueAr27.isEmpty();
        boolean boolean34 = queueAr27.isFull();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow48);
        overflow35.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray53 = overflow42.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow59.addSuppressed((java.lang.Throwable) overflow71);
        queueAr27.enqueue((java.lang.Object) overflow59);
        overflow9.addSuppressed((java.lang.Throwable) overflow59);
        queueAr1.enqueue((java.lang.Object) overflow9);
        java.lang.String str85 = overflow9.toString();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DataStructures.Overflow" + "'", str85, "DataStructures.Overflow");
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        java.lang.Throwable[] throwableArray17 = overflow11.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow46);
        overflow24.addSuppressed((java.lang.Throwable) overflow34);
        overflow18.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray54 = overflow18.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.String str56 = overflow11.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DataStructures.Overflow" + "'", str56, "DataStructures.Overflow");
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = null;
        queueAr1.enqueue(obj10);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj12 = queueAr1.getFront();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        boolean boolean17 = queueAr12.isFull();
        boolean boolean18 = queueAr12.isFull();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        java.lang.Object obj21 = queueAr12.getFront();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean24 = queueAr23.isEmpty();
        java.lang.Object obj25 = queueAr23.dequeue();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        boolean boolean31 = queueAr27.isFull();
        queueAr23.enqueue((java.lang.Object) queueAr27);
        java.lang.Object obj33 = queueAr23.getFront();
        java.lang.Object obj34 = queueAr23.getFront();
        queueAr12.enqueue((java.lang.Object) queueAr23);
        queueAr1.enqueue((java.lang.Object) queueAr23);
        queueAr23.dequeueAll();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (short) 10);
        queueAr23.enqueue((java.lang.Object) (short) 10);
        boolean boolean41 = queueAr23.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow0.addSuppressed((java.lang.Throwable) overflow26);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isEmpty();
        java.lang.Object obj21 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr12.dequeueAll();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray27);
        queueAr1.enqueue((java.lang.Object) throwableArray27);
        boolean boolean30 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr32.dequeueAll();
        java.lang.Object obj34 = queueAr32.getFront();
        java.lang.Object obj35 = queueAr32.getFront();
        queueAr32.makeEmpty();
        java.lang.Object obj37 = queueAr32.dequeue();
        queueAr32.dequeueAll();
        queueAr32.dequeueAll();
        queueAr32.makeEmpty();
        queueAr32.dequeueAll();
        boolean boolean42 = queueAr32.isEmpty();
        boolean boolean43 = queueAr32.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr32);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        java.lang.Object obj46 = queueAr16.getFront();
        java.lang.Class<?> wildcardClass47 = queueAr16.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        queueAr11.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        queueAr14.makeEmpty();
        boolean boolean18 = queueAr14.isFull();
        queueAr14.dequeueAll();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow22.getSuppressed();
        queueAr14.enqueue((java.lang.Object) throwableArray29);
        boolean boolean31 = queueAr14.isEmpty();
        boolean boolean32 = queueAr14.isFull();
        boolean boolean33 = queueAr14.isEmpty();
        boolean boolean34 = queueAr14.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr14.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow15.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow15.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow31.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray51 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow42.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow42);
        queueAr1.enqueue((java.lang.Object) overflow42);
        DataStructures.QueueAr queueAr56 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr56.dequeueAll();
        boolean boolean58 = queueAr56.isEmpty();
        queueAr56.dequeueAll();
        boolean boolean60 = queueAr56.isEmpty();
        java.lang.Object obj61 = queueAr56.getFront();
        java.lang.Object obj62 = queueAr56.dequeue();
        queueAr56.makeEmpty();
        queueAr56.dequeueAll();
        queueAr56.makeEmpty();
        boolean boolean66 = queueAr56.isEmpty();
        boolean boolean67 = queueAr56.isFull();
        DataStructures.QueueAr queueAr69 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr69.dequeueAll();
        boolean boolean71 = queueAr69.isEmpty();
        queueAr69.dequeueAll();
        boolean boolean73 = queueAr69.isEmpty();
        boolean boolean74 = queueAr69.isFull();
        boolean boolean75 = queueAr69.isFull();
        boolean boolean76 = queueAr69.isFull();
        queueAr69.makeEmpty();
        DataStructures.QueueAr queueAr79 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr79.dequeueAll();
        java.lang.Object obj81 = queueAr79.getFront();
        java.lang.Object obj82 = queueAr79.getFront();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow83.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray90 = overflow89.getSuppressed();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow91);
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        queueAr79.enqueue((java.lang.Object) overflow83);
        queueAr69.enqueue((java.lang.Object) overflow83);
        queueAr56.enqueue((java.lang.Object) queueAr69);
        java.lang.Object obj97 = queueAr56.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj97);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray36 = overflow2.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean49 = queueAr48.isEmpty();
        java.lang.Object obj50 = queueAr48.dequeue();
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        java.lang.Object obj54 = queueAr52.getFront();
        queueAr52.makeEmpty();
        boolean boolean56 = queueAr52.isFull();
        queueAr48.enqueue((java.lang.Object) queueAr52);
        java.lang.Object obj58 = queueAr48.dequeue();
        boolean boolean59 = queueAr48.isEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow76);
        queueAr48.enqueue((java.lang.Object) overflow65);
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow2.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.String str81 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Overflow" + "'", str81, "DataStructures.Overflow");
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        queueAr9.makeEmpty();
        java.lang.Object obj26 = queueAr9.getFront();
        java.lang.Object obj27 = queueAr9.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        boolean boolean15 = queueAr10.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj18 = queueAr17.getFront();
        queueAr17.dequeueAll();
        java.lang.Object obj20 = queueAr17.dequeue();
        queueAr10.enqueue(obj20);
        queueAr10.makeEmpty();
        boolean boolean23 = queueAr10.isEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        queueAr25.dequeueAll();
        java.lang.Object obj39 = queueAr25.getFront();
        queueAr10.enqueue((java.lang.Object) queueAr25);
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean43 = queueAr42.isEmpty();
        java.lang.Object obj44 = queueAr42.dequeue();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        boolean boolean50 = queueAr46.isFull();
        queueAr42.enqueue((java.lang.Object) queueAr46);
        java.lang.Object obj52 = queueAr42.dequeue();
        queueAr25.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj54 = queueAr25.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr25);
        java.lang.Object obj56 = queueAr25.dequeue();
        java.lang.Object obj57 = null;
        queueAr25.enqueue(obj57);
        boolean boolean59 = queueAr25.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 8 + "'", obj8, 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow34.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow34.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray85 = overflow79.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow79);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray88 = overflow20.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Class<?> wildcardClass90 = overflow4.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        queueAr26.makeEmpty();
        queueAr26.dequeueAll();
        queueAr26.dequeueAll();
        java.lang.Object obj33 = queueAr26.dequeue();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        java.lang.Object obj37 = queueAr35.getFront();
        queueAr35.makeEmpty();
        boolean boolean39 = queueAr35.isFull();
        java.lang.Object obj40 = queueAr35.dequeue();
        queueAr26.enqueue((java.lang.Object) queueAr35);
        queueAr26.dequeueAll();
        queueAr17.enqueue((java.lang.Object) queueAr26);
        boolean boolean44 = queueAr17.isFull();
        java.lang.Object obj45 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        overflow2.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow79.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow90.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow90);
        overflow2.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.String str98 = overflow85.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "DataStructures.Overflow" + "'", str98, "DataStructures.Overflow");
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Object obj13 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        queueAr15.makeEmpty();
        boolean boolean20 = queueAr15.isFull();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj23 = queueAr22.getFront();
        queueAr22.dequeueAll();
        java.lang.Object obj25 = queueAr22.dequeue();
        queueAr15.enqueue(obj25);
        queueAr15.makeEmpty();
        boolean boolean28 = queueAr15.isEmpty();
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr30.dequeueAll();
        boolean boolean32 = queueAr30.isEmpty();
        queueAr30.dequeueAll();
        queueAr30.makeEmpty();
        boolean boolean35 = queueAr30.isFull();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj38 = queueAr37.getFront();
        queueAr37.dequeueAll();
        java.lang.Object obj40 = queueAr37.dequeue();
        queueAr30.enqueue(obj40);
        queueAr30.makeEmpty();
        queueAr30.dequeueAll();
        java.lang.Object obj44 = queueAr30.getFront();
        queueAr15.enqueue((java.lang.Object) queueAr30);
        queueAr1.enqueue((java.lang.Object) queueAr30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.getFront();
        boolean boolean10 = queueAr6.isFull();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow37);
        overflow15.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray44 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow25.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) throwableArray46);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        overflow41.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray59 = overflow48.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow65);
        overflow35.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray72 = overflow65.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray74 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow21.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow21);
        overflow2.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray78 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass79 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean17 = queueAr16.isEmpty();
        java.lang.Object obj18 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        java.lang.Object obj22 = queueAr20.getFront();
        queueAr20.makeEmpty();
        boolean boolean24 = queueAr20.isFull();
        queueAr16.enqueue((java.lang.Object) queueAr20);
        java.lang.Object obj26 = queueAr16.dequeue();
        queueAr13.enqueue((java.lang.Object) queueAr16);
        queueAr13.makeEmpty();
        queueAr11.enqueue((java.lang.Object) queueAr13);
        boolean boolean30 = queueAr13.isFull();
        boolean boolean31 = queueAr13.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        boolean boolean33 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr(6);
        queueAr35.makeEmpty();
        java.lang.Object obj37 = queueAr35.getFront();
        queueAr35.makeEmpty();
        java.lang.Object obj39 = queueAr35.dequeue();
        boolean boolean40 = queueAr35.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean40);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        boolean boolean11 = queueAr8.isEmpty();
        java.lang.Object obj12 = queueAr8.getFront();
        boolean boolean13 = queueAr8.isFull();
        java.lang.Object obj14 = queueAr8.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.enqueue((java.lang.Object) (-2));
        boolean boolean19 = queueAr16.isFull();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isEmpty();
        java.lang.Object obj22 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        boolean boolean26 = queueAr24.isEmpty();
        queueAr24.dequeueAll();
        queueAr24.makeEmpty();
        boolean boolean29 = queueAr24.isFull();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj32 = queueAr31.getFront();
        queueAr31.dequeueAll();
        java.lang.Object obj34 = queueAr31.dequeue();
        queueAr24.enqueue(obj34);
        queueAr24.makeEmpty();
        queueAr24.dequeueAll();
        queueAr16.enqueue((java.lang.Object) queueAr24);
        queueAr24.dequeueAll();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj41 = queueAr8.dequeue();
        queueAr1.enqueue(obj41);
        boolean boolean43 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        java.lang.Object obj17 = queueAr14.getFront();
        queueAr14.makeEmpty();
        queueAr14.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Class<?> wildcardClass21 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        java.lang.Class<?> wildcardClass74 = queueAr13.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        boolean boolean27 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean31 = queueAr30.isEmpty();
        java.lang.Object obj32 = queueAr30.getFront();
        java.lang.Object obj33 = queueAr30.dequeue();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        java.lang.Object obj37 = queueAr35.getFront();
        java.lang.Object obj38 = queueAr35.getFront();
        boolean boolean39 = queueAr35.isFull();
        queueAr35.dequeueAll();
        queueAr30.enqueue((java.lang.Object) queueAr35);
        queueAr30.dequeueAll();
        java.lang.Object obj43 = queueAr30.dequeue();
        queueAr1.enqueue(obj43);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow16.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray46 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow16);
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr49.dequeueAll();
        boolean boolean51 = queueAr49.isEmpty();
        queueAr49.dequeueAll();
        queueAr49.makeEmpty();
        boolean boolean54 = queueAr49.isFull();
        DataStructures.QueueAr queueAr56 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj57 = queueAr56.getFront();
        queueAr56.dequeueAll();
        java.lang.Object obj59 = queueAr56.dequeue();
        queueAr49.enqueue(obj59);
        java.lang.Object obj61 = queueAr49.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj61);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean26 = queueAr1.isFull();
        java.lang.Object obj27 = queueAr1.dequeue();
        java.lang.Object obj28 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        queueAr8.enqueue((java.lang.Object) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow13);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean21 = queueAr1.isFull();
        boolean boolean22 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        overflow31.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray65 = overflow6.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj32 = queueAr17.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        java.lang.Object obj36 = queueAr34.getFront();
        java.lang.Object obj37 = queueAr34.getFront();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow38.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        queueAr34.enqueue((java.lang.Object) overflow38);
        java.lang.Object obj50 = queueAr34.getFront();
        java.lang.Object obj51 = queueAr34.dequeue();
        boolean boolean52 = queueAr34.isEmpty();
        java.lang.Object obj53 = queueAr34.dequeue();
        queueAr17.enqueue((java.lang.Object) queueAr34);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow61.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray78 = overflow73.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow73);
        overflow55.addSuppressed((java.lang.Throwable) overflow73);
        queueAr34.enqueue((java.lang.Object) overflow55);
        java.lang.Class<?> wildcardClass82 = overflow55.getClass();
        queueAr1.enqueue((java.lang.Object) overflow55);
        boolean boolean84 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        overflow41.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray59 = overflow48.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow65);
        overflow35.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray72 = overflow65.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray74 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow21.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow21);
        overflow2.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.String str78 = overflow21.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Overflow" + "'", str78, "DataStructures.Overflow");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isFull();
        queueAr10.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr12.dequeueAll();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray27);
        queueAr1.enqueue((java.lang.Object) throwableArray27);
        java.lang.Object obj30 = queueAr1.dequeue();
        boolean boolean31 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        boolean boolean18 = queueAr12.isEmpty();
        java.lang.Object obj19 = queueAr12.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        queueAr12.makeEmpty();
        java.lang.Object obj22 = queueAr12.dequeue();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        java.lang.Object obj41 = queueAr39.getFront();
        queueAr39.makeEmpty();
        queueAr39.dequeueAll();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray72 = overflow68.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow68);
        overflow46.addSuppressed((java.lang.Throwable) overflow56);
        queueAr39.enqueue((java.lang.Object) overflow46);
        overflow29.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray77 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow29.getSuppressed();
        queueAr12.enqueue((java.lang.Object) overflow29);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow27.addSuppressed((java.lang.Throwable) overflow39);
        overflow2.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.String str50 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DataStructures.Overflow" + "'", str50, "DataStructures.Overflow");
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        java.lang.Object obj17 = queueAr14.getFront();
        queueAr14.makeEmpty();
        queueAr14.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr1.makeEmpty();
        boolean boolean22 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.String str96 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray68 = overflow14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean24 = queueAr1.isEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.enqueue((java.lang.Object) (-4L));
        boolean boolean33 = queueAr27.isFull();
        queueAr27.dequeueAll();
        boolean boolean35 = queueAr27.isEmpty();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.enqueue((java.lang.Object) (-2));
        boolean boolean40 = queueAr37.isFull();
        java.lang.Class<?> wildcardClass41 = queueAr37.getClass();
        queueAr27.enqueue((java.lang.Object) wildcardClass41);
        java.lang.Class<?> wildcardClass43 = queueAr27.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass43);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isFull();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        java.lang.Object obj49 = queueAr9.getFront();
        DataStructures.QueueAr queueAr51 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr51.dequeueAll();
        boolean boolean53 = queueAr51.isEmpty();
        queueAr51.dequeueAll();
        boolean boolean55 = queueAr51.isEmpty();
        boolean boolean56 = queueAr51.isFull();
        boolean boolean57 = queueAr51.isFull();
        queueAr51.dequeueAll();
        java.lang.Object obj59 = queueAr51.getFront();
        boolean boolean60 = queueAr51.isFull();
        DataStructures.QueueAr queueAr62 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr62.dequeueAll();
        java.lang.Object obj64 = queueAr62.getFront();
        queueAr62.makeEmpty();
        boolean boolean66 = queueAr62.isFull();
        boolean boolean67 = queueAr62.isEmpty();
        queueAr62.dequeueAll();
        boolean boolean69 = queueAr62.isEmpty();
        queueAr51.enqueue((java.lang.Object) boolean69);
        queueAr9.enqueue((java.lang.Object) boolean69);
        java.lang.Object obj72 = queueAr9.getFront();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + true + "'", obj72, true);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        java.lang.Object obj20 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        queueAr22.makeEmpty();
        boolean boolean25 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr22);
        java.lang.Object obj28 = queueAr22.dequeue();
        queueAr22.makeEmpty();
        queueAr22.makeEmpty();
        java.lang.Class<?> wildcardClass31 = queueAr22.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        boolean boolean32 = queueAr16.isEmpty();
        boolean boolean33 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        java.lang.Object obj25 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj27 = queueAr9.getFront();
        java.lang.Object obj28 = queueAr9.getFront();
        queueAr9.makeEmpty();
        java.lang.Object obj30 = queueAr9.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow7.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow42.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow42);
        overflow0.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = overflow42.getSuppressed();
        java.lang.String str51 = overflow42.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DataStructures.Overflow" + "'", str51, "DataStructures.Overflow");
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray41 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow30.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow30.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray55 = overflow30.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Class<?> wildcardClass57 = overflow30.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) ' ');
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj21 = queueAr20.getFront();
        queueAr20.dequeueAll();
        java.lang.Object obj23 = queueAr20.dequeue();
        boolean boolean24 = queueAr20.isFull();
        boolean boolean25 = queueAr20.isFull();
        queueAr18.enqueue((java.lang.Object) boolean25);
        queueAr18.dequeueAll();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        boolean boolean33 = queueAr29.isEmpty();
        java.lang.Object obj34 = queueAr29.getFront();
        boolean boolean35 = queueAr29.isFull();
        queueAr18.enqueue((java.lang.Object) boolean35);
        queueAr1.enqueue((java.lang.Object) boolean35);
        java.lang.Class<?> wildcardClass38 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        java.lang.Object obj74 = queueAr13.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr24.getFront();
        java.lang.Object obj34 = queueAr24.dequeue();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr36.enqueue((java.lang.Object) (-2));
        boolean boolean39 = queueAr36.isFull();
        queueAr36.makeEmpty();
        boolean boolean41 = queueAr36.isEmpty();
        java.lang.Object obj42 = queueAr36.getFront();
        queueAr36.dequeueAll();
        queueAr24.enqueue((java.lang.Object) queueAr36);
        java.lang.Object obj45 = queueAr24.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.dequeue();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        java.lang.Object obj25 = queueAr17.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean28 = queueAr27.isEmpty();
        java.lang.Object obj29 = queueAr27.dequeue();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        java.lang.Object obj33 = queueAr31.getFront();
        queueAr31.makeEmpty();
        boolean boolean35 = queueAr31.isFull();
        queueAr27.enqueue((java.lang.Object) queueAr31);
        java.lang.Object obj37 = queueAr27.dequeue();
        boolean boolean38 = queueAr27.isEmpty();
        java.lang.Object obj39 = queueAr27.dequeue();
        queueAr17.enqueue((java.lang.Object) queueAr27);
        boolean boolean41 = queueAr27.isFull();
        java.lang.Object obj42 = queueAr27.dequeue();
        java.lang.Object obj43 = queueAr27.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow32.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        overflow32.addSuppressed((java.lang.Throwable) overflow52);
        overflow24.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray64 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow24.getSuppressed();
        java.lang.String str66 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DataStructures.Overflow" + "'", str66, "DataStructures.Overflow");
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 100);
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray34 = overflow28.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.QueueAr queueAr51 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr51.dequeueAll();
        java.lang.Object obj53 = queueAr51.getFront();
        queueAr51.makeEmpty();
        queueAr51.dequeueAll();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow80);
        overflow58.addSuppressed((java.lang.Throwable) overflow68);
        queueAr51.enqueue((java.lang.Object) overflow58);
        overflow41.addSuppressed((java.lang.Throwable) overflow58);
        overflow28.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray90 = overflow41.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow41);
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow41.addSuppressed(throwable92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 100 + "'", obj12, 100);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray41 = overflow30.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        overflow55.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow55.addSuppressed((java.lang.Throwable) overflow75);
        overflow47.addSuppressed((java.lang.Throwable) overflow75);
        overflow20.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray88 = overflow47.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow47);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        queueAr7.enqueue((java.lang.Object) queueAr11);
        queueAr1.enqueue((java.lang.Object) queueAr7);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean20 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(3);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj12 = queueAr1.getFront();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj32 = queueAr16.getFront();
        boolean boolean33 = queueAr16.isFull();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.enqueue((java.lang.Object) (-2));
        boolean boolean38 = queueAr35.isFull();
        queueAr35.makeEmpty();
        boolean boolean40 = queueAr35.isEmpty();
        java.lang.Object obj41 = queueAr35.dequeue();
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr43.dequeueAll();
        boolean boolean45 = queueAr43.isEmpty();
        queueAr43.dequeueAll();
        queueAr43.makeEmpty();
        boolean boolean48 = queueAr43.isFull();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj51 = queueAr50.getFront();
        queueAr50.dequeueAll();
        java.lang.Object obj53 = queueAr50.dequeue();
        queueAr43.enqueue(obj53);
        queueAr43.makeEmpty();
        queueAr43.dequeueAll();
        queueAr35.enqueue((java.lang.Object) queueAr43);
        queueAr35.makeEmpty();
        DataStructures.QueueAr queueAr60 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean61 = queueAr60.isEmpty();
        java.lang.Object obj62 = queueAr60.getFront();
        java.lang.Object obj63 = queueAr60.dequeue();
        DataStructures.QueueAr queueAr65 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr65.dequeueAll();
        java.lang.Object obj67 = queueAr65.getFront();
        java.lang.Object obj68 = queueAr65.getFront();
        boolean boolean69 = queueAr65.isFull();
        queueAr65.dequeueAll();
        queueAr60.enqueue((java.lang.Object) queueAr65);
        queueAr35.enqueue((java.lang.Object) queueAr65);
        queueAr16.enqueue((java.lang.Object) queueAr35);
        boolean boolean74 = queueAr35.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(3);
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass3 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        queueAr8.enqueue((java.lang.Object) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow13);
        queueAr1.dequeueAll();
        boolean boolean37 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray44 = overflow29.getSuppressed();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        queueAr46.enqueue((java.lang.Object) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray73 = overflow51.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow74.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow74);
        overflow29.addSuppressed((java.lang.Throwable) overflow51);
        overflow9.addSuppressed((java.lang.Throwable) overflow29);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray84 = overflow4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow73.addSuppressed((java.lang.Throwable) overflow79);
        overflow40.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray86 = overflow73.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean40 = queueAr9.isFull();
        java.lang.Class<?> wildcardClass41 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = null;
        queueAr1.enqueue(obj10);
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass6 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        java.lang.Object obj34 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "DataStructures.Overflow");
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        queueAr9.makeEmpty();
        java.lang.Object obj26 = queueAr9.getFront();
        boolean boolean27 = queueAr9.isFull();
        queueAr9.dequeueAll();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray89 = overflow87.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow87);
        overflow74.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray92 = overflow81.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Class<?> wildcardClass94 = overflow81.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.String str36 = overflow29.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        java.lang.Object obj24 = queueAr21.getFront();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        queueAr21.enqueue((java.lang.Object) overflow25);
        java.lang.Object obj37 = queueAr21.getFront();
        java.lang.Object obj38 = queueAr21.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj40 = queueAr1.getFront();
        java.lang.Object obj41 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean43 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean26 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj14 = queueAr7.getFront();
        boolean boolean15 = queueAr7.isFull();
        java.lang.Class<?> wildcardClass16 = queueAr7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow74.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow74.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray85 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow74.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.String str88 = overflow74.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DataStructures.Overflow" + "'", str88, "DataStructures.Overflow");
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray30 = overflow23.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow44.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow55.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray70 = overflow55.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray80 = overflow71.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        java.lang.Throwable[] throwableArray89 = overflow86.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray91 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow82.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow82);
        overflow44.addSuppressed((java.lang.Throwable) overflow82);
        overflow23.addSuppressed((java.lang.Throwable) overflow44);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        overflow31.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.String str65 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DataStructures.Overflow" + "'", str65, "DataStructures.Overflow");
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        boolean boolean20 = queueAr18.isEmpty();
        queueAr18.dequeueAll();
        queueAr18.makeEmpty();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        queueAr18.enqueue((java.lang.Object) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow63.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray86 = overflow63.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray88 = overflow23.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray90 = overflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow12.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow34.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow40.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray57 = overflow52.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow52);
        overflow34.addSuppressed((java.lang.Throwable) overflow52);
        overflow12.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Class<?> wildcardClass61 = overflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        boolean boolean32 = queueAr1.isEmpty();
        java.lang.Object obj33 = queueAr1.getFront();
        boolean boolean34 = queueAr1.isFull();
        boolean boolean35 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        boolean boolean34 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) '#');
        queueAr5.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean9 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        boolean boolean41 = queueAr39.isEmpty();
        queueAr39.dequeueAll();
        boolean boolean43 = queueAr39.isEmpty();
        boolean boolean44 = queueAr39.isFull();
        boolean boolean45 = queueAr39.isFull();
        boolean boolean46 = queueAr39.isFull();
        queueAr39.makeEmpty();
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr49.dequeueAll();
        java.lang.Object obj51 = queueAr49.getFront();
        java.lang.Object obj52 = queueAr49.getFront();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow53.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        queueAr49.enqueue((java.lang.Object) overflow53);
        queueAr39.enqueue((java.lang.Object) overflow53);
        overflow8.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray67 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow8.getSuppressed();
        java.lang.String str69 = overflow8.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DataStructures.Overflow" + "'", str69, "DataStructures.Overflow");
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        java.lang.Object obj17 = queueAr12.dequeue();
        queueAr12.makeEmpty();
        java.lang.Object obj19 = queueAr12.dequeue();
        boolean boolean20 = queueAr12.isEmpty();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow25.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray47 = overflow40.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray47);
        queueAr1.enqueue((java.lang.Object) queueAr12);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        java.lang.Throwable[] throwableArray10 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        overflow14.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow43.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.QueueAr queueAr58 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr58.dequeueAll();
        boolean boolean60 = queueAr58.isEmpty();
        queueAr58.dequeueAll();
        queueAr58.makeEmpty();
        boolean boolean63 = queueAr58.isFull();
        DataStructures.QueueAr queueAr65 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj66 = queueAr65.getFront();
        queueAr65.dequeueAll();
        java.lang.Object obj68 = queueAr65.dequeue();
        queueAr58.enqueue(obj68);
        queueAr58.makeEmpty();
        queueAr58.dequeueAll();
        java.lang.Object obj72 = queueAr58.dequeue();
        boolean boolean73 = queueAr58.isEmpty();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow76.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        overflow76.addSuppressed((java.lang.Throwable) overflow84);
        queueAr58.enqueue((java.lang.Object) overflow84);
        overflow14.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray92 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow14.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        boolean boolean41 = queueAr39.isEmpty();
        queueAr39.dequeueAll();
        queueAr39.makeEmpty();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        queueAr39.enqueue((java.lang.Object) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow68);
        overflow26.addSuppressed((java.lang.Throwable) overflow68);
        overflow0.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.String str74 = overflow26.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DataStructures.Overflow" + "'", str74, "DataStructures.Overflow");
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow7.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray44 = overflow33.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        overflow19.addSuppressed((java.lang.Throwable) overflow50);
        queueAr6.enqueue((java.lang.Object) overflow19);
        queueAr1.enqueue((java.lang.Object) overflow19);
        java.lang.Throwable[] throwableArray76 = overflow19.getSuppressed();
        java.lang.String str77 = overflow19.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "DataStructures.Overflow" + "'", str77, "DataStructures.Overflow");
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        boolean boolean17 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj19 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        boolean boolean19 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        queueAr14.makeEmpty();
        boolean boolean19 = queueAr14.isEmpty();
        java.lang.Object obj20 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        boolean boolean24 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        queueAr22.makeEmpty();
        boolean boolean27 = queueAr22.isFull();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj30 = queueAr29.getFront();
        queueAr29.dequeueAll();
        java.lang.Object obj32 = queueAr29.dequeue();
        queueAr22.enqueue(obj32);
        queueAr22.makeEmpty();
        queueAr22.dequeueAll();
        queueAr14.enqueue((java.lang.Object) queueAr22);
        java.lang.Object obj37 = queueAr22.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        queueAr16.enqueue((java.lang.Object) 8);
        java.lang.Object obj23 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        boolean boolean38 = queueAr25.isEmpty();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        boolean boolean42 = queueAr40.isEmpty();
        queueAr40.dequeueAll();
        queueAr40.makeEmpty();
        boolean boolean45 = queueAr40.isFull();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj48 = queueAr47.getFront();
        queueAr47.dequeueAll();
        java.lang.Object obj50 = queueAr47.dequeue();
        queueAr40.enqueue(obj50);
        queueAr40.makeEmpty();
        queueAr40.dequeueAll();
        java.lang.Object obj54 = queueAr40.getFront();
        queueAr25.enqueue((java.lang.Object) queueAr40);
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean58 = queueAr57.isEmpty();
        java.lang.Object obj59 = queueAr57.dequeue();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr61.dequeueAll();
        java.lang.Object obj63 = queueAr61.getFront();
        queueAr61.makeEmpty();
        boolean boolean65 = queueAr61.isFull();
        queueAr57.enqueue((java.lang.Object) queueAr61);
        java.lang.Object obj67 = queueAr57.dequeue();
        queueAr40.enqueue((java.lang.Object) queueAr57);
        java.lang.Object obj69 = queueAr40.getFront();
        queueAr16.enqueue((java.lang.Object) queueAr40);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj72 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + 8 + "'", obj23, 8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(obj72);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean17 = queueAr16.isEmpty();
        java.lang.Object obj18 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        java.lang.Object obj22 = queueAr20.getFront();
        queueAr20.makeEmpty();
        boolean boolean24 = queueAr20.isFull();
        queueAr16.enqueue((java.lang.Object) queueAr20);
        java.lang.Object obj26 = queueAr16.dequeue();
        queueAr13.enqueue((java.lang.Object) queueAr16);
        queueAr13.makeEmpty();
        queueAr11.enqueue((java.lang.Object) queueAr13);
        boolean boolean30 = queueAr13.isFull();
        boolean boolean31 = queueAr13.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.enqueue((java.lang.Object) (-2));
        boolean boolean37 = queueAr34.isFull();
        queueAr34.makeEmpty();
        boolean boolean39 = queueAr34.isEmpty();
        java.lang.Object obj40 = queueAr34.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        boolean boolean44 = queueAr42.isEmpty();
        queueAr42.dequeueAll();
        queueAr42.makeEmpty();
        boolean boolean47 = queueAr42.isFull();
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj50 = queueAr49.getFront();
        queueAr49.dequeueAll();
        java.lang.Object obj52 = queueAr49.dequeue();
        queueAr42.enqueue(obj52);
        queueAr42.makeEmpty();
        queueAr42.dequeueAll();
        queueAr34.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj57 = queueAr42.dequeue();
        DataStructures.QueueAr queueAr59 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr59.dequeueAll();
        java.lang.Object obj61 = queueAr59.getFront();
        java.lang.Object obj62 = queueAr59.getFront();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow69);
        queueAr59.enqueue((java.lang.Object) overflow63);
        java.lang.Object obj75 = queueAr59.getFront();
        java.lang.Object obj76 = queueAr59.dequeue();
        boolean boolean77 = queueAr59.isEmpty();
        java.lang.Object obj78 = queueAr59.dequeue();
        queueAr42.enqueue((java.lang.Object) queueAr59);
        queueAr42.dequeueAll();
        boolean boolean81 = queueAr42.isEmpty();
        boolean boolean82 = queueAr42.isEmpty();
        DataStructures.QueueAr queueAr84 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr84.dequeueAll();
        java.lang.Object obj86 = queueAr84.getFront();
        java.lang.Object obj87 = queueAr84.getFront();
        queueAr84.makeEmpty();
        java.lang.Class<?> wildcardClass89 = queueAr84.getClass();
        queueAr42.enqueue((java.lang.Object) wildcardClass89);
        queueAr13.enqueue((java.lang.Object) queueAr42);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow21.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr30.dequeueAll();
        boolean boolean32 = queueAr30.isEmpty();
        queueAr30.dequeueAll();
        queueAr30.makeEmpty();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        queueAr30.enqueue((java.lang.Object) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow51);
        overflow18.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Class<?> wildcardClass58 = overflow51.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        java.lang.Object obj19 = queueAr1.getFront();
        boolean boolean20 = queueAr1.isFull();
        boolean boolean21 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray48 = overflow2.getSuppressed();
        java.lang.String str49 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DataStructures.Overflow" + "'", str49, "DataStructures.Overflow");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr24.getFront();
        java.lang.Object obj34 = queueAr24.dequeue();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr36.enqueue((java.lang.Object) (-2));
        boolean boolean39 = queueAr36.isFull();
        queueAr36.makeEmpty();
        boolean boolean41 = queueAr36.isEmpty();
        java.lang.Object obj42 = queueAr36.getFront();
        queueAr36.dequeueAll();
        queueAr24.enqueue((java.lang.Object) queueAr36);
        queueAr36.makeEmpty();
        java.lang.Object obj46 = queueAr36.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj41 = queueAr27.dequeue();
        boolean boolean42 = queueAr27.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        java.lang.Object obj44 = queueAr9.dequeue();
        java.lang.Object obj45 = queueAr9.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr9.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        boolean boolean70 = queueAr1.isFull();
        boolean boolean71 = queueAr1.isFull();
        boolean boolean72 = queueAr1.isEmpty();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj16 = queueAr7.getFront();
        java.lang.Object obj17 = queueAr7.dequeue();
        boolean boolean18 = queueAr7.isFull();
        queueAr7.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        java.lang.Object obj62 = queueAr1.dequeue();
        java.lang.Object obj63 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        java.lang.Object obj26 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        overflow6.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray62 = overflow24.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow65.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow73.addSuppressed((java.lang.Throwable) overflow81);
        overflow24.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.String str85 = overflow81.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DataStructures.Overflow" + "'", str85, "DataStructures.Overflow");
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        boolean boolean15 = queueAr13.isEmpty();
        queueAr13.dequeueAll();
        boolean boolean17 = queueAr13.isEmpty();
        boolean boolean18 = queueAr13.isFull();
        boolean boolean19 = queueAr13.isFull();
        queueAr13.dequeueAll();
        java.lang.Object obj21 = queueAr13.getFront();
        boolean boolean22 = queueAr13.isFull();
        boolean boolean23 = queueAr13.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        boolean boolean72 = queueAr13.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.dequeue();
        java.lang.Object obj10 = queueAr6.getFront();
        queueAr6.dequeueAll();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        boolean boolean20 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean22 = queueAr15.isEmpty();
        queueAr15.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow32.getSuppressed();
        java.lang.Class<?> wildcardClass40 = overflow32.getClass();
        queueAr15.enqueue((java.lang.Object) overflow32);
        java.lang.Object obj42 = queueAr15.getFront();
        queueAr15.dequeueAll();
        queueAr15.dequeueAll();
        boolean boolean45 = queueAr15.isEmpty();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr15.enqueue((java.lang.Object) queueAr47);
        boolean boolean49 = queueAr15.isFull();
        java.lang.Object obj50 = queueAr15.getFront();
        queueAr6.enqueue(obj50);
        java.lang.Object obj52 = queueAr6.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(obj52);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.getFront();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        boolean boolean17 = queueAr12.isFull();
        queueAr12.enqueue((java.lang.Object) (-4L));
        boolean boolean20 = queueAr12.isFull();
        queueAr12.makeEmpty();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        boolean boolean27 = queueAr23.isFull();
        queueAr23.dequeueAll();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray38 = overflow31.getSuppressed();
        queueAr23.enqueue((java.lang.Object) throwableArray38);
        queueAr12.enqueue((java.lang.Object) throwableArray38);
        queueAr1.enqueue((java.lang.Object) throwableArray38);
        java.lang.Object obj42 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass43 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        queueAr17.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean34 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        java.lang.Object obj23 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = obj7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr20.makeEmpty();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        queueAr20.enqueue((java.lang.Object) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow49);
        overflow7.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow49.getSuppressed();
        java.lang.Class<?> wildcardClass55 = throwableArray54.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj32 = queueAr17.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        java.lang.Object obj36 = queueAr34.getFront();
        java.lang.Object obj37 = queueAr34.getFront();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow38.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        queueAr34.enqueue((java.lang.Object) overflow38);
        java.lang.Object obj50 = queueAr34.getFront();
        java.lang.Object obj51 = queueAr34.dequeue();
        boolean boolean52 = queueAr34.isEmpty();
        java.lang.Object obj53 = queueAr34.dequeue();
        queueAr17.enqueue((java.lang.Object) queueAr34);
        queueAr17.dequeueAll();
        boolean boolean56 = queueAr17.isFull();
        queueAr17.dequeueAll();
        java.lang.Object obj58 = queueAr17.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow46.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray69 = overflow46.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray71 = overflow46.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj27 = queueAr9.getFront();
        java.lang.Object obj28 = null;
        queueAr9.enqueue(obj28);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = obj11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow21);
        overflow5.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow47.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow47);
        overflow5.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow5.addSuppressed((java.lang.Throwable) overflow68);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        java.lang.Object obj26 = queueAr17.dequeue();
        queueAr17.makeEmpty();
        boolean boolean28 = queueAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass25 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj30 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow0.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray43 = overflow25.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow25.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray54 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow25.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow58);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        boolean boolean31 = queueAr27.isEmpty();
        java.lang.Object obj32 = queueAr27.getFront();
        java.lang.Object obj33 = queueAr27.dequeue();
        queueAr27.makeEmpty();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) ' ');
        queueAr27.enqueue((java.lang.Object) queueAr36);
        boolean boolean38 = queueAr36.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr36);
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr5.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr57.dequeueAll();
        boolean boolean59 = queueAr57.isEmpty();
        queueAr57.dequeueAll();
        queueAr57.makeEmpty();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        queueAr57.enqueue((java.lang.Object) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray90 = overflow86.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray92 = overflow86.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.dequeueAll();
        boolean boolean19 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        queueAr14.enqueue((java.lang.Object) overflow23);
        java.lang.Throwable[] throwableArray31 = overflow23.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow23);
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow11.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.makeEmpty();
        boolean boolean49 = queueAr1.isFull();
        java.lang.Object obj50 = queueAr1.getFront();
        boolean boolean51 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        boolean boolean22 = queueAr11.isEmpty();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow39);
        queueAr11.enqueue((java.lang.Object) overflow28);
        overflow5.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow45.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow74.addSuppressed((java.lang.Throwable) overflow89);
        overflow28.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray94 = overflow74.getSuppressed();
        java.lang.String str95 = overflow74.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "DataStructures.Overflow" + "'", str95, "DataStructures.Overflow");
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.enqueue((java.lang.Object) (-2));
        boolean boolean13 = queueAr10.isFull();
        queueAr10.makeEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.dequeue();
        java.lang.Class<?> wildcardClass19 = queueAr10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        queueAr17.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj34 = queueAr1.dequeue();
        boolean boolean35 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean37 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = obj4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isFull();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr20.makeEmpty();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        queueAr20.enqueue((java.lang.Object) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray55 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj19 = null;
        queueAr1.enqueue(obj19);
        java.lang.Object obj21 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow6.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray24 = overflow13.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray36 = overflow30.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow30);
        java.lang.Throwable[] throwableArray38 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow30.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow42.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray65 = overflow60.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        overflow68.addSuppressed((java.lang.Throwable) overflow76);
        overflow60.addSuppressed((java.lang.Throwable) overflow68);
        overflow30.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray84 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow68.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        boolean boolean19 = queueAr14.isFull();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj22 = queueAr21.getFront();
        queueAr21.dequeueAll();
        java.lang.Object obj24 = queueAr21.dequeue();
        queueAr14.enqueue(obj24);
        queueAr14.makeEmpty();
        queueAr14.makeEmpty();
        boolean boolean28 = queueAr14.isFull();
        java.lang.Object obj29 = queueAr14.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr1.dequeueAll();
        java.lang.Object obj32 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray95 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray96 = overflow24.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow79);
        overflow43.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.String str85 = overflow79.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DataStructures.Overflow" + "'", str85, "DataStructures.Overflow");
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = obj7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        queueAr1.dequeueAll();
        boolean boolean23 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        java.lang.Object obj30 = queueAr25.dequeue();
        queueAr25.enqueue((java.lang.Object) (-5));
        java.lang.Object obj33 = queueAr25.getFront();
        boolean boolean34 = queueAr25.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr25);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + (-5) + "'", obj33, (-5));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow15.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow15.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow31.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray51 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow42.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow42);
        overflow4.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.String str55 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow56);
        overflow34.addSuppressed((java.lang.Throwable) overflow44);
        queueAr27.enqueue((java.lang.Object) overflow34);
        overflow17.addSuppressed((java.lang.Throwable) overflow34);
        overflow5.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.String str66 = overflow17.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DataStructures.Overflow" + "'", str66, "DataStructures.Overflow");
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        boolean boolean25 = queueAr19.isEmpty();
        queueAr19.enqueue((java.lang.Object) (-10.5d));
        queueAr11.enqueue((java.lang.Object) queueAr19);
        queueAr11.makeEmpty();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        java.lang.Object obj33 = queueAr31.getFront();
        java.lang.Object obj34 = queueAr31.getFront();
        boolean boolean35 = queueAr31.isEmpty();
        boolean boolean36 = queueAr31.isFull();
        queueAr31.dequeueAll();
        java.lang.Object obj38 = queueAr31.dequeue();
        queueAr31.dequeueAll();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        java.lang.Object obj43 = queueAr41.dequeue();
        DataStructures.QueueAr queueAr45 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr45.dequeueAll();
        java.lang.Object obj47 = queueAr45.getFront();
        queueAr45.makeEmpty();
        boolean boolean49 = queueAr45.isFull();
        queueAr41.enqueue((java.lang.Object) queueAr45);
        java.lang.Object obj51 = queueAr41.dequeue();
        queueAr31.enqueue((java.lang.Object) queueAr41);
        queueAr11.enqueue((java.lang.Object) queueAr31);
        queueAr31.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj51);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow2.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow23.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray55 = overflow23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow67.addSuppressed((java.lang.Throwable) overflow81);
        overflow2.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Class<?> wildcardClass91 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Class<?> wildcardClass68 = overflow14.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        boolean boolean23 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean25 = queueAr1.isFull();
        boolean boolean26 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        boolean boolean17 = queueAr12.isFull();
        boolean boolean18 = queueAr12.isFull();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        java.lang.Object obj21 = queueAr12.getFront();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean24 = queueAr23.isEmpty();
        java.lang.Object obj25 = queueAr23.dequeue();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        boolean boolean31 = queueAr27.isFull();
        queueAr23.enqueue((java.lang.Object) queueAr27);
        java.lang.Object obj33 = queueAr23.getFront();
        java.lang.Object obj34 = queueAr23.getFront();
        queueAr12.enqueue((java.lang.Object) queueAr23);
        queueAr1.enqueue((java.lang.Object) queueAr23);
        queueAr23.dequeueAll();
        queueAr23.dequeueAll();
        boolean boolean39 = queueAr23.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        boolean boolean26 = queueAr1.isFull();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        java.lang.Object obj31 = queueAr28.getFront();
        boolean boolean32 = queueAr28.isEmpty();
        boolean boolean33 = queueAr28.isFull();
        queueAr28.dequeueAll();
        java.lang.Object obj35 = queueAr28.dequeue();
        boolean boolean36 = queueAr28.isEmpty();
        java.lang.Object obj37 = queueAr28.getFront();
        queueAr1.enqueue(obj37);
        java.lang.Object obj39 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean21 = queueAr1.isEmpty();
        java.lang.Object obj22 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        boolean boolean10 = queueAr6.isEmpty();
        boolean boolean11 = queueAr6.isFull();
        boolean boolean12 = queueAr6.isFull();
        queueAr6.dequeueAll();
        boolean boolean14 = queueAr6.isFull();
        java.lang.Object obj15 = queueAr6.getFront();
        java.lang.Object obj16 = null;
        queueAr6.enqueue(obj16);
        boolean boolean18 = queueAr6.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        queueAr6.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.String str19 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DataStructures.Overflow" + "'", str19, "DataStructures.Overflow");
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.makeEmpty();
        java.lang.Object obj35 = queueAr1.dequeue();
        java.lang.Object obj36 = queueAr1.getFront();
        boolean boolean37 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        boolean boolean39 = queueAr37.isEmpty();
        queueAr37.dequeueAll();
        queueAr37.makeEmpty();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        queueAr37.enqueue((java.lang.Object) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray64 = overflow42.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow65.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow20.addSuppressed((java.lang.Throwable) overflow42);
        overflow0.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray74 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow0.getSuppressed();
        java.lang.String str76 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DataStructures.Overflow" + "'", str76, "DataStructures.Overflow");
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = null;
        queueAr1.enqueue(obj11);
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow16.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow24.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow24.getSuppressed();
        java.lang.Class<?> wildcardClass36 = overflow24.getClass();
        queueAr1.enqueue((java.lang.Object) overflow24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj14 = queueAr1.dequeue();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow11.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray22 = overflow11.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow23.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow42.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray60 = overflow49.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow66.addSuppressed((java.lang.Throwable) overflow78);
        overflow35.addSuppressed((java.lang.Throwable) overflow66);
        overflow11.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray91 = overflow11.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray93 = overflow11.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj27 = queueAr9.getFront();
        queueAr9.makeEmpty();
        boolean boolean29 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.String str61 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DataStructures.Overflow" + "'", str61, "DataStructures.Overflow");
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow12.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray22);
        boolean boolean24 = queueAr1.isFull();
        java.lang.Object obj25 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean28 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow19.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray41 = overflow19.getSuppressed();
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr43.dequeueAll();
        boolean boolean45 = queueAr43.isEmpty();
        queueAr43.dequeueAll();
        queueAr43.makeEmpty();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        queueAr43.enqueue((java.lang.Object) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        overflow19.addSuppressed((java.lang.Throwable) overflow60);
        overflow0.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Class<?> wildcardClass69 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj41 = queueAr27.dequeue();
        boolean boolean42 = queueAr27.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        queueAr27.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray10 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow28.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        overflow12.addSuppressed((java.lang.Throwable) overflow28);
        overflow6.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray49 = overflow6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        boolean boolean16 = queueAr1.isFull();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow10.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable throwable39 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow30.addSuppressed(throwable39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + false + "'", obj11, false);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow6.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow18);
        overflow0.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray26 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow18.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow60.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray78 = overflow67.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray88 = overflow84.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow84);
        overflow54.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray91 = overflow84.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray93 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow40.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray96 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray99 = overflow30.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        overflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray44 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray8);
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        java.lang.Object obj17 = queueAr12.dequeue();
        queueAr12.enqueue((java.lang.Object) (-5));
        java.lang.Object obj20 = queueAr12.getFront();
        java.lang.Object obj21 = queueAr12.getFront();
        queueAr1.enqueue(obj21);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-5) + "'", obj20, (-5));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-5) + "'", obj21, (-5));
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        java.lang.Object obj11 = queueAr9.getFront();
        queueAr1.enqueue(obj11);
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        boolean boolean16 = queueAr14.isEmpty();
        queueAr14.dequeueAll();
        queueAr14.makeEmpty();
        boolean boolean19 = queueAr14.isFull();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj22 = queueAr21.getFront();
        queueAr21.dequeueAll();
        java.lang.Object obj24 = queueAr21.dequeue();
        queueAr14.enqueue(obj24);
        queueAr14.makeEmpty();
        queueAr14.makeEmpty();
        boolean boolean28 = queueAr14.isFull();
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj33 = queueAr32.getFront();
        java.lang.Object obj34 = queueAr32.getFront();
        queueAr30.enqueue((java.lang.Object) queueAr32);
        queueAr14.enqueue((java.lang.Object) queueAr30);
        queueAr14.dequeueAll();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 100);
        boolean boolean2 = queueAr1.isFull();
        java.lang.Object obj3 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isFull();
        java.lang.Object obj15 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        boolean boolean31 = queueAr27.isEmpty();
        boolean boolean32 = queueAr27.isFull();
        boolean boolean33 = queueAr27.isFull();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr27);
        java.lang.Object obj37 = queueAr27.getFront();
        boolean boolean38 = queueAr27.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow6.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray39 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow17.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.String str42 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DataStructures.Overflow" + "'", str42, "DataStructures.Overflow");
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow43.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow88.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow90);
        overflow74.addSuppressed((java.lang.Throwable) overflow90);
        overflow43.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.String str97 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Overflow" + "'", str97, "DataStructures.Overflow");
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.enqueue((java.lang.Object) 1L);
        java.lang.Object obj26 = queueAr9.getFront();
        boolean boolean27 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj32 = queueAr16.getFront();
        java.lang.Object obj33 = queueAr16.dequeue();
        boolean boolean34 = queueAr16.isFull();
        boolean boolean35 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.getFront();
        boolean boolean28 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        queueAr18.makeEmpty();
        boolean boolean21 = queueAr18.isEmpty();
        queueAr18.makeEmpty();
        java.lang.Object obj23 = queueAr18.dequeue();
        java.lang.Object obj24 = queueAr18.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        java.lang.Object obj20 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        boolean boolean14 = queueAr1.isFull();
        boolean boolean15 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj16 = queueAr7.getFront();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        queueAr7.enqueue((java.lang.Object) throwableArray33);
        boolean boolean35 = queueAr7.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        queueAr1.enqueue((java.lang.Object) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray36 = overflow22.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow39.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow39);
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj45 = queueAr16.getFront();
        boolean boolean46 = queueAr16.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        boolean boolean23 = queueAr21.isEmpty();
        queueAr21.dequeueAll();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isFull();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj29 = queueAr28.getFront();
        queueAr28.dequeueAll();
        java.lang.Object obj31 = queueAr28.dequeue();
        queueAr21.enqueue(obj31);
        queueAr21.makeEmpty();
        queueAr21.dequeueAll();
        java.lang.Object obj35 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr37.makeEmpty();
        queueAr21.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj44 = queueAr21.dequeue();
        queueAr21.dequeueAll();
        boolean boolean46 = queueAr21.isFull();
        java.lang.Object obj47 = queueAr21.dequeue();
        queueAr1.enqueue(obj47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        boolean boolean17 = queueAr14.isEmpty();
        java.lang.Object obj18 = queueAr14.getFront();
        boolean boolean19 = queueAr14.isFull();
        java.lang.Object obj20 = queueAr14.getFront();
        java.lang.Object obj21 = queueAr14.getFront();
        boolean boolean22 = queueAr14.isFull();
        queueAr1.enqueue((java.lang.Object) boolean22);
        boolean boolean24 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        boolean boolean7 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        boolean boolean9 = queueAr5.isEmpty();
        java.lang.Object obj10 = queueAr5.getFront();
        java.lang.Object obj11 = queueAr5.dequeue();
        boolean boolean12 = queueAr5.isFull();
        boolean boolean13 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray32 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow18.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray33);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        java.lang.Object obj25 = queueAr15.dequeue();
        boolean boolean26 = queueAr15.isFull();
        queueAr15.makeEmpty();
        queueAr15.makeEmpty();
        queueAr15.dequeueAll();
        boolean boolean30 = queueAr15.isFull();
        java.lang.Class<?> wildcardClass31 = queueAr15.getClass();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 0);
        boolean boolean11 = queueAr10.isFull();
        queueAr1.enqueue((java.lang.Object) boolean11);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.String str48 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DataStructures.Overflow" + "'", str48, "DataStructures.Overflow");
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow41);
        overflow19.addSuppressed((java.lang.Throwable) overflow29);
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray49 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow29.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.getFront();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        boolean boolean16 = queueAr11.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray35 = overflow24.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        queueAr11.enqueue((java.lang.Object) overflow41);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow65.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray73 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow65.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow65);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        java.lang.Object obj25 = queueAr15.dequeue();
        queueAr12.enqueue((java.lang.Object) queueAr15);
        queueAr12.makeEmpty();
        queueAr10.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj29 = queueAr10.dequeue();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        queueAr31.makeEmpty();
        boolean boolean34 = queueAr31.isEmpty();
        queueAr31.dequeueAll();
        queueAr10.enqueue((java.lang.Object) queueAr31);
        java.lang.Object obj37 = queueAr31.dequeue();
        queueAr31.makeEmpty();
        java.lang.Class<?> wildcardClass39 = queueAr31.getClass();
        queueAr1.enqueue((java.lang.Object) queueAr31);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj17 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = obj17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean31 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj35 = queueAr33.getFront();
        queueAr33.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        queueAr11.makeEmpty();
        boolean boolean15 = queueAr11.isFull();
        queueAr7.enqueue((java.lang.Object) queueAr11);
        queueAr1.enqueue((java.lang.Object) queueAr7);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean20 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray70 = overflow13.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        overflow13.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray83 = overflow75.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray28);
        boolean boolean30 = queueAr1.isFull();
        java.lang.Object obj31 = queueAr1.dequeue();
        java.lang.Object obj32 = queueAr1.dequeue();
        boolean boolean33 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        java.lang.Object obj25 = queueAr17.getFront();
        queueAr17.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        boolean boolean21 = queueAr15.isFull();
        boolean boolean22 = queueAr15.isFull();
        queueAr15.makeEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        java.lang.Object obj27 = queueAr25.getFront();
        java.lang.Object obj28 = queueAr25.getFront();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        queueAr25.enqueue((java.lang.Object) overflow29);
        queueAr15.enqueue((java.lang.Object) overflow29);
        queueAr15.dequeueAll();
        java.lang.Object obj43 = queueAr15.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr15);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        boolean boolean15 = queueAr10.isEmpty();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        java.lang.Object obj20 = queueAr17.getFront();
        boolean boolean21 = queueAr17.isEmpty();
        boolean boolean22 = queueAr17.isFull();
        queueAr10.enqueue((java.lang.Object) boolean22);
        boolean boolean24 = queueAr10.isFull();
        java.lang.Object obj25 = queueAr10.dequeue();
        java.lang.Class<?> wildcardClass26 = obj25.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass26);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + false + "'", obj25, false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        boolean boolean14 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        java.lang.Class<?> wildcardClass16 = queueAr5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        boolean boolean25 = queueAr17.isFull();
        queueAr17.dequeueAll();
        boolean boolean27 = queueAr17.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        queueAr1.enqueue((java.lang.Object) overflow20);
        java.lang.Object obj26 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "DataStructures.Overflow");
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow0.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow44);
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow51);
        overflow0.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.String str54 = overflow51.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray74 = overflow66.getSuppressed();
        java.lang.String str75 = overflow66.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DataStructures.Overflow" + "'", str75, "DataStructures.Overflow");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.dequeue();
        java.lang.Object obj26 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        boolean boolean30 = queueAr28.isEmpty();
        queueAr28.dequeueAll();
        queueAr28.makeEmpty();
        boolean boolean33 = queueAr28.isFull();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        java.lang.Object obj37 = queueAr35.dequeue();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        java.lang.Object obj41 = queueAr39.getFront();
        queueAr39.makeEmpty();
        boolean boolean43 = queueAr39.isFull();
        queueAr35.enqueue((java.lang.Object) queueAr39);
        java.lang.Object obj45 = queueAr35.dequeue();
        java.lang.Object obj46 = queueAr35.getFront();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) 'a');
        queueAr35.enqueue((java.lang.Object) queueAr48);
        queueAr28.enqueue((java.lang.Object) queueAr48);
        java.lang.Object obj51 = queueAr48.getFront();
        java.lang.Object obj52 = queueAr48.getFront();
        queueAr1.enqueue(obj52);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.getFront();
        boolean boolean10 = queueAr6.isFull();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.dequeue();
        boolean boolean15 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr5.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj45 = queueAr16.getFront();
        boolean boolean46 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj49 = queueAr16.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow53);
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray58 = overflow47.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow64);
        overflow34.addSuppressed((java.lang.Throwable) overflow64);
        overflow16.addSuppressed((java.lang.Throwable) overflow34);
        queueAr1.enqueue((java.lang.Object) overflow34);
        java.lang.Object obj73 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "DataStructures.Overflow");
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean16 = queueAr4.isFull();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.dequeueAll();
        java.lang.Object obj35 = queueAr33.getFront();
        queueAr33.makeEmpty();
        queueAr33.dequeueAll();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        overflow40.addSuppressed((java.lang.Throwable) overflow50);
        queueAr33.enqueue((java.lang.Object) overflow40);
        overflow23.addSuppressed((java.lang.Throwable) overflow40);
        queueAr4.enqueue((java.lang.Object) overflow23);
        java.lang.Throwable[] throwableArray72 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow23.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.getFront();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr(1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isFull();
        boolean boolean23 = queueAr20.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj20 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj14 = queueAr1.getFront();
        java.lang.Object obj15 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        java.lang.Object obj17 = queueAr14.getFront();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        queueAr14.enqueue((java.lang.Object) overflow18);
        java.lang.Throwable[] throwableArray30 = overflow18.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow38.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow51.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        overflow51.addSuppressed((java.lang.Throwable) overflow57);
        overflow38.addSuppressed((java.lang.Throwable) overflow51);
        overflow18.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray64 = overflow18.getSuppressed();
        queueAr5.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj66 = queueAr5.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "DataStructures.Overflow");
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        boolean boolean17 = queueAr1.isFull();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        java.lang.Object obj53 = queueAr50.dequeue();
        queueAr50.makeEmpty();
        queueAr50.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow12.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray43 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj16 = queueAr7.getFront();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        queueAr7.enqueue((java.lang.Object) throwableArray33);
        queueAr7.makeEmpty();
        java.lang.Object obj36 = queueAr7.getFront();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr38.enqueue((java.lang.Object) (-2));
        boolean boolean41 = queueAr38.isFull();
        queueAr38.makeEmpty();
        boolean boolean43 = queueAr38.isEmpty();
        java.lang.Object obj44 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr46.dequeueAll();
        queueAr38.enqueue((java.lang.Object) queueAr46);
        java.lang.Object obj61 = queueAr46.getFront();
        java.lang.Object obj62 = queueAr46.getFront();
        queueAr46.dequeueAll();
        queueAr7.enqueue((java.lang.Object) queueAr46);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        overflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str44 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DataStructures.Overflow" + "'", str44, "DataStructures.Overflow");
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        boolean boolean47 = queueAr16.isEmpty();
        java.lang.Object obj48 = queueAr16.getFront();
        boolean boolean49 = queueAr16.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean39 = queueAr38.isEmpty();
        java.lang.Object obj40 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        java.lang.Object obj44 = queueAr42.getFront();
        queueAr42.makeEmpty();
        boolean boolean46 = queueAr42.isFull();
        queueAr38.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj48 = queueAr38.dequeue();
        queueAr35.enqueue((java.lang.Object) queueAr38);
        java.lang.Object obj50 = queueAr38.getFront();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        queueAr38.enqueue((java.lang.Object) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow31.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray92 = overflow85.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow25);
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow33.addSuppressed((java.lang.Throwable) overflow43);
        overflow12.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow75);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        boolean boolean29 = queueAr25.isEmpty();
        java.lang.Object obj30 = queueAr25.getFront();
        java.lang.Object obj31 = queueAr25.dequeue();
        queueAr25.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr25);
        queueAr9.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean16 = queueAr4.isFull();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.dequeueAll();
        java.lang.Object obj35 = queueAr33.getFront();
        queueAr33.makeEmpty();
        queueAr33.dequeueAll();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        overflow40.addSuppressed((java.lang.Throwable) overflow50);
        queueAr33.enqueue((java.lang.Object) overflow40);
        overflow23.addSuppressed((java.lang.Throwable) overflow40);
        queueAr4.enqueue((java.lang.Object) overflow23);
        java.lang.Object obj72 = queueAr4.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "DataStructures.Overflow");
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray21 = overflow9.getSuppressed();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean24 = queueAr23.isEmpty();
        java.lang.Object obj25 = queueAr23.dequeue();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        boolean boolean31 = queueAr27.isFull();
        queueAr23.enqueue((java.lang.Object) queueAr27);
        boolean boolean33 = queueAr27.isEmpty();
        boolean boolean34 = queueAr27.isFull();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow48);
        overflow35.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray53 = overflow42.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow59.addSuppressed((java.lang.Throwable) overflow71);
        queueAr27.enqueue((java.lang.Object) overflow59);
        overflow9.addSuppressed((java.lang.Throwable) overflow59);
        queueAr1.enqueue((java.lang.Object) overflow9);
        java.lang.Class<?> wildcardClass85 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.enqueue((java.lang.Object) (-2));
        boolean boolean24 = queueAr21.isFull();
        queueAr21.makeEmpty();
        boolean boolean26 = queueAr21.isEmpty();
        java.lang.Object obj27 = queueAr21.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        queueAr29.makeEmpty();
        boolean boolean34 = queueAr29.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj37 = queueAr36.getFront();
        queueAr36.dequeueAll();
        java.lang.Object obj39 = queueAr36.dequeue();
        queueAr29.enqueue(obj39);
        queueAr29.makeEmpty();
        queueAr29.dequeueAll();
        queueAr21.enqueue((java.lang.Object) queueAr29);
        java.lang.Object obj44 = queueAr29.getFront();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr29.enqueue((java.lang.Object) queueAr46);
        queueAr1.enqueue((java.lang.Object) queueAr46);
        queueAr1.makeEmpty();
        java.lang.Object obj62 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr(2);
        java.lang.Object obj65 = queueAr64.dequeue();
        boolean boolean66 = queueAr64.isFull();
        java.lang.Object obj67 = queueAr64.dequeue();
        queueAr64.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr64);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Class<?> wildcardClass74 = overflow70.getClass();
        queueAr64.enqueue((java.lang.Object) wildcardClass74);
        java.lang.Object obj76 = queueAr64.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "class DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "class DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "class DataStructures.Overflow");
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isFull();
        java.lang.Object obj15 = queueAr10.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray98 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray99 = overflow84.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        queueAr11.makeEmpty();
        java.lang.Object obj16 = queueAr11.dequeue();
        queueAr11.dequeueAll();
        queueAr11.dequeueAll();
        boolean boolean19 = queueAr11.isEmpty();
        boolean boolean20 = queueAr11.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.dequeueAll();
        boolean boolean41 = queueAr39.isEmpty();
        queueAr39.dequeueAll();
        queueAr39.makeEmpty();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        queueAr39.enqueue((java.lang.Object) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow68);
        overflow26.addSuppressed((java.lang.Throwable) overflow68);
        overflow0.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.QueueAr queueAr75 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr75.dequeueAll();
        boolean boolean77 = queueAr75.isEmpty();
        queueAr75.dequeueAll();
        queueAr75.dequeueAll();
        boolean boolean80 = queueAr75.isEmpty();
        queueAr75.dequeueAll();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow88);
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        queueAr75.enqueue((java.lang.Object) overflow84);
        overflow26.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray93 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow84.getSuppressed();
        java.lang.Class<?> wildcardClass95 = overflow84.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj14 = queueAr13.getFront();
        queueAr13.dequeueAll();
        java.lang.Object obj16 = queueAr13.dequeue();
        java.lang.Object obj17 = queueAr13.dequeue();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        java.lang.Object obj22 = queueAr13.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        boolean boolean14 = queueAr7.isEmpty();
        java.lang.Class<?> wildcardClass15 = queueAr7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow14.getSuppressed();
        java.lang.String str21 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DataStructures.Overflow" + "'", str21, "DataStructures.Overflow");
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        queueAr12.enqueue((java.lang.Object) (-4L));
        boolean boolean18 = queueAr12.isFull();
        queueAr12.makeEmpty();
        queueAr12.enqueue((java.lang.Object) 100);
        boolean boolean22 = queueAr12.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        java.lang.Object obj14 = queueAr12.getFront();
        boolean boolean15 = queueAr12.isFull();
        queueAr12.makeEmpty();
        java.lang.Object obj17 = queueAr12.dequeue();
        java.lang.Object obj18 = queueAr12.dequeue();
        java.lang.Object obj19 = queueAr12.dequeue();
        queueAr12.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        boolean boolean22 = queueAr1.isEmpty();
        boolean boolean23 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.enqueue((java.lang.Object) (-2));
        boolean boolean28 = queueAr25.isFull();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isEmpty();
        java.lang.Object obj31 = queueAr25.dequeue();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.dequeueAll();
        boolean boolean35 = queueAr33.isEmpty();
        queueAr33.dequeueAll();
        queueAr33.makeEmpty();
        boolean boolean38 = queueAr33.isFull();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj41 = queueAr40.getFront();
        queueAr40.dequeueAll();
        java.lang.Object obj43 = queueAr40.dequeue();
        queueAr33.enqueue(obj43);
        queueAr33.makeEmpty();
        queueAr33.dequeueAll();
        queueAr25.enqueue((java.lang.Object) queueAr33);
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr49.dequeueAll();
        boolean boolean51 = queueAr49.isEmpty();
        queueAr49.dequeueAll();
        boolean boolean53 = queueAr49.isEmpty();
        java.lang.Object obj54 = queueAr49.getFront();
        java.lang.Object obj55 = queueAr49.dequeue();
        boolean boolean56 = queueAr49.isFull();
        java.lang.Object obj57 = queueAr49.getFront();
        boolean boolean58 = queueAr49.isFull();
        queueAr33.enqueue((java.lang.Object) boolean58);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean58);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow11.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow23);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow48.addSuppressed((java.lang.Throwable) overflow55);
        overflow33.addSuppressed((java.lang.Throwable) overflow55);
        overflow5.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray68 = overflow33.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow33);
        boolean boolean70 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = null;
        queueAr1.enqueue(obj10);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.Object obj70 = queueAr1.dequeue();
        boolean boolean71 = queueAr1.isEmpty();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (byte) 0);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        java.lang.Object obj2 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        java.lang.Object obj6 = queueAr4.getFront();
        queueAr4.makeEmpty();
        boolean boolean8 = queueAr4.isFull();
        queueAr4.dequeueAll();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        queueAr4.enqueue((java.lang.Object) throwableArray19);
        boolean boolean21 = queueAr4.isEmpty();
        boolean boolean22 = queueAr4.isEmpty();
        boolean boolean23 = queueAr4.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean25 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean28 = queueAr27.isEmpty();
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean31 = queueAr30.isEmpty();
        java.lang.Object obj32 = queueAr30.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        java.lang.Object obj36 = queueAr34.getFront();
        queueAr34.makeEmpty();
        boolean boolean38 = queueAr34.isFull();
        queueAr30.enqueue((java.lang.Object) queueAr34);
        java.lang.Object obj40 = queueAr30.dequeue();
        queueAr27.enqueue((java.lang.Object) queueAr30);
        java.lang.Object obj42 = queueAr30.getFront();
        java.lang.Object obj43 = queueAr30.getFront();
        queueAr30.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr4.enqueue((java.lang.Object) queueAr30);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        boolean boolean20 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass21 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        java.lang.Object obj2 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        java.lang.Object obj6 = queueAr4.getFront();
        queueAr4.makeEmpty();
        boolean boolean8 = queueAr4.isFull();
        queueAr4.dequeueAll();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        queueAr4.enqueue((java.lang.Object) throwableArray19);
        boolean boolean21 = queueAr4.isEmpty();
        boolean boolean22 = queueAr4.isEmpty();
        boolean boolean23 = queueAr4.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean25 = queueAr4.isFull();
        java.lang.Object obj26 = queueAr4.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        boolean boolean25 = queueAr23.isEmpty();
        queueAr23.dequeueAll();
        queueAr23.makeEmpty();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        queueAr23.enqueue((java.lang.Object) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow28.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow28);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray59 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        boolean boolean17 = queueAr13.isFull();
        java.lang.Object obj18 = queueAr13.dequeue();
        queueAr13.enqueue((java.lang.Object) (-1L));
        queueAr13.makeEmpty();
        boolean boolean22 = queueAr13.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        boolean boolean26 = queueAr24.isEmpty();
        queueAr24.dequeueAll();
        boolean boolean28 = queueAr24.isEmpty();
        boolean boolean29 = queueAr24.isFull();
        queueAr24.enqueue((java.lang.Object) (-4L));
        boolean boolean32 = queueAr24.isFull();
        queueAr24.makeEmpty();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        java.lang.Object obj37 = queueAr35.getFront();
        queueAr35.makeEmpty();
        boolean boolean39 = queueAr35.isFull();
        queueAr35.dequeueAll();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray50 = overflow43.getSuppressed();
        queueAr35.enqueue((java.lang.Object) throwableArray50);
        queueAr24.enqueue((java.lang.Object) throwableArray50);
        queueAr13.enqueue((java.lang.Object) throwableArray50);
        java.lang.Class<?> wildcardClass54 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass54);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow62.addSuppressed((java.lang.Throwable) overflow70);
        overflow42.addSuppressed((java.lang.Throwable) overflow70);
        overflow2.addSuppressed((java.lang.Throwable) overflow70);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow46.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray69 = overflow46.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray71 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow6.getSuppressed();
        java.lang.String str73 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DataStructures.Overflow" + "'", str73, "DataStructures.Overflow");
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr26.makeEmpty();
        java.lang.Object obj48 = queueAr26.dequeue();
        java.lang.Object obj49 = queueAr26.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) 'a');
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr14.makeEmpty();
        boolean boolean17 = queueAr14.isFull();
        boolean boolean18 = queueAr14.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        java.lang.Throwable[] throwableArray34 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow27.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean15 = queueAr14.isEmpty();
        java.lang.Object obj16 = queueAr14.dequeue();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        queueAr14.enqueue((java.lang.Object) queueAr18);
        java.lang.Object obj24 = queueAr14.dequeue();
        java.lang.Object obj25 = queueAr14.getFront();
        queueAr14.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj28 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean30 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.dequeueAll();
        boolean boolean29 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean31 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.enqueue((java.lang.Object) (-2));
        boolean boolean36 = queueAr33.isFull();
        queueAr33.makeEmpty();
        boolean boolean38 = queueAr33.isEmpty();
        java.lang.Object obj39 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        boolean boolean43 = queueAr41.isEmpty();
        queueAr41.dequeueAll();
        queueAr41.makeEmpty();
        boolean boolean46 = queueAr41.isFull();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj49 = queueAr48.getFront();
        queueAr48.dequeueAll();
        java.lang.Object obj51 = queueAr48.dequeue();
        queueAr41.enqueue(obj51);
        queueAr41.makeEmpty();
        queueAr41.dequeueAll();
        queueAr33.enqueue((java.lang.Object) queueAr41);
        java.lang.Object obj56 = queueAr41.dequeue();
        DataStructures.QueueAr queueAr58 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr58.dequeueAll();
        java.lang.Object obj60 = queueAr58.getFront();
        java.lang.Object obj61 = queueAr58.getFront();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow62.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        queueAr58.enqueue((java.lang.Object) overflow62);
        java.lang.Object obj74 = queueAr58.getFront();
        java.lang.Object obj75 = queueAr58.dequeue();
        boolean boolean76 = queueAr58.isEmpty();
        java.lang.Object obj77 = queueAr58.dequeue();
        queueAr41.enqueue((java.lang.Object) queueAr58);
        queueAr41.dequeueAll();
        boolean boolean80 = queueAr41.isEmpty();
        boolean boolean81 = queueAr41.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr41);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        queueAr1.dequeueAll();
        boolean boolean23 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray43 = overflow32.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow56.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow85);
        overflow32.addSuppressed((java.lang.Throwable) overflow56);
        overflow2.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray93 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow2.getSuppressed();
        java.lang.String str96 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow15.addSuppressed((java.lang.Throwable) overflow31);
        overflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow12);
        java.lang.Class<?> wildcardClass37 = overflow12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        boolean boolean17 = queueAr13.isFull();
        boolean boolean18 = queueAr13.isEmpty();
        queueAr13.makeEmpty();
        queueAr13.dequeueAll();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        boolean boolean23 = queueAr13.isEmpty();
        boolean boolean24 = queueAr13.isEmpty();
        boolean boolean25 = queueAr13.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean25);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean21 = queueAr1.isFull();
        java.lang.Object obj22 = queueAr1.getFront();
        boolean boolean23 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        java.lang.Object obj14 = queueAr10.dequeue();
        java.lang.Object obj15 = queueAr10.dequeue();
        queueAr10.enqueue((java.lang.Object) false);
        boolean boolean18 = queueAr10.isFull();
        boolean boolean19 = queueAr10.isFull();
        queueAr10.makeEmpty();
        java.lang.Object obj21 = queueAr10.getFront();
        queueAr1.enqueue(obj21);
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        queueAr25.dequeueAll();
        java.lang.Object obj39 = queueAr25.dequeue();
        java.lang.Object obj40 = queueAr25.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray28);
        boolean boolean30 = queueAr1.isFull();
        java.lang.Object obj31 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr32.dequeueAll();
        java.lang.Object obj34 = queueAr32.getFront();
        queueAr32.makeEmpty();
        boolean boolean36 = queueAr32.isFull();
        queueAr32.makeEmpty();
        queueAr16.enqueue((java.lang.Object) queueAr32);
        queueAr32.makeEmpty();
        java.lang.Object obj40 = queueAr32.getFront();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean43 = queueAr42.isEmpty();
        java.lang.Object obj44 = queueAr42.dequeue();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        boolean boolean50 = queueAr46.isFull();
        queueAr42.enqueue((java.lang.Object) queueAr46);
        java.lang.Object obj52 = queueAr42.dequeue();
        boolean boolean53 = queueAr42.isEmpty();
        java.lang.Object obj54 = queueAr42.dequeue();
        queueAr32.enqueue((java.lang.Object) queueAr42);
        boolean boolean56 = queueAr42.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean56);
        java.lang.Object obj58 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + true + "'", obj58, true);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow2.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow23.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str55 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean47 = queueAr9.isEmpty();
        queueAr9.makeEmpty();
        java.lang.Object obj49 = queueAr9.getFront();
        queueAr9.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray16 = overflow9.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray16);
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj22 = queueAr1.getFront();
        java.lang.Object obj23 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean26 = queueAr1.isFull();
        java.lang.Object obj27 = queueAr1.dequeue();
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean32 = queueAr31.isEmpty();
        java.lang.Object obj33 = queueAr31.dequeue();
        boolean boolean34 = queueAr31.isEmpty();
        java.lang.Object obj35 = queueAr31.getFront();
        boolean boolean36 = queueAr31.isFull();
        java.lang.Object obj37 = queueAr31.getFront();
        DataStructures.QueueAr queueAr39 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr39.enqueue((java.lang.Object) (-2));
        boolean boolean42 = queueAr39.isFull();
        queueAr39.makeEmpty();
        boolean boolean44 = queueAr39.isEmpty();
        java.lang.Object obj45 = queueAr39.dequeue();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        boolean boolean49 = queueAr47.isEmpty();
        queueAr47.dequeueAll();
        queueAr47.makeEmpty();
        boolean boolean52 = queueAr47.isFull();
        DataStructures.QueueAr queueAr54 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj55 = queueAr54.getFront();
        queueAr54.dequeueAll();
        java.lang.Object obj57 = queueAr54.dequeue();
        queueAr47.enqueue(obj57);
        queueAr47.makeEmpty();
        queueAr47.dequeueAll();
        queueAr39.enqueue((java.lang.Object) queueAr47);
        queueAr47.dequeueAll();
        queueAr31.enqueue((java.lang.Object) queueAr47);
        java.lang.Object obj64 = queueAr31.dequeue();
        boolean boolean65 = queueAr31.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean65);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr12.dequeueAll();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray27);
        queueAr1.enqueue((java.lang.Object) throwableArray27);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        java.lang.Object obj9 = queueAr7.getFront();
        java.lang.Object obj10 = queueAr7.dequeue();
        java.lang.Object obj11 = queueAr7.getFront();
        java.lang.Object obj12 = queueAr7.dequeue();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow15.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow48.addSuppressed((java.lang.Throwable) overflow66);
        overflow15.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow74.addSuppressed((java.lang.Throwable) overflow80);
        overflow48.addSuppressed((java.lang.Throwable) overflow74);
        queueAr7.enqueue((java.lang.Object) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow48);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        queueAr16.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.enqueue((java.lang.Object) (-2));
        boolean boolean12 = queueAr9.isFull();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isEmpty();
        java.lang.Object obj15 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        boolean boolean22 = queueAr17.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj25 = queueAr24.getFront();
        queueAr24.dequeueAll();
        java.lang.Object obj27 = queueAr24.dequeue();
        queueAr17.enqueue(obj27);
        queueAr17.makeEmpty();
        queueAr17.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr17);
        queueAr17.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        java.lang.Object obj35 = queueAr17.getFront();
        boolean boolean36 = queueAr17.isEmpty();
        java.lang.Object obj37 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        java.lang.Object obj30 = queueAr27.getFront();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        queueAr27.enqueue((java.lang.Object) overflow31);
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow58);
        overflow31.addSuppressed((java.lang.Throwable) overflow46);
        overflow20.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow70.addSuppressed((java.lang.Throwable) overflow79);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray86 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        queueAr11.enqueue((java.lang.Object) overflow15);
        queueAr1.enqueue((java.lang.Object) overflow15);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow11.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray71 = overflow65.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow65);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        boolean boolean7 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        boolean boolean9 = queueAr5.isEmpty();
        java.lang.Object obj10 = queueAr5.getFront();
        java.lang.Object obj11 = queueAr5.dequeue();
        boolean boolean12 = queueAr5.isFull();
        boolean boolean13 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Class<?> wildcardClass16 = queueAr5.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.getFront();
        boolean boolean10 = queueAr6.isFull();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        java.lang.Object obj13 = queueAr6.dequeue();
        java.lang.Object obj14 = queueAr6.getFront();
        boolean boolean15 = queueAr6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        overflow7.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray41 = overflow7.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean54 = queueAr53.isEmpty();
        java.lang.Object obj55 = queueAr53.dequeue();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr57.dequeueAll();
        java.lang.Object obj59 = queueAr57.getFront();
        queueAr57.makeEmpty();
        boolean boolean61 = queueAr57.isFull();
        queueAr53.enqueue((java.lang.Object) queueAr57);
        java.lang.Object obj63 = queueAr53.dequeue();
        boolean boolean64 = queueAr53.isEmpty();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow81);
        queueAr53.enqueue((java.lang.Object) overflow70);
        overflow47.addSuppressed((java.lang.Throwable) overflow70);
        overflow7.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray86 = overflow7.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray86);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        boolean boolean8 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        boolean boolean23 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean25 = queueAr1.isEmpty();
        boolean boolean26 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow21.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr30.dequeueAll();
        boolean boolean32 = queueAr30.isEmpty();
        queueAr30.dequeueAll();
        queueAr30.makeEmpty();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        queueAr30.enqueue((java.lang.Object) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow51);
        overflow18.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray58 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow51.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.dequeue();
        java.lang.Object obj26 = queueAr9.getFront();
        java.lang.Object obj27 = queueAr9.getFront();
        queueAr9.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        java.lang.Object obj12 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        boolean boolean7 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        boolean boolean9 = queueAr5.isEmpty();
        java.lang.Object obj10 = queueAr5.getFront();
        java.lang.Object obj11 = queueAr5.dequeue();
        boolean boolean12 = queueAr5.isFull();
        boolean boolean13 = queueAr5.isEmpty();
        queueAr5.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray32 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow18.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray33);
        boolean boolean35 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        java.lang.Object obj14 = queueAr12.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr16.makeEmpty();
        boolean boolean20 = queueAr16.isFull();
        queueAr12.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj22 = queueAr12.getFront();
        java.lang.Object obj23 = queueAr12.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj25 = queueAr1.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        boolean boolean40 = queueAr27.isEmpty();
        boolean boolean41 = queueAr27.isFull();
        java.lang.Object obj42 = queueAr27.dequeue();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr44.dequeueAll();
        boolean boolean46 = queueAr44.isEmpty();
        queueAr44.dequeueAll();
        boolean boolean48 = queueAr44.isEmpty();
        java.lang.Object obj49 = queueAr44.getFront();
        boolean boolean50 = queueAr44.isFull();
        queueAr44.makeEmpty();
        queueAr27.enqueue((java.lang.Object) queueAr44);
        boolean boolean53 = queueAr44.isFull();
        java.lang.Object obj54 = queueAr44.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr44);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isFull();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 100);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.dequeue();
        java.lang.Object obj20 = queueAr17.dequeue();
        java.lang.Object obj21 = queueAr17.dequeue();
        java.lang.Object obj22 = queueAr17.getFront();
        queueAr17.dequeueAll();
        boolean boolean24 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        queueAr17.makeEmpty();
        java.lang.Object obj27 = queueAr17.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj27);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        java.lang.Object obj15 = queueAr12.getFront();
        queueAr12.makeEmpty();
        queueAr12.dequeueAll();
        boolean boolean18 = queueAr12.isFull();
        java.lang.Object obj19 = queueAr12.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow8.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        boolean boolean23 = queueAr18.isEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        queueAr18.enqueue((java.lang.Object) overflow48);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow72.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow80.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow80);
        overflow48.addSuppressed((java.lang.Throwable) overflow72);
        overflow8.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray91 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray29 = overflow18.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray41 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass42 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        java.lang.Object obj8 = queueAr5.getFront();
        boolean boolean9 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        java.lang.Object obj11 = queueAr5.dequeue();
        boolean boolean12 = queueAr5.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean12);
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.getFront();
        boolean boolean10 = queueAr6.isFull();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        queueAr6.makeEmpty();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj16 = queueAr15.dequeue();
        java.lang.Object obj17 = queueAr15.dequeue();
        queueAr6.enqueue(obj17);
        queueAr6.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        boolean boolean31 = queueAr27.isEmpty();
        java.lang.Object obj32 = queueAr27.getFront();
        java.lang.Object obj33 = queueAr27.dequeue();
        boolean boolean34 = queueAr27.isFull();
        boolean boolean35 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj37 = queueAr27.dequeue();
        queueAr27.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        boolean boolean20 = queueAr18.isEmpty();
        queueAr18.dequeueAll();
        boolean boolean22 = queueAr18.isEmpty();
        java.lang.Object obj23 = queueAr18.getFront();
        java.lang.Object obj24 = queueAr18.dequeue();
        boolean boolean25 = queueAr18.isFull();
        java.lang.Object obj26 = queueAr18.getFront();
        java.lang.Object obj27 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean30 = queueAr29.isEmpty();
        java.lang.Object obj31 = queueAr29.getFront();
        boolean boolean32 = queueAr29.isFull();
        queueAr29.makeEmpty();
        java.lang.Object obj34 = queueAr29.dequeue();
        java.lang.Object obj35 = queueAr29.dequeue();
        java.lang.Object obj36 = queueAr29.dequeue();
        queueAr29.dequeueAll();
        queueAr18.enqueue((java.lang.Object) queueAr29);
        boolean boolean39 = queueAr18.isEmpty();
        boolean boolean40 = queueAr18.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.dequeue();
        java.lang.Object obj26 = queueAr9.getFront();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean29 = queueAr28.isEmpty();
        java.lang.Object obj30 = queueAr28.dequeue();
        boolean boolean31 = queueAr28.isEmpty();
        queueAr28.makeEmpty();
        queueAr28.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr28);
        boolean boolean35 = queueAr28.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.makeEmpty();
        boolean boolean57 = queueAr1.isEmpty();
        java.lang.Object obj58 = queueAr1.getFront();
        java.lang.Object obj59 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean61 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        boolean boolean27 = queueAr1.isEmpty();
        java.lang.Object obj28 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + 6L + "'", obj28, 6L);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        boolean boolean12 = queueAr8.isEmpty();
        java.lang.Object obj13 = queueAr8.getFront();
        java.lang.Class<?> wildcardClass14 = queueAr8.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass14);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        java.lang.Object obj19 = queueAr13.dequeue();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        queueAr13.enqueue((java.lang.Object) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow83);
        overflow58.addSuppressed((java.lang.Throwable) overflow83);
        overflow32.addSuppressed((java.lang.Throwable) overflow83);
        queueAr1.enqueue((java.lang.Object) overflow32);
        java.lang.Class<?> wildcardClass89 = overflow32.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-3) + "'", obj19, (-3));
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow20.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str31 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean16 = queueAr1.isEmpty();
        boolean boolean17 = queueAr1.isFull();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean20 = queueAr19.isEmpty();
        java.lang.Object obj21 = queueAr19.dequeue();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        boolean boolean27 = queueAr23.isFull();
        queueAr19.enqueue((java.lang.Object) queueAr23);
        java.lang.Object obj29 = queueAr19.getFront();
        queueAr19.dequeueAll();
        java.lang.Object obj31 = queueAr19.getFront();
        java.lang.Object obj32 = queueAr19.dequeue();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr34.dequeueAll();
        boolean boolean36 = queueAr34.isEmpty();
        queueAr34.dequeueAll();
        boolean boolean38 = queueAr34.isEmpty();
        boolean boolean39 = queueAr34.isFull();
        boolean boolean40 = queueAr34.isFull();
        boolean boolean41 = queueAr34.isFull();
        queueAr34.makeEmpty();
        java.lang.Object obj43 = queueAr34.getFront();
        java.lang.Object obj44 = queueAr34.dequeue();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.enqueue((java.lang.Object) (-2));
        boolean boolean49 = queueAr46.isFull();
        java.lang.Class<?> wildcardClass50 = queueAr46.getClass();
        queueAr34.enqueue((java.lang.Object) wildcardClass50);
        queueAr19.enqueue((java.lang.Object) queueAr34);
        queueAr1.enqueue((java.lang.Object) queueAr34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow42);
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean54 = queueAr53.isEmpty();
        DataStructures.QueueAr queueAr56 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean57 = queueAr56.isEmpty();
        java.lang.Object obj58 = queueAr56.dequeue();
        DataStructures.QueueAr queueAr60 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr60.dequeueAll();
        java.lang.Object obj62 = queueAr60.getFront();
        queueAr60.makeEmpty();
        boolean boolean64 = queueAr60.isFull();
        queueAr56.enqueue((java.lang.Object) queueAr60);
        java.lang.Object obj66 = queueAr56.dequeue();
        queueAr53.enqueue((java.lang.Object) queueAr56);
        java.lang.Object obj68 = queueAr56.getFront();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow81);
        queueAr56.enqueue((java.lang.Object) overflow81);
        overflow49.addSuppressed((java.lang.Throwable) overflow81);
        overflow11.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray88 = overflow81.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }
}

