package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        stackAr7.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj15 = stackAr1.top();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = underflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        overflow3.addSuppressed((java.lang.Throwable) underflow15);
        java.lang.Throwable[] throwableArray17 = underflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow15.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray35 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray36 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray37 = underflow15.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow15.addSuppressed((java.lang.Throwable) overflow38);
        underflow0.addSuppressed((java.lang.Throwable) underflow15);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        overflow66.addSuppressed((java.lang.Throwable) overflow71);
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        underflow78.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        DataStructures.Underflow underflow85 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray86 = underflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) underflow85);
        underflow76.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray89 = underflow76.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        underflow76.addSuppressed((java.lang.Throwable) overflow91);
        overflow54.addSuppressed((java.lang.Throwable) underflow76);
        java.lang.Throwable[] throwableArray96 = overflow54.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        underflow15.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray99 = underflow15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(3);
        java.lang.Object obj8 = stackAr7.topAndPop();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        java.lang.Object obj11 = stackAr10.topAndPop();
        boolean boolean12 = stackAr10.isFull();
        stackAr7.push((java.lang.Object) stackAr10);
        java.lang.Object obj14 = stackAr7.topAndPop();
        boolean boolean15 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) (short) -1);
        java.lang.Object obj18 = stackAr7.top();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr7.pop();
        DataStructures.StackAr stackAr22 = new DataStructures.StackAr(0);
        stackAr22.makeEmpty();
        stackAr22.makeEmpty();
        java.lang.Object obj25 = stackAr22.top();
        stackAr7.push(obj25);
        stackAr7.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (short) -1 + "'", obj18, (short) -1);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr10.isFull();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(0);
        java.lang.Object obj15 = stackAr14.topAndPop();
        java.lang.Object obj16 = stackAr14.top();
        stackAr14.makeEmpty();
        java.lang.Object obj18 = stackAr14.top();
        stackAr10.push((java.lang.Object) stackAr14);
        boolean boolean20 = stackAr10.isFull();
        boolean boolean21 = stackAr10.isFull();
        java.lang.Class<?> wildcardClass22 = stackAr10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        overflow2.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.Throwable[] throwableArray16 = underflow14.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow14.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        overflow34.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow50);
        overflow39.addSuppressed((java.lang.Throwable) overflow50);
        overflow24.addSuppressed((java.lang.Throwable) overflow39);
        stackAr1.push((java.lang.Object) overflow24);
        boolean boolean58 = stackAr1.isEmpty();
        java.lang.Object obj59 = stackAr1.topAndPop();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "DataStructures.Overflow");
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray24 = underflow11.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = underflow11.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray40 = overflow34.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray42 = overflow34.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        stackAr7.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj15 = stackAr1.top();
        java.lang.Class<?> wildcardClass16 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray11 = underflow0.getSuppressed();
        java.lang.Class<?> wildcardClass12 = throwableArray11.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(3);
        java.lang.Object obj6 = stackAr5.topAndPop();
        boolean boolean7 = stackAr5.isEmpty();
        stackAr5.push((java.lang.Object) 100.0d);
        java.lang.Object obj10 = stackAr5.topAndPop();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) underflow24);
        java.lang.Throwable[] throwableArray38 = underflow24.getSuppressed();
        stackAr5.push((java.lang.Object) throwableArray38);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj41 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 100.0d + "'", obj10, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        overflow22.addSuppressed((java.lang.Throwable) underflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        underflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow64);
        overflow47.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) underflow78);
        underflow69.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray82 = underflow69.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        underflow69.addSuppressed((java.lang.Throwable) overflow84);
        overflow47.addSuppressed((java.lang.Throwable) underflow69);
        java.lang.Throwable[] throwableArray89 = overflow47.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow47);
        overflow22.addSuppressed((java.lang.Throwable) overflow37);
        overflow11.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray93 = overflow11.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = underflow22.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        overflow25.addSuppressed((java.lang.Throwable) underflow37);
        java.lang.Throwable[] throwableArray39 = underflow37.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow37.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray57 = underflow37.getSuppressed();
        java.lang.Throwable[] throwableArray58 = underflow37.getSuppressed();
        java.lang.Throwable[] throwableArray59 = underflow37.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow37.addSuppressed((java.lang.Throwable) overflow60);
        underflow22.addSuppressed((java.lang.Throwable) underflow37);
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        overflow5.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray68 = underflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        underflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray77 = underflow74.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow74);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass5 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        java.lang.Object obj30 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr33 = new DataStructures.StackAr(0);
        boolean boolean34 = stackAr33.isFull();
        stackAr33.makeEmpty();
        java.lang.Object obj36 = stackAr33.topAndPop();
        stackAr33.makeEmpty();
        boolean boolean38 = stackAr33.isFull();
        java.lang.Object obj39 = stackAr33.top();
        java.lang.Object obj40 = stackAr33.top();
        boolean boolean41 = stackAr33.isFull();
        stackAr33.makeEmpty();
        java.lang.Object obj43 = stackAr33.topAndPop();
        stackAr1.push(obj43);
        java.lang.Object obj45 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow14.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        overflow14.addSuppressed((java.lang.Throwable) overflow29);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray33 = overflow0.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow57);
        overflow41.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray62 = overflow57.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow57);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray62);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow0.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        overflow17.addSuppressed((java.lang.Throwable) underflow29);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow29.addSuppressed((java.lang.Throwable) overflow36);
        underflow0.addSuppressed((java.lang.Throwable) underflow29);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = underflow46.getSuppressed();
        underflow29.addSuppressed((java.lang.Throwable) underflow46);
        java.lang.String str50 = underflow29.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DataStructures.Underflow" + "'", str50, "DataStructures.Underflow");
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Class<?> wildcardClass9 = underflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        underflow16.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        underflow37.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        overflow53.addSuppressed((java.lang.Throwable) overflow58);
        underflow39.addSuppressed((java.lang.Throwable) overflow53);
        overflow34.addSuppressed((java.lang.Throwable) overflow53);
        underflow16.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        overflow65.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        overflow65.addSuppressed((java.lang.Throwable) overflow80);
        overflow53.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray84 = overflow53.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        stackAr4.makeEmpty();
        boolean boolean10 = stackAr4.isEmpty();
        java.lang.Object obj11 = stackAr4.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr4.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = underflow22.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        underflow22.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray43 = overflow37.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray43);
        java.lang.Class<?> wildcardClass45 = throwableArray43.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = underflow0.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray29 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = underflow0.getSuppressed();
        java.lang.Class<?> wildcardClass31 = throwableArray30.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow21.addSuppressed((java.lang.Throwable) overflow30);
        overflow14.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray36 = overflow14.getSuppressed();
        java.lang.Class<?> wildcardClass37 = overflow14.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        java.lang.Throwable[] throwableArray22 = underflow8.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.top();
        java.lang.Object obj14 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow70);
        underflow61.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray74 = overflow66.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow66);
        overflow47.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray77 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow66.getSuppressed();
        underflow8.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray80 = underflow8.getSuppressed();
        java.lang.Class<?> wildcardClass81 = throwableArray80.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr4.makeEmpty();
        boolean boolean9 = stackAr4.isFull();
        stackAr4.makeEmpty();
        java.lang.Object obj11 = stackAr4.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        overflow44.addSuppressed((java.lang.Throwable) overflow53);
        overflow39.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray59 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow53.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.String str62 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow20.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow33.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow43.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Underflow underflow59 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray60 = underflow59.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        underflow61.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) underflow68);
        underflow59.addSuppressed((java.lang.Throwable) overflow64);
        underflow57.addSuppressed((java.lang.Throwable) underflow59);
        overflow52.addSuppressed((java.lang.Throwable) underflow59);
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        underflow59.addSuppressed((java.lang.Throwable) underflow74);
        overflow33.addSuppressed((java.lang.Throwable) underflow59);
        overflow20.addSuppressed((java.lang.Throwable) underflow59);
        java.lang.String str78 = underflow59.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Underflow" + "'", str78, "DataStructures.Underflow");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        java.lang.Object obj30 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean32 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj11 = stackAr10.topAndPop();
        java.lang.Object obj12 = stackAr10.top();
        stackAr10.makeEmpty();
        boolean boolean14 = stackAr10.isFull();
        java.lang.Object obj15 = stackAr10.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj15);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        overflow3.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) underflow34);
        underflow25.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray38 = underflow25.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        underflow25.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = underflow25.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        underflow25.addSuppressed((java.lang.Throwable) overflow48);
        underflow22.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.String str55 = underflow22.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Underflow" + "'", str55, "DataStructures.Underflow");
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        java.lang.Object obj15 = stackAr13.top();
        stackAr13.makeEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        stackAr13.makeEmpty();
        java.lang.Object obj19 = stackAr13.topAndPop();
        boolean boolean20 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj22 = stackAr13.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr13);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        java.lang.Throwable[] throwableArray10 = underflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        overflow26.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        underflow33.addSuppressed((java.lang.Throwable) underflow48);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        underflow48.addSuppressed((java.lang.Throwable) underflow50);
        overflow11.addSuppressed((java.lang.Throwable) underflow48);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        overflow57.addSuppressed((java.lang.Throwable) overflow62);
        overflow53.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray74 = overflow53.getSuppressed();
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable throwable76 = null;
        // The following exception was thrown during execution in test generation
        try {
            underflow48.addSuppressed(throwable76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        overflow19.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = overflow19.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.push((java.lang.Object) (-6.9d));
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) underflow19);
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow29.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow31.addSuppressed((java.lang.Throwable) overflow45);
        underflow23.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        underflow31.addSuppressed((java.lang.Throwable) overflow56);
        underflow10.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        overflow74.addSuppressed((java.lang.Throwable) overflow79);
        overflow70.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray84 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow79.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray90 = overflow87.getSuppressed();
        java.lang.Throwable[] throwableArray91 = overflow87.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow87.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow87.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow87);
        stackAr1.push((java.lang.Object) overflow87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        java.lang.String str58 = overflow1.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean14 = stackAr1.isFull();
        java.lang.Object obj15 = stackAr1.top();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow7.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow17);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow20.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray52 = overflow44.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) underflow64);
        underflow55.addSuppressed((java.lang.Throwable) overflow60);
        underflow53.addSuppressed((java.lang.Throwable) underflow55);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        underflow55.addSuppressed((java.lang.Throwable) overflow69);
        overflow44.addSuppressed((java.lang.Throwable) overflow69);
        overflow20.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray81 = overflow20.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str83 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DataStructures.Overflow" + "'", str83, "DataStructures.Overflow");
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray14 = underflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow12.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray32 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray34 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray35 = underflow12.getSuppressed();
        java.lang.Class<?> wildcardClass36 = underflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(5);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow11.getSuppressed();
        java.lang.Class<?> wildcardClass22 = throwableArray21.getClass();
        stackAr1.push((java.lang.Object) wildcardClass22);
        boolean boolean24 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) underflow26);
        underflow0.addSuppressed((java.lang.Throwable) underflow26);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow53);
        overflow41.addSuppressed((java.lang.Throwable) overflow53);
        underflow26.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray59 = underflow26.getSuppressed();
        java.lang.String str60 = underflow26.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DataStructures.Underflow" + "'", str60, "DataStructures.Underflow");
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass15 = obj14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        overflow3.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) underflow28);
        underflow19.addSuppressed((java.lang.Throwable) overflow24);
        underflow17.addSuppressed((java.lang.Throwable) underflow19);
        overflow12.addSuppressed((java.lang.Throwable) underflow19);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        underflow19.addSuppressed((java.lang.Throwable) underflow34);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        underflow34.addSuppressed((java.lang.Throwable) underflow36);
        stackAr1.push((java.lang.Object) underflow36);
        boolean boolean39 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass40 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        java.lang.Object obj14 = stackAr10.top();
        java.lang.Object obj15 = stackAr10.topAndPop();
        boolean boolean16 = stackAr10.isEmpty();
        DataStructures.StackAr stackAr18 = new DataStructures.StackAr(100);
        stackAr18.push((java.lang.Object) 8L);
        stackAr10.push((java.lang.Object) stackAr18);
        java.lang.Object obj22 = stackAr18.top();
        java.lang.Class<?> wildcardClass23 = obj22.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj22);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 8L + "'", obj22, 8L);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        boolean boolean12 = stackAr7.isFull();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.top();
        stackAr1.push(obj14);
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow6.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        overflow10.addSuppressed((java.lang.Throwable) overflow15);
        overflow6.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow20.addSuppressed((java.lang.Throwable) underflow22);
        overflow15.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.Throwable[] throwableArray37 = underflow22.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow55);
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) underflow71);
        underflow62.addSuppressed((java.lang.Throwable) overflow67);
        underflow60.addSuppressed((java.lang.Throwable) underflow62);
        overflow55.addSuppressed((java.lang.Throwable) underflow62);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        underflow81.addSuppressed((java.lang.Throwable) overflow84);
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        underflow62.addSuppressed((java.lang.Throwable) overflow84);
        underflow22.addSuppressed((java.lang.Throwable) underflow62);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow62);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.Object obj16 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(1);
        java.lang.Object obj13 = stackAr12.top();
        boolean boolean14 = stackAr12.isFull();
        stackAr12.makeEmpty();
        java.lang.Object obj16 = stackAr12.top();
        java.lang.Object obj17 = stackAr12.topAndPop();
        boolean boolean18 = stackAr12.isEmpty();
        DataStructures.StackAr stackAr20 = new DataStructures.StackAr(100);
        stackAr20.push((java.lang.Object) 8L);
        stackAr12.push((java.lang.Object) stackAr20);
        DataStructures.StackAr stackAr25 = new DataStructures.StackAr(2);
        boolean boolean26 = stackAr25.isFull();
        java.lang.Object obj27 = null;
        stackAr25.push(obj27);
        boolean boolean29 = stackAr25.isFull();
        stackAr20.push((java.lang.Object) boolean29);
        java.lang.Object obj31 = stackAr20.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr20);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + false + "'", obj31, false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        java.lang.Object obj9 = stackAr4.topAndPop();
        java.lang.Class<?> wildcardClass10 = stackAr4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr8.isEmpty();
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr8.push(obj16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.Throwable[] throwableArray56 = underflow53.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        underflow53.addSuppressed((java.lang.Throwable) overflow57);
        underflow8.addSuppressed((java.lang.Throwable) underflow53);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        underflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        underflow78.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        DataStructures.Underflow underflow85 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray86 = underflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) underflow85);
        underflow76.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray89 = overflow81.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray91 = overflow81.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow81.getSuppressed();
        underflow8.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.String str94 = overflow81.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "DataStructures.Overflow" + "'", str94, "DataStructures.Overflow");
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        stackAr7.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj15 = stackAr1.top();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        overflow1.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = underflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        overflow14.addSuppressed((java.lang.Throwable) underflow26);
        java.lang.Throwable[] throwableArray28 = underflow26.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow41);
        underflow26.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray46 = underflow26.getSuppressed();
        java.lang.Throwable[] throwableArray47 = underflow26.getSuppressed();
        java.lang.Throwable[] throwableArray48 = underflow26.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow26.addSuppressed((java.lang.Throwable) overflow49);
        underflow11.addSuppressed((java.lang.Throwable) underflow26);
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        java.lang.String str55 = underflow11.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Underflow" + "'", str55, "DataStructures.Underflow");
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass3 = stackAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.push((java.lang.Object) (-5.4d));
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow8.getSuppressed();
        stackAr1.push((java.lang.Object) overflow8);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow26);
        underflow17.addSuppressed((java.lang.Throwable) overflow22);
        underflow15.addSuppressed((java.lang.Throwable) underflow17);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow17.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray41 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        overflow44.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        overflow65.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray80 = overflow58.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow58);
        overflow8.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Class<?> wildcardClass83 = overflow8.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-5.4d) + "'", obj7, (-5.4d));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow0.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        overflow24.addSuppressed((java.lang.Throwable) underflow36);
        java.lang.Throwable[] throwableArray38 = overflow24.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray40 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = overflow42.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow42);
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray53 = overflow32.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray53);
        stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow1.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        overflow16.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray51 = underflow38.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        underflow38.addSuppressed((java.lang.Throwable) overflow53);
        overflow16.addSuppressed((java.lang.Throwable) underflow38);
        java.lang.Throwable[] throwableArray58 = overflow16.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow16);
        overflow1.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray61 = overflow1.getSuppressed();
        java.lang.String str62 = overflow1.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr4.makeEmpty();
        java.lang.Object obj9 = stackAr4.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr4.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        underflow34.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow21.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        overflow46.addSuppressed((java.lang.Throwable) overflow51);
        overflow42.addSuppressed((java.lang.Throwable) overflow51);
        overflow37.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray57 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow51.getSuppressed();
        java.lang.Class<?> wildcardClass59 = throwableArray58.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray58);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray51 = overflow43.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray53 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow43.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        overflow61.addSuppressed((java.lang.Throwable) overflow66);
        overflow57.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        underflow73.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) underflow80);
        underflow71.addSuppressed((java.lang.Throwable) underflow80);
        java.lang.Throwable[] throwableArray84 = underflow80.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow80);
        overflow43.addSuppressed((java.lang.Throwable) overflow66);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow21.addSuppressed((java.lang.Throwable) overflow30);
        overflow14.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray36 = overflow14.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray62 = overflow54.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray64 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        underflow67.addSuppressed((java.lang.Throwable) underflow68);
        java.lang.Throwable[] throwableArray71 = underflow67.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow72.getSuppressed();
        underflow67.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.String str81 = overflow72.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Overflow" + "'", str81, "DataStructures.Overflow");
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow14.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) underflow37);
        underflow28.addSuppressed((java.lang.Throwable) underflow37);
        java.lang.Throwable[] throwableArray41 = underflow37.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow37);
        overflow0.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray44 = overflow0.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) underflow54);
        overflow0.addSuppressed((java.lang.Throwable) underflow45);
        java.lang.String str59 = underflow45.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DataStructures.Underflow" + "'", str59, "DataStructures.Underflow");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = underflow0.getSuppressed();
        DataStructures.Underflow underflow3 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray4 = underflow3.getSuppressed();
        DataStructures.Underflow underflow5 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray6 = underflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        underflow5.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) underflow12);
        underflow3.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        underflow24.addSuppressed((java.lang.Throwable) overflow38);
        underflow16.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        underflow24.addSuppressed((java.lang.Throwable) overflow49);
        underflow3.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        overflow67.addSuppressed((java.lang.Throwable) overflow72);
        overflow63.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray77 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow72.getSuppressed();
        underflow3.addSuppressed((java.lang.Throwable) overflow72);
        underflow0.addSuppressed((java.lang.Throwable) underflow3);
        java.lang.String str81 = underflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Underflow" + "'", str81, "DataStructures.Underflow");
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray23 = underflow10.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        overflow31.addSuppressed((java.lang.Throwable) underflow43);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow43.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray59 = underflow43.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray61 = overflow25.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow62.addSuppressed((java.lang.Throwable) overflow74);
        overflow25.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray80 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow25.getSuppressed();
        java.lang.String str82 = overflow25.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DataStructures.Overflow" + "'", str82, "DataStructures.Overflow");
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.top();
        stackAr13.makeEmpty();
        java.lang.Object obj16 = stackAr13.topAndPop();
        java.lang.Object obj17 = stackAr13.topAndPop();
        boolean boolean18 = stackAr13.isEmpty();
        stackAr13.makeEmpty();
        boolean boolean20 = stackAr13.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean20);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) (short) -1);
        java.lang.Object obj12 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (short) -1 + "'", obj12, (short) -1);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        stackAr1.makeEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray37 = overflow29.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow29);
        overflow10.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Class<?> wildcardClass40 = overflow29.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow29);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        stackAr5.makeEmpty();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        stackAr5.makeEmpty();
        boolean boolean11 = stackAr5.isFull();
        stackAr5.makeEmpty();
        boolean boolean13 = stackAr5.isEmpty();
        stackAr1.push((java.lang.Object) stackAr5);
        stackAr5.makeEmpty();
        boolean boolean16 = stackAr5.isEmpty();
        DataStructures.StackAr stackAr18 = new DataStructures.StackAr(0);
        java.lang.Object obj19 = stackAr18.top();
        stackAr18.makeEmpty();
        boolean boolean21 = stackAr18.isFull();
        stackAr18.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr5.push((java.lang.Object) stackAr18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(0);
        boolean boolean13 = stackAr12.isFull();
        java.lang.Object obj14 = stackAr12.top();
        java.lang.Object obj15 = stackAr12.topAndPop();
        java.lang.Object obj16 = stackAr12.top();
        java.lang.Object obj17 = stackAr12.top();
        boolean boolean18 = stackAr12.isEmpty();
        java.lang.Object obj19 = stackAr12.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj19);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr7.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr7.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        overflow16.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray38 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        underflow41.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray54 = underflow41.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        underflow41.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        overflow65.addSuppressed((java.lang.Throwable) overflow70);
        overflow61.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        overflow79.addSuppressed((java.lang.Throwable) overflow84);
        overflow75.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow90);
        overflow75.addSuppressed((java.lang.Throwable) overflow90);
        overflow61.addSuppressed((java.lang.Throwable) overflow75);
        overflow56.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray95 = overflow56.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.String str97 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Overflow" + "'", str97, "DataStructures.Overflow");
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        stackAr1.pop();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = underflow18.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) underflow30);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        underflow34.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) underflow51);
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        underflow40.addSuppressed((java.lang.Throwable) underflow42);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        overflow56.addSuppressed((java.lang.Throwable) overflow61);
        underflow42.addSuppressed((java.lang.Throwable) overflow56);
        underflow34.addSuppressed((java.lang.Throwable) underflow42);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow74);
        underflow42.addSuppressed((java.lang.Throwable) overflow67);
        underflow21.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow85.getSuppressed();
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow91);
        overflow85.addSuppressed((java.lang.Throwable) overflow90);
        overflow81.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray95 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray96 = overflow90.getSuppressed();
        underflow21.addSuppressed((java.lang.Throwable) overflow90);
        underflow18.addSuppressed((java.lang.Throwable) underflow21);
        stackAr1.push((java.lang.Object) underflow18);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr7.makeEmpty();
        java.lang.Class<?> wildcardClass17 = stackAr7.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) underflow24);
        underflow15.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray28 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        java.lang.String str32 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = obj5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        java.lang.Object obj13 = stackAr1.top();
        boolean boolean14 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow9.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) underflow52);
        underflow43.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray56 = overflow48.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow48);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray59 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow38.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable throwable62 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow5.addSuppressed(throwable62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Class<?> wildcardClass13 = overflow10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow21);
        underflow12.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray25 = overflow17.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.String str27 = overflow17.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DataStructures.Overflow" + "'", str27, "DataStructures.Overflow");
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        stackAr8.makeEmpty();
        java.lang.Object obj16 = stackAr8.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr6.isEmpty();
        java.lang.Object obj12 = stackAr6.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = stackAr6.topAndPop();
        java.lang.Object obj11 = stackAr6.top();
        boolean boolean12 = stackAr6.isFull();
        boolean boolean13 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) boolean13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray54 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow34.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow65);
        overflow56.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) underflow81);
        underflow72.addSuppressed((java.lang.Throwable) overflow77);
        underflow70.addSuppressed((java.lang.Throwable) underflow72);
        overflow65.addSuppressed((java.lang.Throwable) underflow72);
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        underflow72.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray89 = underflow87.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) underflow87);
        DataStructures.Underflow underflow91 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray92 = underflow91.getSuppressed();
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        DataStructures.Overflow overflow94 = new DataStructures.Overflow();
        overflow93.addSuppressed((java.lang.Throwable) overflow94);
        underflow91.addSuppressed((java.lang.Throwable) overflow94);
        java.lang.Throwable[] throwableArray97 = overflow94.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow94);
        java.lang.Class<?> wildcardClass99 = overflow34.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray54 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow34.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow65);
        overflow56.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) underflow81);
        underflow72.addSuppressed((java.lang.Throwable) overflow77);
        underflow70.addSuppressed((java.lang.Throwable) underflow72);
        overflow65.addSuppressed((java.lang.Throwable) underflow72);
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        underflow72.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray89 = underflow87.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray91 = overflow34.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) underflow47);
        underflow21.addSuppressed((java.lang.Throwable) underflow47);
        java.lang.Throwable[] throwableArray62 = underflow21.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) underflow21);
        java.lang.Throwable[] throwableArray64 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow0.getSuppressed();
        java.lang.String str67 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Overflow" + "'", str67, "DataStructures.Overflow");
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow1.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow6.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow1.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.String str20 = overflow13.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 0 + "'", obj5, 0);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow26.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        overflow42.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow56.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray66 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow56.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow68.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray75 = overflow56.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.top();
        DataStructures.StackAr stackAr16 = new DataStructures.StackAr(0);
        java.lang.Object obj17 = stackAr16.topAndPop();
        java.lang.Object obj18 = stackAr16.top();
        java.lang.Object obj19 = stackAr16.top();
        java.lang.Object obj20 = stackAr16.top();
        java.lang.Object obj21 = stackAr16.top();
        java.lang.Object obj22 = stackAr16.topAndPop();
        boolean boolean23 = stackAr16.isEmpty();
        stackAr16.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.topAndPop();
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isFull();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow32);
        overflow15.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        overflow15.addSuppressed((java.lang.Throwable) underflow37);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        underflow61.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) underflow78);
        underflow69.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray82 = overflow74.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow74);
        overflow15.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray85 = overflow74.getSuppressed();
        java.lang.Class<?> wildcardClass86 = overflow74.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass86);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray60 = overflow15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = underflow0.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = underflow26.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) overflow41);
        underflow20.addSuppressed((java.lang.Throwable) overflow41);
        underflow0.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray47 = underflow0.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow65);
        overflow48.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray70 = overflow48.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray72 = underflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray27 = underflow23.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.String str29 = overflow9.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DataStructures.Overflow" + "'", str29, "DataStructures.Overflow");
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        overflow62.addSuppressed((java.lang.Throwable) overflow67);
        overflow58.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow58.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow79);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(100);
        stackAr9.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        java.lang.Object obj15 = stackAr9.topAndPop();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isEmpty();
        java.lang.Object obj18 = stackAr9.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 8L + "'", obj13, 8L);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 8L + "'", obj14, 8L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '#');
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        overflow4.addSuppressed((java.lang.Throwable) underflow16);
        java.lang.Throwable[] throwableArray18 = underflow16.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        underflow16.addSuppressed((java.lang.Throwable) overflow26);
        underflow2.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        overflow37.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow51.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        overflow62.addSuppressed((java.lang.Throwable) overflow67);
        overflow58.addSuppressed((java.lang.Throwable) overflow67);
        overflow51.addSuppressed((java.lang.Throwable) overflow67);
        underflow16.addSuppressed((java.lang.Throwable) overflow67);
        stackAr1.push((java.lang.Object) overflow67);
        java.lang.Object obj75 = stackAr1.top();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "DataStructures.Overflow");
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(5);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.push((java.lang.Object) (-5.4d));
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(3);
        java.lang.Object obj11 = stackAr10.topAndPop();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        boolean boolean15 = stackAr13.isFull();
        stackAr10.push((java.lang.Object) stackAr13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        overflow26.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        underflow33.addSuppressed((java.lang.Throwable) underflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        underflow54.addSuppressed((java.lang.Throwable) underflow56);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        overflow70.addSuppressed((java.lang.Throwable) overflow75);
        underflow56.addSuppressed((java.lang.Throwable) overflow70);
        overflow51.addSuppressed((java.lang.Throwable) overflow70);
        underflow33.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray82 = underflow33.getSuppressed();
        stackAr10.push((java.lang.Object) underflow33);
        java.lang.Throwable[] throwableArray84 = underflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) underflow33);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray21 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass22 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.topAndPop();
        java.lang.Object obj9 = stackAr4.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = null;
        stackAr1.push(obj7);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.topAndPop();
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Object obj17 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean14 = stackAr1.isFull();
        boolean boolean15 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        underflow9.addSuppressed((java.lang.Throwable) underflow11);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow11.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray35 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow25.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow25);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow29);
        java.lang.Throwable[] throwableArray32 = underflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        underflow29.addSuppressed((java.lang.Throwable) overflow33);
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray40 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray28 = underflow12.getSuppressed();
        java.lang.Class<?> wildcardClass29 = throwableArray28.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Class<?> wildcardClass54 = overflow34.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        java.lang.Object obj2 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(3);
        java.lang.Object obj8 = stackAr7.topAndPop();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        java.lang.Object obj11 = stackAr10.topAndPop();
        boolean boolean12 = stackAr10.isFull();
        stackAr7.push((java.lang.Object) stackAr10);
        java.lang.Object obj14 = stackAr7.topAndPop();
        boolean boolean15 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) (short) -1);
        java.lang.Object obj18 = stackAr7.top();
        stackAr1.push((java.lang.Object) stackAr7);
        DataStructures.StackAr stackAr21 = new DataStructures.StackAr(0);
        java.lang.Object obj22 = stackAr21.top();
        boolean boolean23 = stackAr21.isFull();
        boolean boolean24 = stackAr21.isFull();
        java.lang.Object obj25 = stackAr21.topAndPop();
        stackAr7.push((java.lang.Object) stackAr21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (short) -1 + "'", obj18, (short) -1);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj7 = stackAr6.top();
        stackAr6.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        stackAr8.makeEmpty();
        boolean boolean16 = stackAr8.isEmpty();
        boolean boolean17 = stackAr8.isFull();
        stackAr8.makeEmpty();
        stackAr8.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        DataStructures.Underflow underflow5 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray6 = underflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        underflow5.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        underflow11.addSuppressed((java.lang.Throwable) underflow13);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow32);
        underflow13.addSuppressed((java.lang.Throwable) overflow27);
        underflow5.addSuppressed((java.lang.Throwable) underflow13);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        underflow13.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray51 = overflow38.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray65 = underflow52.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        underflow52.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray74 = overflow67.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        DataStructures.Underflow underflow84 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray85 = underflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow87);
        underflow84.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray90 = overflow87.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow87);
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        overflow92.addSuppressed((java.lang.Throwable) overflow93);
        overflow87.addSuppressed((java.lang.Throwable) overflow92);
        overflow75.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray97 = overflow75.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow75);
        stackAr1.push((java.lang.Object) overflow67);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) underflow37);
        underflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        underflow41.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        underflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) underflow63);
        underflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) underflow54);
        underflow28.addSuppressed((java.lang.Throwable) underflow54);
        overflow23.addSuppressed((java.lang.Throwable) underflow54);
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        underflow72.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Underflow underflow79 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray80 = underflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) underflow79);
        underflow70.addSuppressed((java.lang.Throwable) underflow79);
        java.lang.Throwable[] throwableArray83 = underflow70.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow70);
        java.lang.String str85 = overflow23.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DataStructures.Overflow" + "'", str85, "DataStructures.Overflow");
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = underflow22.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        overflow25.addSuppressed((java.lang.Throwable) underflow37);
        java.lang.Throwable[] throwableArray39 = underflow37.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow37.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray57 = underflow37.getSuppressed();
        java.lang.Throwable[] throwableArray58 = underflow37.getSuppressed();
        java.lang.Throwable[] throwableArray59 = underflow37.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow37.addSuppressed((java.lang.Throwable) overflow60);
        underflow22.addSuppressed((java.lang.Throwable) underflow37);
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        overflow5.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.String str67 = underflow22.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Underflow" + "'", str67, "DataStructures.Underflow");
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray14 = underflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow12.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray32 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray34 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray35 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray36 = underflow12.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) underflow58);
        java.lang.Throwable[] throwableArray62 = underflow58.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) underflow58);
        underflow12.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray65 = overflow37.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) underflow60);
        underflow51.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) overflow69);
        overflow56.addSuppressed((java.lang.Throwable) underflow64);
        underflow38.addSuppressed((java.lang.Throwable) underflow64);
        overflow29.addSuppressed((java.lang.Throwable) underflow64);
        overflow0.addSuppressed((java.lang.Throwable) underflow64);
        java.lang.Throwable[] throwableArray81 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        stackAr8.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(10);
        boolean boolean14 = stackAr13.isEmpty();
        DataStructures.StackAr stackAr16 = new DataStructures.StackAr(0);
        java.lang.Object obj17 = stackAr16.topAndPop();
        java.lang.Object obj18 = stackAr16.top();
        stackAr13.push((java.lang.Object) stackAr16);
        java.lang.Object obj20 = stackAr16.top();
        java.lang.Object obj21 = stackAr16.topAndPop();
        stackAr8.push((java.lang.Object) stackAr16);
        boolean boolean23 = stackAr8.isFull();
        java.lang.Object obj24 = stackAr8.topAndPop();
        stackAr8.makeEmpty();
        stackAr8.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass4 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = obj9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow82);
        overflow73.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow88);
        overflow73.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray91 = overflow88.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.String str93 = overflow88.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "DataStructures.Overflow" + "'", str93, "DataStructures.Overflow");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        java.lang.Object obj9 = stackAr4.top();
        java.lang.Object obj10 = stackAr4.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        overflow18.addSuppressed((java.lang.Throwable) underflow30);
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray33 = overflow18.getSuppressed();
        java.lang.String str34 = overflow18.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow8.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) underflow24);
        overflow17.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        underflow24.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow45.addSuppressed((java.lang.Throwable) underflow47);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        overflow61.addSuppressed((java.lang.Throwable) overflow66);
        underflow47.addSuppressed((java.lang.Throwable) overflow61);
        overflow42.addSuppressed((java.lang.Throwable) overflow61);
        underflow24.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray73 = underflow24.getSuppressed();
        stackAr1.push((java.lang.Object) underflow24);
        DataStructures.Underflow underflow75 = new DataStructures.Underflow();
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        underflow75.addSuppressed((java.lang.Throwable) underflow76);
        java.lang.Throwable[] throwableArray79 = underflow75.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow80.getSuppressed();
        underflow75.addSuppressed((java.lang.Throwable) overflow80);
        underflow24.addSuppressed((java.lang.Throwable) underflow75);
        java.lang.String str89 = underflow75.toString();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "DataStructures.Underflow" + "'", str89, "DataStructures.Underflow");
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        overflow3.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow17.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Class<?> wildcardClass25 = overflow3.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(1);
        stackAr7.makeEmpty();
        boolean boolean9 = stackAr7.isEmpty();
        java.lang.Object obj10 = stackAr7.top();
        boolean boolean11 = stackAr7.isEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        java.lang.Object obj15 = stackAr13.top();
        stackAr13.makeEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        boolean boolean18 = stackAr13.isEmpty();
        stackAr13.makeEmpty();
        stackAr7.push((java.lang.Object) stackAr13);
        java.lang.Object obj21 = stackAr7.top();
        stackAr1.push(obj21);
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        stackAr7.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.makeEmpty();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr20 = new DataStructures.StackAr(0);
        java.lang.Object obj21 = stackAr20.top();
        boolean boolean22 = stackAr20.isFull();
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = stackAr20.topAndPop();
        stackAr20.makeEmpty();
        boolean boolean26 = stackAr20.isEmpty();
        stackAr1.push((java.lang.Object) boolean26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.topAndPop();
        java.lang.Object obj8 = stackAr6.top();
        stackAr6.makeEmpty();
        boolean boolean10 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.isFull();
        boolean boolean12 = stackAr6.isFull();
        boolean boolean13 = stackAr6.isFull();
        boolean boolean14 = stackAr6.isFull();
        java.lang.Object obj15 = stackAr6.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr6);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        underflow52.addSuppressed((java.lang.Throwable) overflow55);
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow39.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        overflow64.addSuppressed((java.lang.Throwable) overflow69);
        overflow60.addSuppressed((java.lang.Throwable) overflow69);
        overflow55.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Underflow underflow75 = new DataStructures.Underflow();
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        underflow75.addSuppressed((java.lang.Throwable) underflow76);
        java.lang.Throwable[] throwableArray79 = underflow75.getSuppressed();
        java.lang.Throwable[] throwableArray80 = underflow75.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) underflow75);
        java.lang.Throwable[] throwableArray82 = underflow75.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow75);
        java.lang.Throwable[] throwableArray84 = overflow27.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow27);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.topAndPop();
        java.lang.Object obj15 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(3);
        java.lang.Object obj7 = stackAr6.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        boolean boolean11 = stackAr9.isFull();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr6.topAndPop();
        boolean boolean14 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) (short) -1);
        java.lang.Object obj17 = stackAr6.top();
        stackAr1.push(obj17);
        boolean boolean19 = stackAr1.isFull();
        stackAr1.pop();
        java.lang.Object obj21 = stackAr1.topAndPop();
        boolean boolean22 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (short) -1 + "'", obj17, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj6 = stackAr5.topAndPop();
        java.lang.Object obj7 = stackAr5.top();
        stackAr5.makeEmpty();
        boolean boolean9 = stackAr5.isEmpty();
        stackAr5.makeEmpty();
        java.lang.Class<?> wildcardClass11 = stackAr5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        overflow18.addSuppressed((java.lang.Throwable) overflow27);
        overflow0.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        underflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) underflow62);
        underflow53.addSuppressed((java.lang.Throwable) overflow58);
        underflow51.addSuppressed((java.lang.Throwable) underflow53);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        overflow67.addSuppressed((java.lang.Throwable) overflow72);
        underflow53.addSuppressed((java.lang.Throwable) overflow67);
        overflow48.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray78 = overflow67.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow67);
        overflow0.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray81 = overflow36.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow82.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.String str87 = overflow82.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Overflow" + "'", str87, "DataStructures.Overflow");
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str31 = overflow1.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        stackAr1.pop();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        boolean boolean10 = stackAr8.isEmpty();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean12 = stackAr8.isFull();
        java.lang.Object obj13 = stackAr8.topAndPop();
        java.lang.Object obj14 = stackAr8.top();
        boolean boolean15 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) boolean15);
        boolean boolean17 = stackAr1.isFull();
        java.lang.Object obj18 = stackAr1.top();
        java.lang.Object obj19 = stackAr1.top();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + true + "'", obj18, true);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + true + "'", obj19, true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        boolean boolean15 = stackAr13.isEmpty();
        boolean boolean16 = stackAr13.isEmpty();
        boolean boolean17 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj19 = stackAr13.top();
        java.lang.Object obj20 = stackAr13.top();
        boolean boolean21 = stackAr13.isEmpty();
        java.lang.Object obj22 = stackAr13.top();
        java.lang.Object obj23 = stackAr13.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj23);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(10);
        boolean boolean9 = stackAr8.isEmpty();
        java.lang.Object obj10 = stackAr8.top();
        java.lang.Object obj11 = stackAr8.top();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        boolean boolean14 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj16 = stackAr13.topAndPop();
        stackAr13.makeEmpty();
        boolean boolean18 = stackAr13.isFull();
        boolean boolean19 = stackAr13.isEmpty();
        java.lang.Object obj20 = stackAr13.topAndPop();
        java.lang.Object obj21 = stackAr13.top();
        stackAr8.push((java.lang.Object) stackAr13);
        boolean boolean23 = stackAr8.isFull();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj25 = stackAr8.top();
        java.lang.Object obj26 = stackAr8.top();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow14.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        underflow30.addSuppressed((java.lang.Throwable) overflow35);
        underflow28.addSuppressed((java.lang.Throwable) underflow30);
        overflow23.addSuppressed((java.lang.Throwable) underflow30);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        underflow30.addSuppressed((java.lang.Throwable) underflow45);
        underflow0.addSuppressed((java.lang.Throwable) underflow30);
        java.lang.Throwable[] throwableArray48 = underflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.push((java.lang.Object) (-6.9d));
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-6.9d) + "'", obj10, (-6.9d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (-6.9d) + "'", obj12, (-6.9d));
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(0);
        stackAr14.makeEmpty();
        java.lang.Object obj16 = stackAr14.topAndPop();
        boolean boolean17 = stackAr14.isEmpty();
        boolean boolean18 = stackAr14.isFull();
        java.lang.Object obj19 = stackAr14.topAndPop();
        java.lang.Object obj20 = stackAr14.top();
        stackAr1.push(obj20);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass14 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray21 = overflow14.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow29);
        overflow14.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray33 = overflow14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        stackAr1.pop();
        java.lang.Object obj19 = stackAr1.top();
        java.lang.Object obj20 = null;
        stackAr1.push(obj20);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        underflow24.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        underflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        overflow55.addSuppressed((java.lang.Throwable) overflow60);
        underflow24.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray65 = overflow55.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        underflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        underflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray88 = underflow87.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) underflow87);
        underflow78.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray91 = overflow83.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray93 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow83.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow55);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) underflow34);
        underflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow23.addSuppressed((java.lang.Throwable) underflow25);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow44);
        underflow25.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray49 = underflow25.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow25);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        underflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray77 = overflow69.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow69);
        overflow16.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.String str80 = overflow59.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            underflow12.addSuppressed(throwable14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray21);
        boolean boolean23 = stackAr1.isFull();
        java.lang.Object obj24 = stackAr1.top();
        java.lang.Object obj25 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj15 = stackAr1.top();
        java.lang.Object obj16 = stackAr1.top();
        boolean boolean17 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        stackAr4.makeEmpty();
        boolean boolean10 = stackAr4.isEmpty();
        java.lang.Object obj11 = stackAr4.topAndPop();
        stackAr4.makeEmpty();
        java.lang.Object obj13 = stackAr4.top();
        stackAr4.makeEmpty();
        DataStructures.StackAr stackAr16 = new DataStructures.StackAr(0);
        boolean boolean17 = stackAr16.isFull();
        stackAr16.makeEmpty();
        java.lang.Object obj19 = stackAr16.topAndPop();
        boolean boolean20 = stackAr16.isFull();
        java.lang.Object obj21 = stackAr16.top();
        boolean boolean22 = stackAr16.isEmpty();
        java.lang.Object obj23 = stackAr16.topAndPop();
        java.lang.Object obj24 = stackAr16.topAndPop();
        stackAr16.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr4.push((java.lang.Object) stackAr16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow20.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow20);
        stackAr1.push((java.lang.Object) overflow20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(1);
        stackAr13.push((java.lang.Object) 1.0f);
        java.lang.Object obj16 = stackAr13.topAndPop();
        boolean boolean17 = stackAr13.isFull();
        java.lang.Object obj18 = stackAr13.topAndPop();
        stackAr13.makeEmpty();
        boolean boolean20 = stackAr13.isEmpty();
        java.lang.Class<?> wildcardClass21 = stackAr13.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass21);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1.0f + "'", obj16, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        DataStructures.Underflow underflow3 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray4 = underflow3.getSuppressed();
        DataStructures.Underflow underflow5 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray6 = underflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        underflow5.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) underflow12);
        underflow3.addSuppressed((java.lang.Throwable) overflow8);
        underflow1.addSuppressed((java.lang.Throwable) underflow3);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow17.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        underflow3.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray27 = underflow3.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) underflow3);
        java.lang.Throwable[] throwableArray29 = underflow3.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        underflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        overflow30.addSuppressed((java.lang.Throwable) underflow42);
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) underflow53);
        underflow44.addSuppressed((java.lang.Throwable) overflow49);
        underflow42.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray68 = underflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        underflow67.addSuppressed((java.lang.Throwable) overflow70);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow58.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray75 = overflow70.getSuppressed();
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        underflow76.addSuppressed((java.lang.Throwable) underflow77);
        java.lang.Throwable[] throwableArray80 = underflow76.getSuppressed();
        java.lang.Throwable[] throwableArray81 = underflow76.getSuppressed();
        java.lang.Throwable[] throwableArray82 = underflow76.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) underflow76);
        java.lang.Throwable[] throwableArray84 = overflow70.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow70);
        underflow3.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.String str87 = underflow3.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Underflow" + "'", str87, "DataStructures.Underflow");
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        overflow19.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Class<?> wildcardClass39 = overflow31.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray31 = underflow18.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        underflow18.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        underflow41.addSuppressed((java.lang.Throwable) overflow46);
        underflow39.addSuppressed((java.lang.Throwable) underflow41);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        overflow55.addSuppressed((java.lang.Throwable) overflow60);
        underflow41.addSuppressed((java.lang.Throwable) overflow55);
        overflow13.addSuppressed((java.lang.Throwable) underflow41);
        stackAr1.push((java.lang.Object) underflow41);
        java.lang.Object obj67 = stackAr1.topAndPop();
        java.lang.Object obj68 = stackAr1.top();
        boolean boolean69 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "DataStructures.Underflow");
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        stackAr5.makeEmpty();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        stackAr5.makeEmpty();
        boolean boolean11 = stackAr5.isFull();
        stackAr5.makeEmpty();
        boolean boolean13 = stackAr5.isEmpty();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj15 = stackAr5.top();
        java.lang.Object obj16 = stackAr5.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.Throwable[] throwableArray56 = underflow53.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        underflow53.addSuppressed((java.lang.Throwable) overflow57);
        underflow8.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.String str64 = underflow53.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DataStructures.Underflow" + "'", str64, "DataStructures.Underflow");
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr((int) (byte) 100);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj8 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(0);
        java.lang.Object obj16 = stackAr15.top();
        boolean boolean17 = stackAr15.isFull();
        boolean boolean18 = stackAr15.isFull();
        stackAr10.push((java.lang.Object) stackAr15);
        java.lang.Object obj20 = stackAr10.topAndPop();
        boolean boolean21 = stackAr10.isEmpty();
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj23 = stackAr10.top();
        java.lang.Object obj24 = stackAr10.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow1.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        overflow5.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray52 = overflow44.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow44);
        overflow22.addSuppressed((java.lang.Throwable) overflow34);
        overflow1.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray56 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow34.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Class<?> wildcardClass73 = overflow66.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = obj6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow13);
        underflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray17 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        stackAr1.push((java.lang.Object) throwableArray17);
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr23 = new DataStructures.StackAr(0);
        java.lang.Object obj24 = stackAr23.topAndPop();
        boolean boolean25 = stackAr23.isEmpty();
        boolean boolean26 = stackAr23.isEmpty();
        boolean boolean27 = stackAr23.isFull();
        java.lang.Object obj28 = stackAr23.topAndPop();
        boolean boolean29 = stackAr23.isFull();
        java.lang.Object obj30 = stackAr23.top();
        stackAr1.push((java.lang.Object) stackAr23);
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 100.0d);
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) underflow16);
        underflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow29);
        underflow20.addSuppressed((java.lang.Throwable) overflow25);
        overflow12.addSuppressed((java.lang.Throwable) underflow20);
        java.lang.Throwable[] throwableArray34 = underflow20.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray34);
        java.lang.Object obj36 = stackAr1.topAndPop();
        boolean boolean37 = stackAr1.isFull();
        java.lang.Object obj38 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0d + "'", obj6, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        overflow19.addSuppressed((java.lang.Throwable) overflow24);
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow7.getSuppressed();
        stackAr1.push((java.lang.Object) overflow7);
        java.lang.Throwable throwable32 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow7.addSuppressed(throwable32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        java.lang.Object obj30 = stackAr1.topAndPop();
        java.lang.Object obj31 = stackAr1.top();
        boolean boolean32 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr8.isFull();
        java.lang.Object obj16 = stackAr8.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(0);
        java.lang.Object obj16 = stackAr15.top();
        boolean boolean17 = stackAr15.isFull();
        boolean boolean18 = stackAr15.isFull();
        stackAr10.push((java.lang.Object) stackAr15);
        boolean boolean20 = stackAr10.isEmpty();
        java.lang.Object obj21 = stackAr10.top();
        stackAr1.push((java.lang.Object) stackAr10);
        boolean boolean23 = stackAr10.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray14 = underflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow12.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow48);
        overflow37.addSuppressed((java.lang.Throwable) overflow48);
        overflow22.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.String str55 = overflow22.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow0.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        overflow30.addSuppressed((java.lang.Throwable) overflow35);
        overflow18.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray65 = overflow57.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        overflow0.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray69 = overflow35.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow9.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        overflow9.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Class<?> wildcardClass26 = overflow9.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Class<?> wildcardClass4 = underflow1.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        overflow62.addSuppressed((java.lang.Throwable) overflow67);
        overflow58.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow58.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray74 = underflow31.getSuppressed();
        java.lang.String str75 = underflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DataStructures.Underflow" + "'", str75, "DataStructures.Underflow");
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray26 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        overflow29.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow50.addSuppressed((java.lang.Throwable) overflow59);
        overflow43.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow43.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow16.getSuppressed();
        java.lang.String str68 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow21);
        underflow12.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray25 = overflow17.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray27 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow17.getSuppressed();
        java.lang.String str31 = overflow17.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(10);
        boolean boolean9 = stackAr8.isEmpty();
        java.lang.Object obj10 = stackAr8.top();
        java.lang.Object obj11 = stackAr8.top();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        boolean boolean14 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj16 = stackAr13.topAndPop();
        stackAr13.makeEmpty();
        boolean boolean18 = stackAr13.isFull();
        boolean boolean19 = stackAr13.isEmpty();
        java.lang.Object obj20 = stackAr13.topAndPop();
        java.lang.Object obj21 = stackAr13.top();
        stackAr8.push((java.lang.Object) stackAr13);
        boolean boolean23 = stackAr8.isFull();
        java.lang.Object obj24 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Class<?> wildcardClass26 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        stackAr1.pop();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        stackAr9.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        stackAr1.pop();
        java.lang.Object obj19 = stackAr1.top();
        java.lang.Object obj20 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        java.lang.Throwable[] throwableArray33 = underflow0.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow57);
        overflow41.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        overflow66.addSuppressed((java.lang.Throwable) overflow71);
        overflow62.addSuppressed((java.lang.Throwable) overflow71);
        overflow57.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        underflow77.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        DataStructures.Underflow underflow84 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray85 = underflow84.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) underflow84);
        overflow71.addSuppressed((java.lang.Throwable) underflow84);
        underflow0.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.String str89 = underflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "DataStructures.Underflow" + "'", str89, "DataStructures.Underflow");
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Class<?> wildcardClass9 = overflow5.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(3);
        java.lang.Object obj8 = stackAr7.topAndPop();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        java.lang.Object obj11 = stackAr10.topAndPop();
        boolean boolean12 = stackAr10.isFull();
        stackAr7.push((java.lang.Object) stackAr10);
        java.lang.Object obj14 = stackAr7.topAndPop();
        boolean boolean15 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) (short) -1);
        java.lang.Object obj18 = stackAr7.top();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr7.pop();
        DataStructures.StackAr stackAr22 = new DataStructures.StackAr(0);
        stackAr22.makeEmpty();
        stackAr22.makeEmpty();
        java.lang.Object obj25 = stackAr22.top();
        stackAr7.push(obj25);
        boolean boolean27 = stackAr7.isEmpty();
        java.lang.Class<?> wildcardClass28 = stackAr7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (short) -1 + "'", obj18, (short) -1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        stackAr1.pop();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        underflow18.addSuppressed((java.lang.Throwable) underflow19);
        java.lang.Throwable[] throwableArray22 = underflow18.getSuppressed();
        java.lang.Throwable[] throwableArray23 = underflow18.getSuppressed();
        java.lang.Throwable[] throwableArray24 = underflow18.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) underflow18);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) underflow27);
        java.lang.Throwable[] throwableArray30 = underflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        underflow18.addSuppressed((java.lang.Throwable) overflow31);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(10);
        boolean boolean13 = stackAr12.isEmpty();
        java.lang.Object obj14 = stackAr12.top();
        java.lang.Object obj15 = stackAr12.top();
        boolean boolean16 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.isEmpty();
        stackAr12.push((java.lang.Object) (-2));
        java.lang.Object obj20 = stackAr12.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr12);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-2) + "'", obj20, (-2));
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        underflow9.addSuppressed((java.lang.Throwable) underflow11);
        java.lang.Throwable[] throwableArray25 = underflow11.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) underflow39);
        underflow11.addSuppressed((java.lang.Throwable) overflow31);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        boolean boolean11 = stackAr10.isFull();
        java.lang.Object obj12 = stackAr10.top();
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isFull();
        boolean boolean15 = stackAr10.isEmpty();
        java.lang.Object obj16 = stackAr10.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow2.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow43.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Underflow underflow59 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray60 = underflow59.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        underflow61.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) underflow68);
        underflow59.addSuppressed((java.lang.Throwable) overflow64);
        underflow57.addSuppressed((java.lang.Throwable) underflow59);
        overflow52.addSuppressed((java.lang.Throwable) underflow59);
        java.lang.Throwable[] throwableArray74 = underflow59.getSuppressed();
        underflow2.addSuppressed((java.lang.Throwable) underflow59);
        java.lang.Throwable[] throwableArray76 = underflow59.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        stackAr7.makeEmpty();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr7.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        underflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) underflow18);
        underflow9.addSuppressed((java.lang.Throwable) overflow14);
        underflow7.addSuppressed((java.lang.Throwable) underflow9);
        java.lang.Throwable[] throwableArray23 = underflow9.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        overflow24.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) underflow47);
        java.lang.Throwable[] throwableArray51 = underflow47.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) underflow47);
        underflow9.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow54.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray68 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow54.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow54);
        overflow0.addSuppressed((java.lang.Throwable) overflow54);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = underflow22.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        underflow22.addSuppressed((java.lang.Throwable) overflow37);
        overflow0.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        overflow0.addSuppressed((java.lang.Throwable) underflow42);
        java.lang.Throwable[] throwableArray54 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass55 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr9.makeEmpty();
        boolean boolean13 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.isEmpty();
        java.lang.Object obj15 = stackAr9.top();
        boolean boolean16 = stackAr9.isFull();
        boolean boolean17 = stackAr9.isFull();
        boolean boolean18 = stackAr9.isFull();
        java.lang.Object obj19 = stackAr9.top();
        boolean boolean20 = stackAr9.isFull();
        boolean boolean21 = stackAr9.isEmpty();
        stackAr9.makeEmpty();
        java.lang.Object obj23 = stackAr9.top();
        boolean boolean24 = stackAr9.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow26.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        overflow42.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow56.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray66 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow56.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        overflow56.addSuppressed((java.lang.Throwable) overflow69);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        java.lang.Object obj7 = stackAr5.top();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        java.lang.Object obj10 = stackAr5.top();
        java.lang.Object obj11 = stackAr5.topAndPop();
        java.lang.Class<?> wildcardClass12 = stackAr5.getClass();
        stackAr1.push((java.lang.Object) wildcardClass12);
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        stackAr15.push((java.lang.Object) 0);
        java.lang.Object obj19 = stackAr15.top();
        stackAr15.pop();
        boolean boolean21 = stackAr15.isEmpty();
        stackAr1.push((java.lang.Object) boolean21);
        stackAr1.pop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + 0 + "'", obj19, 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr8.isFull();
        stackAr8.makeEmpty();
        stackAr8.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr8.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) underflow26);
        underflow0.addSuppressed((java.lang.Throwable) underflow26);
        java.lang.Throwable[] throwableArray41 = underflow26.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) underflow51);
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) underflow64);
        underflow55.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        underflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) underflow77);
        underflow68.addSuppressed((java.lang.Throwable) overflow73);
        overflow60.addSuppressed((java.lang.Throwable) underflow68);
        underflow42.addSuppressed((java.lang.Throwable) underflow68);
        underflow26.addSuppressed((java.lang.Throwable) underflow42);
        java.lang.Class<?> wildcardClass84 = underflow26.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        underflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray49 = overflow43.getSuppressed();
        java.lang.Class<?> wildcardClass50 = overflow43.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.push((java.lang.Object) (-6.9d));
        java.lang.Object obj10 = stackAr1.topAndPop();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-6.9d) + "'", obj10, (-6.9d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray22 = overflow17.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow40);
        overflow23.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray58 = underflow45.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        underflow45.addSuppressed((java.lang.Throwable) overflow60);
        overflow23.addSuppressed((java.lang.Throwable) underflow45);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        underflow69.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        DataStructures.Underflow underflow79 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray80 = underflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow82);
        underflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray85 = overflow82.getSuppressed();
        DataStructures.Underflow underflow86 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray87 = underflow86.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) underflow86);
        underflow77.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray90 = overflow82.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow82);
        overflow23.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray93 = overflow82.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow82);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = null;
        stackAr1.push(obj4);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        java.lang.Object obj5 = stackAr1.top();
        stackAr1.pop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 0 + "'", obj5, 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray26 = underflow13.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        underflow13.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        overflow34.addSuppressed((java.lang.Throwable) underflow46);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        underflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray62 = underflow46.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) underflow46);
        java.lang.Throwable[] throwableArray64 = overflow28.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow65.addSuppressed((java.lang.Throwable) overflow77);
        overflow28.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray83 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow28.getSuppressed();
        overflow1.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray86 = overflow28.getSuppressed();
        java.lang.Class<?> wildcardClass87 = overflow28.getClass();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow15.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray38 = overflow31.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray38);
        stackAr1.makeEmpty();
        java.lang.Object obj41 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(100);
        stackAr9.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        java.lang.Object obj15 = stackAr9.topAndPop();
        boolean boolean16 = stackAr9.isEmpty();
        stackAr9.makeEmpty();
        stackAr9.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 8L + "'", obj13, 8L);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 8L + "'", obj14, 8L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow13.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow44);
        underflow35.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray48 = underflow35.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        underflow35.addSuppressed((java.lang.Throwable) overflow50);
        overflow13.addSuppressed((java.lang.Throwable) underflow35);
        overflow5.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        overflow67.addSuppressed((java.lang.Throwable) overflow72);
        overflow56.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray77 = overflow72.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray79 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = underflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        overflow3.addSuppressed((java.lang.Throwable) underflow15);
        java.lang.Throwable[] throwableArray17 = underflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow15.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray35 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray36 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray37 = underflow15.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow15.addSuppressed((java.lang.Throwable) overflow38);
        underflow0.addSuppressed((java.lang.Throwable) underflow15);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        overflow66.addSuppressed((java.lang.Throwable) overflow71);
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        underflow78.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        DataStructures.Underflow underflow85 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray86 = underflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) underflow85);
        underflow76.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray89 = underflow76.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        underflow76.addSuppressed((java.lang.Throwable) overflow91);
        overflow54.addSuppressed((java.lang.Throwable) underflow76);
        java.lang.Throwable[] throwableArray96 = overflow54.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        underflow15.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray99 = overflow44.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray24 = underflow11.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = underflow11.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray40 = overflow34.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.String str42 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DataStructures.Overflow" + "'", str42, "DataStructures.Overflow");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(3);
        java.lang.Object obj6 = stackAr5.topAndPop();
        boolean boolean7 = stackAr5.isEmpty();
        stackAr5.push((java.lang.Object) 100.0d);
        java.lang.Object obj10 = stackAr5.topAndPop();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) underflow24);
        java.lang.Throwable[] throwableArray38 = underflow24.getSuppressed();
        stackAr5.push((java.lang.Object) throwableArray38);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj41 = stackAr5.top();
        java.lang.Object obj42 = stackAr5.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 100.0d + "'", obj10, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray26 = underflow13.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        underflow13.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        overflow34.addSuppressed((java.lang.Throwable) underflow46);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        underflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray62 = underflow46.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) underflow46);
        java.lang.Throwable[] throwableArray64 = overflow28.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow65.addSuppressed((java.lang.Throwable) overflow77);
        overflow28.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray83 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow28.getSuppressed();
        overflow1.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.String str86 = overflow1.toString();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "DataStructures.Overflow" + "'", str86, "DataStructures.Overflow");
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        underflow16.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        underflow37.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        overflow53.addSuppressed((java.lang.Throwable) overflow58);
        underflow39.addSuppressed((java.lang.Throwable) overflow53);
        overflow34.addSuppressed((java.lang.Throwable) overflow53);
        underflow16.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray65 = underflow16.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow82);
        overflow66.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray87 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow66.getSuppressed();
        underflow16.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray90 = overflow66.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) underflow40);
        java.lang.Throwable[] throwableArray44 = underflow40.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow40);
        underflow2.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        underflow64.addSuppressed((java.lang.Throwable) underflow65);
        overflow26.addSuppressed((java.lang.Throwable) underflow64);
        java.lang.Throwable[] throwableArray69 = underflow64.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) underflow49);
        underflow40.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray53 = overflow45.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray55 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray57 = overflow35.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow74);
        overflow63.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray80 = overflow74.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.String str88 = overflow35.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DataStructures.Overflow" + "'", str88, "DataStructures.Overflow");
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        java.lang.Throwable[] throwableArray18 = underflow15.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        java.lang.Throwable[] throwableArray47 = underflow33.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        overflow52.addSuppressed((java.lang.Throwable) overflow57);
        overflow48.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) underflow71);
        underflow62.addSuppressed((java.lang.Throwable) underflow71);
        java.lang.Throwable[] throwableArray75 = underflow71.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow71);
        underflow33.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray78 = overflow57.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.String str80 = overflow57.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow13.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow44);
        underflow35.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray48 = underflow35.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        underflow35.addSuppressed((java.lang.Throwable) overflow50);
        overflow13.addSuppressed((java.lang.Throwable) underflow35);
        overflow5.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray56 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow13.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        stackAr1.pop();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(1);
        boolean boolean9 = stackAr8.isFull();
        java.lang.Object obj10 = stackAr8.top();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) underflow38);
        underflow29.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray42 = overflow34.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        stackAr8.push((java.lang.Object) overflow15);
        stackAr1.push((java.lang.Object) overflow15);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow26);
        underflow17.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray30 = overflow22.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow33.addSuppressed((java.lang.Throwable) overflow47);
        overflow22.addSuppressed((java.lang.Throwable) overflow47);
        stackAr1.push((java.lang.Object) overflow22);
        java.lang.String str59 = overflow22.toString();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DataStructures.Overflow" + "'", str59, "DataStructures.Overflow");
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        overflow3.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        overflow33.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow49.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray56 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow49.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        underflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) underflow69);
        underflow60.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray73 = underflow60.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        underflow60.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow75.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        DataStructures.Underflow underflow85 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray86 = underflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow88);
        underflow85.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray91 = overflow88.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow88);
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        DataStructures.Overflow overflow94 = new DataStructures.Overflow();
        overflow93.addSuppressed((java.lang.Throwable) overflow94);
        overflow88.addSuppressed((java.lang.Throwable) overflow93);
        overflow75.addSuppressed((java.lang.Throwable) overflow93);
        overflow49.addSuppressed((java.lang.Throwable) overflow93);
        java.lang.String str99 = overflow49.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "DataStructures.Overflow" + "'", str99, "DataStructures.Overflow");
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        overflow30.addSuppressed((java.lang.Throwable) overflow35);
        underflow16.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray65 = overflow57.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray67 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow57.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray71 = overflow57.getSuppressed();
        underflow12.addSuppressed((java.lang.Throwable) overflow57);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Class<?> wildcardClass19 = overflow15.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow28.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        overflow53.addSuppressed((java.lang.Throwable) overflow58);
        overflow49.addSuppressed((java.lang.Throwable) overflow58);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        overflow16.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray65 = overflow16.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        java.lang.Object obj11 = stackAr9.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        stackAr1.push((java.lang.Object) (short) -1);
        boolean boolean7 = stackAr1.isFull();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.top();
        boolean boolean11 = stackAr9.isFull();
        boolean boolean12 = stackAr9.isFull();
        boolean boolean13 = stackAr9.isEmpty();
        java.lang.Object obj14 = stackAr9.top();
        stackAr9.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr9);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(6);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = obj11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow21.addSuppressed((java.lang.Throwable) overflow30);
        overflow14.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow52);
        overflow41.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray58 = overflow52.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) underflow78);
        underflow69.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray82 = underflow69.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        underflow69.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray88 = overflow84.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray90 = overflow64.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray92 = overflow52.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow52);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        overflow14.addSuppressed((java.lang.Throwable) overflow19);
        overflow10.addSuppressed((java.lang.Throwable) overflow19);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow19);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean14 = stackAr1.isFull();
        java.lang.Object obj15 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow21);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        overflow24.addSuppressed((java.lang.Throwable) underflow36);
        overflow17.addSuppressed((java.lang.Throwable) underflow36);
        java.lang.Throwable[] throwableArray39 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow17.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.String str42 = overflow17.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DataStructures.Overflow" + "'", str42, "DataStructures.Overflow");
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray14 = underflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow12.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray32 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = underflow12.getSuppressed();
        java.lang.Throwable[] throwableArray34 = underflow12.getSuppressed();
        java.lang.Class<?> wildcardClass35 = underflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) underflow40);
        java.lang.Throwable[] throwableArray44 = underflow40.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow40);
        underflow2.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray64 = overflow26.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.isEmpty();
        java.lang.Object obj14 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        stackAr1.pop();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.pop();
        stackAr1.makeEmpty();
        java.lang.Object obj18 = stackAr1.top();
        java.lang.Object obj19 = stackAr1.topAndPop();
        boolean boolean20 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.topAndPop();
        boolean boolean15 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow82);
        overflow73.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow88);
        overflow73.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray91 = overflow88.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray93 = overflow66.getSuppressed();
        java.lang.Class<?> wildcardClass94 = overflow66.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        java.lang.Object obj2 = stackAr1.top();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass4 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj7);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj7);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(10);
        boolean boolean7 = stackAr6.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        stackAr1.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.topAndPop();
        java.lang.Object obj18 = stackAr1.top();
        DataStructures.StackAr stackAr20 = new DataStructures.StackAr(1);
        stackAr20.makeEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        java.lang.Object obj23 = stackAr20.top();
        boolean boolean24 = stackAr20.isEmpty();
        DataStructures.StackAr stackAr26 = new DataStructures.StackAr(0);
        java.lang.Object obj27 = stackAr26.topAndPop();
        java.lang.Object obj28 = stackAr26.top();
        stackAr26.makeEmpty();
        boolean boolean30 = stackAr26.isEmpty();
        boolean boolean31 = stackAr26.isEmpty();
        stackAr26.makeEmpty();
        stackAr20.push((java.lang.Object) stackAr26);
        stackAr20.makeEmpty();
        boolean boolean35 = stackAr20.isEmpty();
        java.lang.Object obj36 = stackAr20.topAndPop();
        stackAr1.push(obj36);
        boolean boolean38 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + 0 + "'", obj18, 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        boolean boolean11 = stackAr10.isFull();
        stackAr10.makeEmpty();
        java.lang.Object obj13 = stackAr10.topAndPop();
        stackAr10.makeEmpty();
        boolean boolean15 = stackAr10.isFull();
        java.lang.Object obj16 = stackAr10.top();
        java.lang.Object obj17 = stackAr10.topAndPop();
        java.lang.Object obj18 = stackAr10.topAndPop();
        stackAr1.push((java.lang.Object) stackAr10);
        DataStructures.StackAr stackAr21 = new DataStructures.StackAr(1);
        java.lang.Object obj22 = stackAr21.top();
        boolean boolean23 = stackAr21.isFull();
        java.lang.Object obj24 = stackAr21.top();
        java.lang.Object obj25 = stackAr21.topAndPop();
        java.lang.Object obj26 = stackAr21.top();
        java.lang.Object obj27 = stackAr21.top();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray51 = underflow38.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        underflow38.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Underflow underflow59 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray60 = underflow59.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow70);
        underflow61.addSuppressed((java.lang.Throwable) overflow66);
        underflow59.addSuppressed((java.lang.Throwable) underflow61);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        overflow75.addSuppressed((java.lang.Throwable) overflow80);
        underflow61.addSuppressed((java.lang.Throwable) overflow75);
        overflow33.addSuppressed((java.lang.Throwable) underflow61);
        stackAr21.push((java.lang.Object) underflow61);
        java.lang.Object obj87 = stackAr21.topAndPop();
        java.lang.Object obj88 = stackAr21.top();
        java.lang.Object obj89 = stackAr21.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj89);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "DataStructures.Underflow");
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray23 = underflow10.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        overflow31.addSuppressed((java.lang.Throwable) underflow43);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow43.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray59 = underflow43.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray61 = overflow25.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow62.addSuppressed((java.lang.Throwable) overflow74);
        overflow25.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray80 = overflow62.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) underflow9);
        java.lang.Throwable[] throwableArray13 = underflow9.getSuppressed();
        java.lang.Throwable[] throwableArray14 = underflow9.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow54);
        overflow38.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        overflow59.addSuppressed((java.lang.Throwable) overflow68);
        overflow54.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray74 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow68.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow68);
        underflow9.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.String str78 = underflow9.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Underflow" + "'", str78, "DataStructures.Underflow");
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        stackAr9.makeEmpty();
        java.lang.Object obj12 = stackAr9.topAndPop();
        stackAr9.makeEmpty();
        stackAr9.makeEmpty();
        boolean boolean15 = stackAr9.isEmpty();
        boolean boolean16 = stackAr9.isEmpty();
        java.lang.Object obj17 = stackAr9.topAndPop();
        stackAr9.makeEmpty();
        boolean boolean19 = stackAr9.isFull();
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj21 = stackAr9.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray25 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        overflow34.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray55 = overflow50.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray57 = overflow50.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray68 = underflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        underflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        overflow70.addSuppressed((java.lang.Throwable) overflow75);
        overflow58.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        underflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray88 = underflow87.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray90 = underflow87.getSuppressed();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        overflow91.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray94 = overflow91.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow91.getSuppressed();
        underflow87.addSuppressed((java.lang.Throwable) overflow91);
        overflow75.addSuppressed((java.lang.Throwable) overflow91);
        overflow50.addSuppressed((java.lang.Throwable) overflow75);
        overflow16.addSuppressed((java.lang.Throwable) overflow50);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(2);
        boolean boolean13 = stackAr12.isFull();
        java.lang.Object obj14 = null;
        stackAr12.push(obj14);
        boolean boolean16 = stackAr12.isFull();
        boolean boolean17 = stackAr12.isEmpty();
        boolean boolean18 = stackAr12.isFull();
        stackAr12.pop();
        boolean boolean20 = stackAr12.isEmpty();
        java.lang.Object obj21 = stackAr12.top();
        stackAr12.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr12);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        java.lang.Throwable[] throwableArray58 = underflow31.getSuppressed();
        DataStructures.StackAr stackAr60 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj61 = stackAr60.topAndPop();
        java.lang.Object obj62 = stackAr60.top();
        stackAr60.makeEmpty();
        boolean boolean64 = stackAr60.isFull();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        underflow65.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow76.getSuppressed();
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        underflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow88.addSuppressed((java.lang.Throwable) overflow89);
        overflow83.addSuppressed((java.lang.Throwable) overflow88);
        overflow72.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray93 = overflow88.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow88);
        stackAr60.push((java.lang.Object) overflow88);
        java.lang.Throwable[] throwableArray96 = overflow88.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.String str98 = underflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "DataStructures.Underflow" + "'", str98, "DataStructures.Underflow");
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow6.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray31 = overflow23.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray33 = overflow23.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow44);
        underflow35.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray48 = underflow35.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        underflow35.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow50.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        overflow50.addSuppressed((java.lang.Throwable) overflow68);
        underflow0.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray74 = overflow68.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow2.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray43 = overflow33.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        underflow48.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray69 = overflow61.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray71 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow61.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray74 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow33.getSuppressed();
        java.lang.String str77 = overflow33.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "DataStructures.Overflow" + "'", str77, "DataStructures.Overflow");
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow21);
        underflow12.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray25 = overflow17.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray27 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow7.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        underflow30.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray43 = underflow30.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        underflow30.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = underflow30.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        underflow30.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        overflow59.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        overflow59.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        underflow81.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray87 = overflow84.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Underflow underflow89 = new DataStructures.Underflow();
        overflow77.addSuppressed((java.lang.Throwable) underflow89);
        overflow74.addSuppressed((java.lang.Throwable) overflow77);
        overflow53.addSuppressed((java.lang.Throwable) overflow77);
        overflow7.addSuppressed((java.lang.Throwable) overflow53);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) underflow32);
        underflow23.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) underflow45);
        underflow36.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) underflow36);
        underflow10.addSuppressed((java.lang.Throwable) underflow36);
        java.lang.Throwable[] throwableArray51 = underflow36.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray68 = underflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        underflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) underflow74);
        underflow65.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow83);
        underflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray88 = underflow87.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) underflow87);
        underflow78.addSuppressed((java.lang.Throwable) overflow83);
        overflow70.addSuppressed((java.lang.Throwable) underflow78);
        underflow52.addSuppressed((java.lang.Throwable) underflow78);
        underflow36.addSuppressed((java.lang.Throwable) underflow52);
        underflow7.addSuppressed((java.lang.Throwable) underflow52);
        java.lang.Throwable[] throwableArray95 = underflow7.getSuppressed();
        java.lang.Throwable[] throwableArray96 = underflow7.getSuppressed();
        java.lang.String str97 = underflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Underflow" + "'", str97, "DataStructures.Underflow");
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray30 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow3.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        overflow32.addSuppressed((java.lang.Throwable) underflow44);
        java.lang.Throwable[] throwableArray46 = overflow32.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow32);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.push((java.lang.Object) (-6.9d));
        java.lang.Object obj10 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-6.9d) + "'", obj10, (-6.9d));
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow70);
        underflow61.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray74 = overflow66.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow66);
        overflow47.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray77 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow66.getSuppressed();
        underflow8.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.String str80 = overflow66.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        java.lang.Throwable[] throwableArray12 = underflow9.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray12);
        java.lang.Object obj14 = stackAr1.topAndPop();
        java.lang.Object obj15 = stackAr1.topAndPop();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        underflow30.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray43 = underflow30.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray43);
        java.lang.Class<?> wildcardClass45 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr1.pop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        overflow1.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        underflow16.addSuppressed((java.lang.Throwable) underflow18);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        underflow18.addSuppressed((java.lang.Throwable) overflow32);
        underflow10.addSuppressed((java.lang.Throwable) underflow18);
        java.lang.Throwable[] throwableArray43 = underflow10.getSuppressed();
        java.lang.Class<?> wildcardClass44 = throwableArray43.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass44);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(1);
        stackAr8.push((java.lang.Object) 1.0f);
        java.lang.Object obj11 = stackAr8.topAndPop();
        boolean boolean12 = stackAr8.isFull();
        java.lang.Object obj13 = stackAr8.top();
        boolean boolean14 = stackAr8.isEmpty();
        boolean boolean15 = stackAr8.isFull();
        stackAr1.push((java.lang.Object) stackAr8);
        stackAr8.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + 1.0f + "'", obj11, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow47);
        overflow31.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        overflow56.addSuppressed((java.lang.Throwable) overflow61);
        overflow52.addSuppressed((java.lang.Throwable) overflow61);
        overflow47.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray67 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow61.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow61);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow61);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray54 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow34.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow65);
        overflow56.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) underflow81);
        underflow72.addSuppressed((java.lang.Throwable) overflow77);
        underflow70.addSuppressed((java.lang.Throwable) underflow72);
        overflow65.addSuppressed((java.lang.Throwable) underflow72);
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        underflow72.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray89 = underflow87.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.String str91 = overflow34.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "DataStructures.Overflow" + "'", str91, "DataStructures.Overflow");
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray51 = overflow43.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray53 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow43.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        overflow57.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow57.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.String str68 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.Throwable[] throwableArray56 = underflow53.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        underflow53.addSuppressed((java.lang.Throwable) overflow57);
        underflow8.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.Throwable[] throwableArray64 = underflow8.getSuppressed();
        java.lang.String str65 = underflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DataStructures.Underflow" + "'", str65, "DataStructures.Underflow");
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        underflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow1.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray70 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray31 = underflow18.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        underflow18.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        underflow18.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray54 = overflow44.getSuppressed();
        stackAr1.push((java.lang.Object) overflow44);
        DataStructures.StackAr stackAr57 = new DataStructures.StackAr(1);
        stackAr57.push((java.lang.Object) 1.0f);
        java.lang.Object obj60 = stackAr57.topAndPop();
        boolean boolean61 = stackAr57.isFull();
        java.lang.Object obj62 = stackAr57.top();
        boolean boolean63 = stackAr57.isEmpty();
        stackAr57.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr57);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + 1.0f + "'", obj60, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        overflow19.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        underflow32.addSuppressed((java.lang.Throwable) underflow34);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        underflow34.addSuppressed((java.lang.Throwable) overflow48);
        overflow29.addSuppressed((java.lang.Throwable) overflow48);
        overflow24.addSuppressed((java.lang.Throwable) overflow48);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(100);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) boolean6);
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(0);
        java.lang.Object obj16 = stackAr15.top();
        boolean boolean17 = stackAr15.isFull();
        boolean boolean18 = stackAr15.isFull();
        stackAr10.push((java.lang.Object) stackAr15);
        boolean boolean20 = stackAr10.isEmpty();
        java.lang.Object obj21 = stackAr10.top();
        stackAr1.push((java.lang.Object) stackAr10);
        boolean boolean23 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        stackAr1.push((java.lang.Object) (short) -1);
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (short) -1 + "'", obj7, (short) -1);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj6 = stackAr1.top();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.topAndPop();
        stackAr8.makeEmpty();
        java.lang.Object obj14 = stackAr8.top();
        stackAr1.push(obj14);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.top();
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.topAndPop();
        boolean boolean8 = stackAr6.isEmpty();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean10 = stackAr6.isFull();
        boolean boolean11 = stackAr6.isEmpty();
        boolean boolean12 = stackAr6.isEmpty();
        boolean boolean13 = stackAr6.isEmpty();
        boolean boolean14 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean15 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        java.lang.Throwable[] throwableArray17 = underflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        boolean boolean10 = stackAr8.isEmpty();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean12 = stackAr8.isFull();
        java.lang.Object obj13 = stackAr8.topAndPop();
        java.lang.Object obj14 = stackAr8.top();
        boolean boolean15 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) boolean15);
        boolean boolean17 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow10.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow26);
        underflow17.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray30 = underflow17.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        underflow17.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        overflow37.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        overflow55.addSuppressed((java.lang.Throwable) overflow60);
        overflow51.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow51.addSuppressed((java.lang.Throwable) overflow66);
        overflow37.addSuppressed((java.lang.Throwable) overflow51);
        overflow32.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow71);
        overflow10.addSuppressed((java.lang.Throwable) overflow71);
        overflow0.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow88.addSuppressed((java.lang.Throwable) overflow89);
        overflow83.addSuppressed((java.lang.Throwable) overflow88);
        overflow79.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray93 = overflow79.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow79);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isEmpty();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow22.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow43.addSuppressed((java.lang.Throwable) overflow52);
        overflow38.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray58 = overflow38.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray58);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Object obj17 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow29);
        java.lang.Throwable[] throwableArray32 = underflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        underflow29.addSuppressed((java.lang.Throwable) overflow33);
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        overflow40.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        underflow54.addSuppressed((java.lang.Throwable) underflow56);
        overflow49.addSuppressed((java.lang.Throwable) underflow56);
        java.lang.Throwable[] throwableArray71 = underflow56.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow56);
        java.lang.Throwable[] throwableArray73 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow17.getSuppressed();
        java.lang.String str75 = overflow17.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DataStructures.Overflow" + "'", str75, "DataStructures.Overflow");
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        java.lang.Object obj14 = stackAr1.top();
        DataStructures.StackAr stackAr16 = new DataStructures.StackAr(0);
        boolean boolean17 = stackAr16.isFull();
        stackAr16.makeEmpty();
        java.lang.Object obj19 = stackAr16.topAndPop();
        stackAr16.makeEmpty();
        boolean boolean21 = stackAr16.isFull();
        java.lang.Object obj22 = stackAr16.top();
        java.lang.Object obj23 = stackAr16.top();
        boolean boolean24 = stackAr16.isFull();
        stackAr16.makeEmpty();
        boolean boolean26 = stackAr16.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        boolean boolean18 = stackAr17.isFull();
        java.lang.Object obj19 = stackAr17.top();
        stackAr17.makeEmpty();
        java.lang.Object obj21 = stackAr17.top();
        boolean boolean22 = stackAr17.isEmpty();
        java.lang.Object obj23 = stackAr17.topAndPop();
        boolean boolean24 = stackAr17.isEmpty();
        boolean boolean25 = stackAr17.isFull();
        stackAr17.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr17);
        DataStructures.StackAr stackAr29 = new DataStructures.StackAr(0);
        stackAr29.makeEmpty();
        boolean boolean31 = stackAr29.isFull();
        java.lang.Object obj32 = stackAr29.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj32);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr7.isEmpty();
        java.lang.Class<?> wildcardClass17 = stackAr7.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        stackAr1.pop();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.topAndPop();
        java.lang.Object obj12 = stackAr1.top();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(5);
        java.lang.Object obj15 = stackAr14.topAndPop();
        stackAr1.push(obj15);
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass19 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        java.lang.Object obj9 = stackAr6.topAndPop();
        stackAr6.makeEmpty();
        boolean boolean11 = stackAr6.isFull();
        boolean boolean12 = stackAr6.isEmpty();
        java.lang.Object obj13 = stackAr6.topAndPop();
        java.lang.Object obj14 = stackAr6.top();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.top();
        DataStructures.StackAr stackAr19 = new DataStructures.StackAr(1);
        java.lang.Object obj20 = stackAr19.top();
        boolean boolean21 = stackAr19.isFull();
        stackAr19.makeEmpty();
        java.lang.Object obj23 = stackAr19.top();
        java.lang.Object obj24 = stackAr19.topAndPop();
        boolean boolean25 = stackAr19.isEmpty();
        DataStructures.StackAr stackAr27 = new DataStructures.StackAr(100);
        stackAr27.push((java.lang.Object) 8L);
        stackAr19.push((java.lang.Object) stackAr27);
        boolean boolean31 = stackAr19.isEmpty();
        java.lang.Object obj32 = stackAr19.topAndPop();
        stackAr1.push((java.lang.Object) stackAr19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = underflow0.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = underflow26.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) overflow41);
        underflow20.addSuppressed((java.lang.Throwable) overflow41);
        underflow0.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray47 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray48 = underflow0.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) underflow60);
        underflow51.addSuppressed((java.lang.Throwable) overflow56);
        underflow49.addSuppressed((java.lang.Throwable) underflow51);
        java.lang.Throwable[] throwableArray65 = underflow51.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        overflow70.addSuppressed((java.lang.Throwable) overflow75);
        overflow66.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Underflow underflow82 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray83 = underflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        underflow82.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray88 = overflow85.getSuppressed();
        DataStructures.Underflow underflow89 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray90 = underflow89.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) underflow89);
        underflow80.addSuppressed((java.lang.Throwable) underflow89);
        java.lang.Throwable[] throwableArray93 = underflow89.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) underflow89);
        underflow51.addSuppressed((java.lang.Throwable) overflow75);
        underflow0.addSuppressed((java.lang.Throwable) overflow75);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        boolean boolean10 = stackAr8.isEmpty();
        boolean boolean11 = stackAr8.isEmpty();
        stackAr8.makeEmpty();
        java.lang.Class<?> wildcardClass13 = stackAr8.getClass();
        stackAr1.push((java.lang.Object) stackAr8);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(0);
        java.lang.Object obj16 = stackAr15.top();
        boolean boolean17 = stackAr15.isFull();
        boolean boolean18 = stackAr15.isFull();
        stackAr10.push((java.lang.Object) stackAr15);
        boolean boolean20 = stackAr10.isEmpty();
        java.lang.Object obj21 = stackAr10.top();
        java.lang.Object obj22 = stackAr10.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj22);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray26 = overflow15.getSuppressed();
        java.lang.Class<?> wildcardClass27 = throwableArray26.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass27);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow8.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) underflow24);
        overflow17.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        underflow24.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow45.addSuppressed((java.lang.Throwable) underflow47);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        overflow61.addSuppressed((java.lang.Throwable) overflow66);
        underflow47.addSuppressed((java.lang.Throwable) overflow61);
        overflow42.addSuppressed((java.lang.Throwable) overflow61);
        underflow24.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray73 = underflow24.getSuppressed();
        stackAr1.push((java.lang.Object) underflow24);
        java.lang.Object obj75 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "DataStructures.Underflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "DataStructures.Underflow");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow2.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.String str43 = underflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DataStructures.Underflow" + "'", str43, "DataStructures.Underflow");
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(10);
        boolean boolean7 = stackAr6.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        stackAr1.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        overflow19.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        underflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) underflow62);
        underflow53.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray66 = overflow58.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow58);
        overflow36.addSuppressed((java.lang.Throwable) overflow48);
        stackAr1.push((java.lang.Object) overflow48);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        java.lang.Object obj15 = stackAr13.top();
        stackAr13.makeEmpty();
        boolean boolean17 = stackAr13.isFull();
        java.lang.Object obj18 = stackAr13.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(10);
        boolean boolean7 = stackAr6.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        stackAr1.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean20 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        overflow12.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) underflow35);
        java.lang.Throwable[] throwableArray39 = underflow35.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow35);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow21);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray31 = underflow18.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        underflow18.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray39 = overflow13.getSuppressed();
        stackAr1.push((java.lang.Object) overflow13);
        java.lang.Object obj41 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "DataStructures.Overflow");
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        underflow16.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        underflow41.addSuppressed((java.lang.Throwable) overflow46);
        underflow39.addSuppressed((java.lang.Throwable) underflow41);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        overflow55.addSuppressed((java.lang.Throwable) overflow60);
        underflow41.addSuppressed((java.lang.Throwable) overflow55);
        underflow33.addSuppressed((java.lang.Throwable) underflow41);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        underflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow73);
        underflow41.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray79 = overflow66.getSuppressed();
        underflow16.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Class<?> wildcardClass81 = underflow16.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(3);
        java.lang.Object obj7 = stackAr6.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        boolean boolean11 = stackAr9.isFull();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr6.topAndPop();
        boolean boolean14 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) (short) -1);
        java.lang.Object obj17 = stackAr6.top();
        stackAr1.push(obj17);
        boolean boolean19 = stackAr1.isFull();
        stackAr1.pop();
        DataStructures.StackAr stackAr22 = new DataStructures.StackAr(2);
        boolean boolean23 = stackAr22.isFull();
        java.lang.Object obj24 = null;
        stackAr22.push(obj24);
        boolean boolean26 = stackAr22.isFull();
        boolean boolean27 = stackAr22.isEmpty();
        boolean boolean28 = stackAr22.isFull();
        stackAr22.pop();
        boolean boolean30 = stackAr22.isEmpty();
        java.lang.Object obj31 = stackAr22.top();
        stackAr22.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (short) -1 + "'", obj17, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        overflow19.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        overflow19.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        overflow40.addSuppressed((java.lang.Throwable) overflow49);
        overflow35.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        underflow55.addSuppressed((java.lang.Throwable) underflow56);
        java.lang.Throwable[] throwableArray59 = underflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = underflow55.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow55);
        java.lang.Throwable[] throwableArray62 = underflow55.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow55);
        java.lang.Class<?> wildcardClass64 = underflow55.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = stackAr1.topAndPop();
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr18 = new DataStructures.StackAr(0);
        boolean boolean19 = stackAr18.isFull();
        java.lang.Object obj20 = stackAr18.top();
        java.lang.Object obj21 = stackAr18.topAndPop();
        stackAr18.makeEmpty();
        boolean boolean23 = stackAr18.isFull();
        boolean boolean24 = stackAr18.isFull();
        boolean boolean25 = stackAr18.isEmpty();
        java.lang.Object obj26 = stackAr18.topAndPop();
        java.lang.Object obj27 = stackAr18.topAndPop();
        stackAr18.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        stackAr1.push((java.lang.Object) (short) -1);
        boolean boolean7 = stackAr1.isFull();
        stackAr1.pop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(1);
        java.lang.Object obj12 = stackAr11.top();
        boolean boolean13 = stackAr11.isFull();
        java.lang.Object obj14 = stackAr11.top();
        java.lang.Object obj15 = stackAr11.topAndPop();
        java.lang.Object obj16 = stackAr11.top();
        java.lang.Object obj17 = stackAr11.top();
        stackAr1.push((java.lang.Object) stackAr11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        overflow3.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) underflow28);
        underflow19.addSuppressed((java.lang.Throwable) overflow24);
        underflow17.addSuppressed((java.lang.Throwable) underflow19);
        overflow12.addSuppressed((java.lang.Throwable) underflow19);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        underflow19.addSuppressed((java.lang.Throwable) underflow34);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        underflow34.addSuppressed((java.lang.Throwable) underflow36);
        stackAr1.push((java.lang.Object) underflow36);
        boolean boolean39 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr41 = new DataStructures.StackAr(1);
        boolean boolean42 = stackAr41.isFull();
        boolean boolean43 = stackAr41.isFull();
        java.lang.Object obj44 = stackAr41.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        overflow28.addSuppressed((java.lang.Throwable) overflow37);
        overflow23.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        underflow43.addSuppressed((java.lang.Throwable) underflow44);
        java.lang.Throwable[] throwableArray47 = underflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = underflow43.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray50 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = underflow26.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        underflow47.addSuppressed((java.lang.Throwable) underflow49);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        underflow49.addSuppressed((java.lang.Throwable) overflow63);
        overflow21.addSuppressed((java.lang.Throwable) underflow49);
        underflow2.addSuppressed((java.lang.Throwable) underflow49);
        java.lang.String str75 = underflow49.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "DataStructures.Underflow" + "'", str75, "DataStructures.Underflow");
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        java.lang.Throwable[] throwableArray47 = underflow33.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        overflow52.addSuppressed((java.lang.Throwable) overflow57);
        overflow48.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) underflow71);
        underflow62.addSuppressed((java.lang.Throwable) underflow71);
        java.lang.Throwable[] throwableArray75 = underflow71.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow71);
        underflow33.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray78 = overflow57.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray80 = overflow9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) underflow47);
        underflow21.addSuppressed((java.lang.Throwable) underflow47);
        java.lang.Throwable[] throwableArray62 = underflow21.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        underflow65.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) underflow72);
        underflow63.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray76 = underflow63.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        underflow63.addSuppressed((java.lang.Throwable) overflow78);
        underflow21.addSuppressed((java.lang.Throwable) underflow63);
        overflow0.addSuppressed((java.lang.Throwable) underflow63);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(10);
        boolean boolean7 = stackAr6.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        stackAr1.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.topAndPop();
        java.lang.Object obj18 = stackAr1.top();
        DataStructures.StackAr stackAr20 = new DataStructures.StackAr(1);
        stackAr20.makeEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        java.lang.Object obj23 = stackAr20.top();
        boolean boolean24 = stackAr20.isEmpty();
        DataStructures.StackAr stackAr26 = new DataStructures.StackAr(0);
        java.lang.Object obj27 = stackAr26.topAndPop();
        java.lang.Object obj28 = stackAr26.top();
        stackAr26.makeEmpty();
        boolean boolean30 = stackAr26.isEmpty();
        boolean boolean31 = stackAr26.isEmpty();
        stackAr26.makeEmpty();
        stackAr20.push((java.lang.Object) stackAr26);
        stackAr20.makeEmpty();
        boolean boolean35 = stackAr20.isEmpty();
        java.lang.Object obj36 = stackAr20.topAndPop();
        stackAr1.push(obj36);
        stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + 0 + "'", obj18, 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        overflow62.addSuppressed((java.lang.Throwable) overflow67);
        overflow58.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow58.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.String str74 = underflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DataStructures.Underflow" + "'", str74, "DataStructures.Underflow");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray47 = overflow39.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow50.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray57 = overflow50.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(4);
        boolean boolean14 = stackAr13.isEmpty();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) underflow24);
        underflow15.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray28 = underflow15.getSuppressed();
        stackAr13.push((java.lang.Object) underflow15);
        java.lang.Throwable[] throwableArray30 = underflow15.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray30);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }
}

