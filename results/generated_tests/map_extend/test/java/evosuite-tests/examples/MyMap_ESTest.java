/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 31 17:40:00 GMT 2024
 */

package examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import examples.MyMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MyMap_ESTest extends MyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MyMap<Object, Object> myMap0 = new MyMap<Object, Object>();
      MyMap<Object, String> myMap1 = new MyMap<Object, String>();
      myMap1.extend(myMap0, "ORKdjKWu6>V6[U5LJ~");
      // Undeclared exception!
      try { 
        myMap1.remove("invalid key");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Object object0 = new Object();
      MyMap<String, Object> myMap1 = new MyMap<String, Object>();
      myMap1.extend("examples.MyMap", myMap0);
      myMap1.extend("", object0);
      int int0 = myMap1.extend("", "b.F");
      assertEquals(2, myMap1.count());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Object object0 = new Object();
      MyMap<String, Object> myMap1 = new MyMap<String, Object>();
      myMap1.extend("examples.MyMap", myMap0);
      myMap1.extend("", object0);
      int int0 = myMap1.remove("");
      assertEquals(1, myMap1.count());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MyMap<String, Object> myMap0 = new MyMap<String, Object>();
      myMap0.extend("F\u0002+k'@", (Object) null);
      Object object0 = myMap0.item("F\u0002+k'@");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Integer integer0 = new Integer((-82));
      myMap0.extend(integer0, "qD# E5U");
      int int0 = myMap0.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MyMap<String, Integer> myMap0 = new MyMap<String, Integer>();
      Integer integer0 = new Integer(658);
      myMap0.extend("", integer0);
      boolean boolean0 = myMap0.hasKey("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MyMap<Object, Object> myMap0 = new MyMap<Object, Object>();
      boolean boolean0 = myMap0.hasKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MyMap<String, Object> myMap0 = new MyMap<String, Object>();
      int int0 = myMap0.count();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Object object0 = new Object();
      myMap0.extend(object0, "b.F");
      int int0 = myMap0.extend(object0, "b.F");
      assertEquals(1, myMap0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Object object0 = new Object();
      int int0 = myMap0.extend(object0, "");
      //  // Unstable assertion: assertEquals(0, int0);
      
      boolean boolean0 = myMap0.hasValue("");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MyMap<Object, String> myMap0 = new MyMap<Object, String>();
      Object object0 = new Object();
      int int0 = myMap0.extend(object0, "b.F");
      assertEquals(0, int0);
      
      boolean boolean0 = myMap0.hasValue("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      MyMap<String, Object> myMap0 = new MyMap<String, Object>();
      myMap0.extend("", object0);
      int int0 = myMap0.remove("");
      assertEquals(0, myMap0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MyMap<String, Integer> myMap0 = new MyMap<String, Integer>();
      // Undeclared exception!
      try { 
        myMap0.item("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid key
         //
         verifyException("examples.MyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      MyMap<String, Object> myMap0 = new MyMap<String, Object>();
      myMap0.extend("", object0);
      Object object1 = myMap0.item("");
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MyMap<Object, Object> myMap0 = new MyMap<Object, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        myMap0.remove(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MyMap", e);
      }
  }
}
