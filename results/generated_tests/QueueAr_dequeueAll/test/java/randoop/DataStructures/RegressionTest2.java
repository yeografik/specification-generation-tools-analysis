package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow6.getSuppressed();
        java.lang.Class<?> wildcardClass13 = throwableArray12.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow53);
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray58 = overflow47.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow64);
        overflow34.addSuppressed((java.lang.Throwable) overflow64);
        overflow16.addSuppressed((java.lang.Throwable) overflow34);
        queueAr1.enqueue((java.lang.Object) overflow34);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow86);
        overflow73.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray91 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow73.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Class<?> wildcardClass94 = overflow34.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow52.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray95 = overflow52.getSuppressed();
        java.lang.String str96 = overflow52.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        boolean boolean13 = queueAr5.isFull();
        java.lang.Object obj14 = queueAr5.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        queueAr16.enqueue((java.lang.Object) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow61.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        overflow69.addSuppressed((java.lang.Throwable) overflow75);
        overflow61.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray84 = overflow61.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray86 = overflow21.getSuppressed();
        queueAr5.enqueue((java.lang.Object) overflow21);
        java.lang.Object obj88 = queueAr5.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "DataStructures.Overflow");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '4');
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        queueAr1.enqueue((java.lang.Object) overflow26);
        java.lang.Object obj50 = queueAr1.dequeue();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "DataStructures.Overflow");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        java.lang.Object obj19 = queueAr8.getFront();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) 'a');
        queueAr8.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.dequeueAll();
        boolean boolean30 = queueAr25.isEmpty();
        queueAr25.makeEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        java.lang.Object obj37 = queueAr33.dequeue();
        java.lang.Object obj38 = queueAr33.getFront();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        boolean boolean42 = queueAr40.isEmpty();
        queueAr40.dequeueAll();
        queueAr40.makeEmpty();
        boolean boolean45 = queueAr40.isFull();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj48 = queueAr47.getFront();
        queueAr47.dequeueAll();
        java.lang.Object obj50 = queueAr47.dequeue();
        queueAr40.enqueue(obj50);
        queueAr40.makeEmpty();
        queueAr40.dequeueAll();
        java.lang.Object obj54 = queueAr40.dequeue();
        DataStructures.QueueAr queueAr56 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr56.dequeueAll();
        java.lang.Object obj58 = queueAr56.getFront();
        queueAr56.makeEmpty();
        boolean boolean60 = queueAr56.isFull();
        queueAr56.makeEmpty();
        queueAr40.enqueue((java.lang.Object) queueAr56);
        java.lang.Object obj63 = queueAr56.getFront();
        queueAr33.enqueue((java.lang.Object) queueAr56);
        queueAr33.dequeueAll();
        queueAr33.dequeueAll();
        queueAr25.enqueue((java.lang.Object) queueAr33);
        java.lang.Class<?> wildcardClass68 = queueAr25.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr25);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray36 = overflow0.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray55 = overflow37.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.String str57 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DataStructures.Overflow" + "'", str57, "DataStructures.Overflow");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray59 = overflow54.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow40.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow73.addSuppressed((java.lang.Throwable) overflow79);
        overflow54.addSuppressed((java.lang.Throwable) overflow79);
        overflow27.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray84 = overflow27.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        java.lang.Throwable[] throwableArray88 = overflow85.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray90 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow89.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow89);
        overflow27.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray97 = overflow89.getSuppressed();
        java.lang.Throwable[] throwableArray98 = overflow89.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow89);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow28);
        overflow6.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray36 = overflow0.getSuppressed();
        java.lang.String str37 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DataStructures.Overflow" + "'", str37, "DataStructures.Overflow");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (byte) 10);
        queueAr1.makeEmpty();
        java.lang.Object obj15 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        overflow2.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow79.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow90.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow90);
        overflow2.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable throwable98 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow2.addSuppressed(throwable98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.String str48 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DataStructures.Overflow" + "'", str48, "DataStructures.Overflow");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        java.lang.Object obj19 = queueAr1.getFront();
        boolean boolean20 = queueAr1.isFull();
        java.lang.Object obj21 = queueAr1.getFront();
        boolean boolean22 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.String str34 = overflow30.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.enqueue((java.lang.Object) (-2));
        boolean boolean13 = queueAr10.isFull();
        queueAr10.makeEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        java.lang.Object obj23 = queueAr18.dequeue();
        queueAr18.enqueue((java.lang.Object) (-1L));
        queueAr18.makeEmpty();
        boolean boolean27 = queueAr18.isFull();
        boolean boolean28 = queueAr18.isFull();
        queueAr18.makeEmpty();
        java.lang.Object obj30 = queueAr18.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj30);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow11.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.makeEmpty();
        boolean boolean49 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass50 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = obj11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow25.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow38.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow25.addSuppressed((java.lang.Throwable) overflow38);
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray51 = overflow25.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        queueAr11.enqueue((java.lang.Object) overflow15);
        queueAr1.enqueue((java.lang.Object) overflow15);
        java.lang.String str28 = overflow15.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DataStructures.Overflow" + "'", str28, "DataStructures.Overflow");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow12.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow34.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow40.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray57 = overflow52.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow52);
        overflow34.addSuppressed((java.lang.Throwable) overflow52);
        overflow12.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.String str61 = overflow34.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DataStructures.Overflow" + "'", str61, "DataStructures.Overflow");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        queueAr9.makeEmpty();
        java.lang.Object obj26 = queueAr9.getFront();
        boolean boolean27 = queueAr9.isFull();
        java.lang.Object obj28 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean39 = queueAr38.isEmpty();
        java.lang.Object obj40 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        java.lang.Object obj44 = queueAr42.getFront();
        queueAr42.makeEmpty();
        boolean boolean46 = queueAr42.isFull();
        queueAr38.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj48 = queueAr38.dequeue();
        queueAr35.enqueue((java.lang.Object) queueAr38);
        java.lang.Object obj50 = queueAr38.getFront();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        queueAr38.enqueue((java.lang.Object) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.String str69 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DataStructures.Overflow" + "'", str69, "DataStructures.Overflow");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        java.lang.Object obj24 = queueAr21.getFront();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        queueAr21.enqueue((java.lang.Object) overflow25);
        java.lang.Object obj37 = queueAr21.getFront();
        java.lang.Object obj38 = queueAr21.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj40 = queueAr1.dequeue();
        java.lang.Object obj41 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        boolean boolean25 = queueAr17.isFull();
        java.lang.Class<?> wildcardClass26 = queueAr17.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Class<?> wildcardClass62 = overflow37.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow50);
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean62 = queueAr61.isEmpty();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean65 = queueAr64.isEmpty();
        java.lang.Object obj66 = queueAr64.dequeue();
        DataStructures.QueueAr queueAr68 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr68.dequeueAll();
        java.lang.Object obj70 = queueAr68.getFront();
        queueAr68.makeEmpty();
        boolean boolean72 = queueAr68.isFull();
        queueAr64.enqueue((java.lang.Object) queueAr68);
        java.lang.Object obj74 = queueAr64.dequeue();
        queueAr61.enqueue((java.lang.Object) queueAr64);
        java.lang.Object obj76 = queueAr64.getFront();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow89);
        queueAr64.enqueue((java.lang.Object) overflow89);
        overflow57.addSuppressed((java.lang.Throwable) overflow89);
        overflow20.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable throwable96 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow89.addSuppressed(throwable96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        java.lang.Object obj20 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        queueAr22.makeEmpty();
        boolean boolean25 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr22);
        java.lang.Object obj28 = queueAr22.dequeue();
        queueAr22.makeEmpty();
        queueAr22.makeEmpty();
        boolean boolean31 = queueAr22.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow32.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Class<?> wildcardClass40 = overflow32.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow35.addSuppressed((java.lang.Throwable) overflow49);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow35);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray36 = overflow2.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean49 = queueAr48.isEmpty();
        java.lang.Object obj50 = queueAr48.dequeue();
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        java.lang.Object obj54 = queueAr52.getFront();
        queueAr52.makeEmpty();
        boolean boolean56 = queueAr52.isFull();
        queueAr48.enqueue((java.lang.Object) queueAr52);
        java.lang.Object obj58 = queueAr48.dequeue();
        boolean boolean59 = queueAr48.isEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow76);
        queueAr48.enqueue((java.lang.Object) overflow65);
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow2.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.String str81 = overflow65.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Overflow" + "'", str81, "DataStructures.Overflow");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow38.getSuppressed();
        DataStructures.QueueAr queueAr49 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr49.dequeueAll();
        boolean boolean51 = queueAr49.isEmpty();
        queueAr49.dequeueAll();
        queueAr49.makeEmpty();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        queueAr49.enqueue((java.lang.Object) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray76 = overflow70.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow70);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr24.getFront();
        java.lang.Class<?> wildcardClass34 = queueAr24.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        boolean boolean20 = queueAr10.isFull();
        queueAr10.makeEmpty();
        queueAr10.dequeueAll();
        boolean boolean23 = queueAr10.isFull();
        queueAr1.enqueue((java.lang.Object) boolean23);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 8 + "'", obj8, 8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj41 = queueAr27.dequeue();
        boolean boolean42 = queueAr27.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        boolean boolean44 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        boolean boolean50 = queueAr46.isEmpty();
        boolean boolean51 = queueAr46.isFull();
        java.lang.Object obj52 = queueAr46.getFront();
        java.lang.Object obj53 = queueAr46.dequeue();
        DataStructures.QueueAr queueAr55 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean56 = queueAr55.isEmpty();
        java.lang.Object obj57 = queueAr55.dequeue();
        DataStructures.QueueAr queueAr59 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr59.dequeueAll();
        java.lang.Object obj61 = queueAr59.getFront();
        queueAr59.makeEmpty();
        boolean boolean63 = queueAr59.isFull();
        queueAr55.enqueue((java.lang.Object) queueAr59);
        java.lang.Object obj65 = queueAr55.dequeue();
        boolean boolean66 = queueAr55.isFull();
        queueAr55.makeEmpty();
        queueAr55.makeEmpty();
        queueAr46.enqueue((java.lang.Object) queueAr55);
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr46);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        boolean boolean25 = queueAr23.isEmpty();
        queueAr23.dequeueAll();
        queueAr23.enqueue((java.lang.Object) (-4L));
        boolean boolean29 = queueAr23.isFull();
        queueAr23.dequeueAll();
        boolean boolean31 = queueAr23.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr33.enqueue((java.lang.Object) (-2));
        boolean boolean36 = queueAr33.isFull();
        java.lang.Class<?> wildcardClass37 = queueAr33.getClass();
        queueAr23.enqueue((java.lang.Object) wildcardClass37);
        boolean boolean39 = queueAr23.isEmpty();
        boolean boolean40 = queueAr23.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr23);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray11 = overflow4.getSuppressed();
        java.lang.String str12 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DataStructures.Overflow" + "'", str12, "DataStructures.Overflow");
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        java.lang.Object obj13 = queueAr1.getFront();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        queueAr15.makeEmpty();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        queueAr15.enqueue((java.lang.Object) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray42 = overflow20.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray50 = overflow20.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray68 = overflow0.getSuppressed();
        java.lang.String str69 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DataStructures.Overflow" + "'", str69, "DataStructures.Overflow");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(100);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj5 = queueAr4.getFront();
        queueAr4.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj8 = queueAr4.dequeue();
        queueAr4.dequeueAll();
        boolean boolean10 = queueAr4.isFull();
        boolean boolean11 = queueAr4.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj13 = queueAr4.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 9.6d + "'", obj8, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow6.getSuppressed();
        java.lang.String str35 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DataStructures.Overflow" + "'", str35, "DataStructures.Overflow");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray98 = overflow84.getSuppressed();
        java.lang.Class<?> wildcardClass99 = overflow84.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean10 = queueAr9.isEmpty();
        java.lang.Object obj11 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        boolean boolean17 = queueAr13.isFull();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        java.lang.Object obj19 = queueAr9.dequeue();
        boolean boolean20 = queueAr9.isEmpty();
        java.lang.Object obj21 = queueAr9.dequeue();
        java.lang.Object obj22 = queueAr9.dequeue();
        queueAr1.enqueue(obj22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        queueAr1.dequeueAll();
        boolean boolean23 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass24 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.enqueue((java.lang.Object) (-4L));
        boolean boolean13 = queueAr7.isFull();
        queueAr7.dequeueAll();
        boolean boolean15 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        boolean boolean24 = queueAr20.isEmpty();
        boolean boolean25 = queueAr20.isFull();
        boolean boolean26 = queueAr20.isFull();
        boolean boolean27 = queueAr20.isFull();
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr29.dequeueAll();
        boolean boolean31 = queueAr29.isEmpty();
        queueAr29.dequeueAll();
        boolean boolean33 = queueAr29.isEmpty();
        java.lang.Object obj34 = queueAr29.getFront();
        java.lang.Object obj35 = queueAr29.dequeue();
        boolean boolean36 = queueAr29.isFull();
        java.lang.Object obj37 = queueAr29.getFront();
        boolean boolean38 = queueAr29.isFull();
        java.lang.Class<?> wildcardClass39 = queueAr29.getClass();
        queueAr20.enqueue((java.lang.Object) wildcardClass39);
        queueAr20.dequeueAll();
        boolean boolean42 = queueAr20.isFull();
        queueAr1.enqueue((java.lang.Object) boolean42);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray36 = overflow0.getSuppressed();
        java.lang.String str37 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DataStructures.Overflow" + "'", str37, "DataStructures.Overflow");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        boolean boolean32 = queueAr1.isEmpty();
        java.lang.Object obj33 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass34 = obj33.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray64 = overflow53.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        overflow40.addSuppressed((java.lang.Throwable) overflow70);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.String str78 = overflow70.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Overflow" + "'", str78, "DataStructures.Overflow");
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        java.lang.Object obj23 = queueAr1.dequeue();
        boolean boolean24 = queueAr1.isEmpty();
        boolean boolean25 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        queueAr46.enqueue((java.lang.Object) (-3));
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow65);
        queueAr46.enqueue((java.lang.Object) overflow65);
        overflow8.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.String str72 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (-3) + "'", obj52, (-3));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DataStructures.Overflow" + "'", str72, "DataStructures.Overflow");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow33.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray50 = overflow45.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow45);
        overflow6.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.String str53 = overflow45.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DataStructures.Overflow" + "'", str53, "DataStructures.Overflow");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        java.lang.Object obj19 = queueAr1.getFront();
        boolean boolean20 = queueAr1.isFull();
        boolean boolean21 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        java.lang.Object obj15 = queueAr1.getFront();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + false + "'", obj15, false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        queueAr1.enqueue((java.lang.Object) overflow10);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean20 = queueAr19.isEmpty();
        java.lang.Object obj21 = queueAr19.dequeue();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        boolean boolean27 = queueAr23.isFull();
        queueAr19.enqueue((java.lang.Object) queueAr23);
        java.lang.Object obj29 = queueAr19.dequeue();
        boolean boolean30 = queueAr19.isFull();
        queueAr19.makeEmpty();
        queueAr19.makeEmpty();
        queueAr19.dequeueAll();
        boolean boolean34 = queueAr19.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean34);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.enqueue((java.lang.Object) (-4L));
        boolean boolean13 = queueAr7.isFull();
        queueAr7.dequeueAll();
        boolean boolean15 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 8 + "'", obj9, 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow40.getSuppressed();
        queueAr17.enqueue((java.lang.Object) throwableArray46);
        java.lang.Object obj48 = queueAr17.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow2.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        overflow23.addSuppressed((java.lang.Throwable) overflow45);
        overflow2.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray58 = overflow2.getSuppressed();
        java.lang.Throwable throwable59 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow2.addSuppressed(throwable59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.getFront();
        java.lang.Object obj15 = queueAr1.getFront();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10L + "'", obj13, 10L);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 10L + "'", obj14, 10L);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 10L + "'", obj15, 10L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 10L + "'", obj17, 10L);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj21 = queueAr20.getFront();
        queueAr20.dequeueAll();
        java.lang.Object obj23 = queueAr20.dequeue();
        java.lang.Object obj24 = queueAr20.getFront();
        boolean boolean25 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        java.lang.Object obj28 = queueAr20.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean23 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Throwable[] throwableArray56 = overflow18.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow43.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow68.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray86 = overflow75.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray93 = overflow92.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow92.getSuppressed();
        overflow89.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray96 = overflow92.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow92);
        overflow43.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.String str99 = overflow75.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "DataStructures.Overflow" + "'", str99, "DataStructures.Overflow");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow16.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray46 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow16);
        java.lang.String str48 = overflow16.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DataStructures.Overflow" + "'", str48, "DataStructures.Overflow");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        boolean boolean48 = queueAr46.isEmpty();
        queueAr46.dequeueAll();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isFull();
        DataStructures.QueueAr queueAr53 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj54 = queueAr53.getFront();
        queueAr53.dequeueAll();
        java.lang.Object obj56 = queueAr53.dequeue();
        queueAr46.enqueue(obj56);
        queueAr46.makeEmpty();
        queueAr46.dequeueAll();
        java.lang.Object obj60 = queueAr46.dequeue();
        boolean boolean61 = queueAr46.isEmpty();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow72);
        queueAr46.enqueue((java.lang.Object) overflow72);
        overflow2.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.String str80 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isFull();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow29.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow36.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow29);
        java.lang.String str50 = overflow29.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DataStructures.Overflow" + "'", str50, "DataStructures.Overflow");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        boolean boolean20 = queueAr16.isEmpty();
        boolean boolean21 = queueAr16.isFull();
        boolean boolean22 = queueAr16.isFull();
        boolean boolean23 = queueAr16.isFull();
        queueAr16.makeEmpty();
        java.lang.Object obj25 = queueAr16.getFront();
        java.lang.Object obj26 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.enqueue((java.lang.Object) (-2));
        boolean boolean31 = queueAr28.isFull();
        java.lang.Class<?> wildcardClass32 = queueAr28.getClass();
        queueAr16.enqueue((java.lang.Object) wildcardClass32);
        queueAr1.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj35 = queueAr1.dequeue();
        java.lang.Object obj36 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        java.lang.Object obj16 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = obj16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj10 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj12 = queueAr9.dequeue();
        java.lang.Object obj13 = queueAr9.dequeue();
        java.lang.Object obj14 = queueAr9.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr32.dequeueAll();
        java.lang.Object obj34 = queueAr32.getFront();
        queueAr32.makeEmpty();
        boolean boolean36 = queueAr32.isFull();
        queueAr32.makeEmpty();
        queueAr16.enqueue((java.lang.Object) queueAr32);
        java.lang.Object obj39 = queueAr32.getFront();
        queueAr9.enqueue((java.lang.Object) queueAr32);
        queueAr9.dequeueAll();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean44 = queueAr9.isFull();
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.enqueue((java.lang.Object) (-2));
        boolean boolean49 = queueAr46.isFull();
        queueAr46.makeEmpty();
        boolean boolean51 = queueAr46.isEmpty();
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.QueueAr queueAr54 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr54.dequeueAll();
        boolean boolean56 = queueAr54.isEmpty();
        queueAr54.dequeueAll();
        queueAr54.makeEmpty();
        boolean boolean59 = queueAr54.isFull();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj62 = queueAr61.getFront();
        queueAr61.dequeueAll();
        java.lang.Object obj64 = queueAr61.dequeue();
        queueAr54.enqueue(obj64);
        queueAr54.makeEmpty();
        queueAr54.dequeueAll();
        queueAr46.enqueue((java.lang.Object) queueAr54);
        java.lang.Object obj69 = queueAr54.dequeue();
        DataStructures.QueueAr queueAr71 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr71.dequeueAll();
        java.lang.Object obj73 = queueAr71.getFront();
        java.lang.Object obj74 = queueAr71.getFront();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow75.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        queueAr71.enqueue((java.lang.Object) overflow75);
        java.lang.Object obj87 = queueAr71.getFront();
        java.lang.Object obj88 = queueAr71.dequeue();
        boolean boolean89 = queueAr71.isEmpty();
        java.lang.Object obj90 = queueAr71.dequeue();
        queueAr54.enqueue((java.lang.Object) queueAr71);
        queueAr54.dequeueAll();
        boolean boolean93 = queueAr54.isEmpty();
        DataStructures.QueueAr queueAr95 = new DataStructures.QueueAr(7);
        queueAr95.dequeueAll();
        queueAr54.enqueue((java.lang.Object) queueAr95);
        java.lang.Object obj98 = queueAr95.dequeue();
        queueAr9.enqueue(obj98);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        boolean boolean20 = queueAr16.isEmpty();
        java.lang.Object obj21 = queueAr16.getFront();
        java.lang.Object obj22 = queueAr16.dequeue();
        queueAr16.makeEmpty();
        boolean boolean24 = queueAr16.isFull();
        queueAr1.enqueue((java.lang.Object) boolean24);
        java.lang.Object obj26 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + false + "'", obj26, false);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        boolean boolean49 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr51 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr51.dequeueAll();
        java.lang.Object obj53 = queueAr51.getFront();
        java.lang.Object obj54 = queueAr51.getFront();
        queueAr51.makeEmpty();
        java.lang.Class<?> wildcardClass56 = queueAr51.getClass();
        queueAr9.enqueue((java.lang.Object) wildcardClass56);
        queueAr9.makeEmpty();
        java.lang.Class<?> wildcardClass59 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) 'a');
        queueAr1.enqueue((java.lang.Object) queueAr14);
        boolean boolean16 = queueAr14.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray51 = overflow40.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow57);
        overflow27.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray64 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow57.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.String str68 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        queueAr5.dequeueAll();
        java.lang.Object obj14 = queueAr5.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.Object obj70 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass71 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj14 = queueAr7.getFront();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        java.lang.Object obj19 = queueAr16.getFront();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        queueAr16.enqueue((java.lang.Object) overflow20);
        queueAr16.dequeueAll();
        queueAr7.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj34 = queueAr16.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow25);
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.String str31 = overflow19.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow25.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow39.addSuppressed((java.lang.Throwable) overflow64);
        overflow12.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray69 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        boolean boolean17 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj19 = queueAr1.dequeue();
        boolean boolean20 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow38.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray89 = overflow83.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray92 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow38.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str36 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = obj6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        queueAr13.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        queueAr11.dequeueAll();
        boolean boolean15 = queueAr11.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        queueAr11.makeEmpty();
        java.lang.Object obj16 = queueAr11.dequeue();
        queueAr11.dequeueAll();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        queueAr11.dequeueAll();
        boolean boolean21 = queueAr11.isEmpty();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        queueAr23.enqueue((java.lang.Object) (-3));
        java.lang.Object obj29 = queueAr23.dequeue();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow42);
        queueAr23.enqueue((java.lang.Object) overflow42);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray73 = overflow68.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow74);
        overflow54.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray86 = overflow85.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray89 = overflow87.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow87);
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray92 = overflow91.getSuppressed();
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        overflow91.addSuppressed((java.lang.Throwable) overflow93);
        overflow87.addSuppressed((java.lang.Throwable) overflow93);
        overflow68.addSuppressed((java.lang.Throwable) overflow93);
        overflow42.addSuppressed((java.lang.Throwable) overflow93);
        queueAr11.enqueue((java.lang.Object) overflow42);
        overflow2.addSuppressed((java.lang.Throwable) overflow42);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + (-3) + "'", obj29, (-3));
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray16 = overflow9.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray16);
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isEmpty();
        boolean boolean21 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass22 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.getFront();
        java.lang.Object obj19 = queueAr8.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj19);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        boolean boolean26 = queueAr1.isFull();
        boolean boolean27 = queueAr1.isEmpty();
        boolean boolean28 = queueAr1.isFull();
        java.lang.Object obj29 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj16 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean13 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow24.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        boolean boolean17 = queueAr12.isFull();
        queueAr12.enqueue((java.lang.Object) (-4L));
        boolean boolean20 = queueAr12.isFull();
        queueAr12.makeEmpty();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        boolean boolean27 = queueAr23.isFull();
        queueAr23.dequeueAll();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray38 = overflow31.getSuppressed();
        queueAr23.enqueue((java.lang.Object) throwableArray38);
        queueAr12.enqueue((java.lang.Object) throwableArray38);
        queueAr1.enqueue((java.lang.Object) throwableArray38);
        java.lang.Object obj42 = queueAr1.dequeue();
        java.lang.Object obj43 = queueAr1.getFront();
        DataStructures.QueueAr queueAr45 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj46 = queueAr45.getFront();
        queueAr45.dequeueAll();
        java.lang.Object obj48 = queueAr45.dequeue();
        boolean boolean49 = queueAr45.isFull();
        boolean boolean50 = queueAr45.isFull();
        queueAr45.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr45);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 9.6d + "'", obj5, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        java.lang.Object obj8 = queueAr5.getFront();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) boolean9);
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        java.lang.Object obj34 = queueAr1.dequeue();
        boolean boolean35 = queueAr1.isEmpty();
        boolean boolean36 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        boolean boolean13 = queueAr5.isEmpty();
        boolean boolean14 = queueAr5.isEmpty();
        boolean boolean15 = queueAr5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj5 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = null;
        queueAr1.enqueue(obj7);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 9.6d + "'", obj5, 9.6d);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        java.lang.Class<?> wildcardClass72 = queueAr13.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr24.getFront();
        boolean boolean34 = queueAr24.isFull();
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean37 = queueAr36.isEmpty();
        java.lang.Object obj38 = queueAr36.dequeue();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.dequeueAll();
        java.lang.Object obj42 = queueAr40.getFront();
        queueAr40.makeEmpty();
        boolean boolean44 = queueAr40.isFull();
        queueAr36.enqueue((java.lang.Object) queueAr40);
        java.lang.Object obj46 = queueAr36.dequeue();
        boolean boolean47 = queueAr36.isFull();
        queueAr36.makeEmpty();
        java.lang.Object obj49 = queueAr36.getFront();
        queueAr24.enqueue(obj49);
        queueAr24.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow58);
        overflow36.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow36.addSuppressed((java.lang.Throwable) overflow77);
        overflow6.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.String str83 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DataStructures.Overflow" + "'", str83, "DataStructures.Overflow");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        queueAr11.enqueue((java.lang.Object) overflow15);
        queueAr1.enqueue((java.lang.Object) overflow15);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj4 = queueAr3.getFront();
        queueAr3.dequeueAll();
        java.lang.Object obj6 = queueAr3.dequeue();
        boolean boolean7 = queueAr3.isFull();
        boolean boolean8 = queueAr3.isFull();
        queueAr1.enqueue((java.lang.Object) boolean8);
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        java.lang.Object obj17 = queueAr12.getFront();
        boolean boolean18 = queueAr12.isFull();
        queueAr1.enqueue((java.lang.Object) boolean18);
        java.lang.Object obj20 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + false + "'", obj20, false);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow43.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow68.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray86 = overflow75.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray93 = overflow92.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow92.getSuppressed();
        overflow89.addSuppressed((java.lang.Throwable) overflow92);
        java.lang.Throwable[] throwableArray96 = overflow92.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow92);
        overflow43.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray99 = overflow43.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean40 = queueAr26.isFull();
        queueAr26.makeEmpty();
        queueAr26.makeEmpty();
        boolean boolean43 = queueAr26.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray39 = overflow5.getSuppressed();
        java.lang.Class<?> wildcardClass40 = throwableArray39.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        java.lang.Object obj43 = queueAr41.getFront();
        queueAr41.makeEmpty();
        queueAr41.enqueue((java.lang.Object) (-3));
        boolean boolean47 = queueAr41.isEmpty();
        java.lang.Object obj48 = queueAr41.getFront();
        queueAr41.makeEmpty();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow64.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray82 = overflow71.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray89 = overflow88.getSuppressed();
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray92 = overflow88.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow88);
        overflow58.addSuppressed((java.lang.Throwable) overflow88);
        queueAr41.enqueue((java.lang.Object) overflow58);
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + (-3) + "'", obj48, (-3));
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow4.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray26 = overflow4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        boolean boolean13 = queueAr5.isFull();
        java.lang.Object obj14 = queueAr5.getFront();
        queueAr5.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.String str74 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DataStructures.Overflow" + "'", str74, "DataStructures.Overflow");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean24 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        boolean boolean30 = queueAr26.isEmpty();
        java.lang.Object obj31 = queueAr26.getFront();
        java.lang.Object obj32 = queueAr26.dequeue();
        boolean boolean33 = queueAr26.isFull();
        java.lang.Object obj34 = queueAr26.getFront();
        boolean boolean35 = queueAr26.isFull();
        queueAr26.dequeueAll();
        java.lang.Object obj37 = queueAr26.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr26);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        boolean boolean47 = queueAr16.isEmpty();
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        queueAr5.makeEmpty();
        java.lang.Object obj15 = queueAr5.getFront();
        queueAr5.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        queueAr5.makeEmpty();
        java.lang.Object obj15 = queueAr5.getFront();
        boolean boolean16 = queueAr5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass7 = throwableArray6.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str25 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DataStructures.Overflow" + "'", str25, "DataStructures.Overflow");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        boolean boolean8 = queueAr1.isEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-5) + "'", obj10, (-5));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow2.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow42);
        overflow26.addSuppressed((java.lang.Throwable) overflow42);
        overflow2.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.String str49 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DataStructures.Overflow" + "'", str49, "DataStructures.Overflow");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(100);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj5 = queueAr4.getFront();
        queueAr4.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj8 = queueAr4.dequeue();
        queueAr4.dequeueAll();
        boolean boolean10 = queueAr4.isFull();
        boolean boolean11 = queueAr4.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean13 = queueAr4.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 9.6d + "'", obj8, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 100);
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 100 + "'", obj12, 100);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray45 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        boolean boolean49 = queueAr47.isEmpty();
        queueAr47.dequeueAll();
        queueAr47.makeEmpty();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        queueAr47.enqueue((java.lang.Object) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.String str58 = overflow52.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow14.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        queueAr37.dequeueAll();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        queueAr37.enqueue((java.lang.Object) overflow44);
        overflow27.addSuppressed((java.lang.Throwable) overflow44);
        overflow14.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.String str76 = overflow27.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DataStructures.Overflow" + "'", str76, "DataStructures.Overflow");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.enqueue((java.lang.Object) (-4L));
        boolean boolean15 = queueAr9.isEmpty();
        queueAr9.makeEmpty();
        boolean boolean17 = queueAr9.isFull();
        boolean boolean18 = queueAr9.isFull();
        queueAr1.enqueue((java.lang.Object) boolean18);
        java.lang.Class<?> wildcardClass20 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean15 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        java.lang.Object obj4 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = null;
        queueAr1.enqueue(obj14);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray8);
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray65 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray68 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass69 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        boolean boolean11 = queueAr7.isEmpty();
        java.lang.Object obj12 = queueAr7.getFront();
        java.lang.Object obj13 = queueAr7.dequeue();
        queueAr7.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        boolean boolean22 = queueAr17.isFull();
        boolean boolean23 = queueAr17.isFull();
        java.lang.Object obj24 = queueAr17.dequeue();
        boolean boolean25 = queueAr17.isFull();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow26.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        queueAr17.enqueue((java.lang.Object) throwableArray37);
        queueAr7.enqueue((java.lang.Object) queueAr17);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow52.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow59.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow52.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray71 = overflow52.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr17.enqueue((java.lang.Object) overflow52);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray96 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow24.getSuppressed();
        java.lang.String str98 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "DataStructures.Overflow" + "'", str98, "DataStructures.Overflow");
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 1);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj20 = queueAr19.getFront();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr17.enqueue((java.lang.Object) queueAr19);
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass25 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        DataStructures.QueueAr queueAr57 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr57.dequeueAll();
        boolean boolean59 = queueAr57.isEmpty();
        queueAr57.dequeueAll();
        queueAr57.makeEmpty();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        queueAr57.enqueue((java.lang.Object) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray90 = overflow86.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.String str92 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DataStructures.Overflow" + "'", str92, "DataStructures.Overflow");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow25.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow38.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow25.addSuppressed((java.lang.Throwable) overflow38);
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray51 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow5.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj11 = queueAr10.getFront();
        queueAr10.dequeueAll();
        java.lang.Object obj13 = queueAr10.dequeue();
        java.lang.Object obj14 = queueAr10.getFront();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        queueAr1.dequeueAll();
        java.lang.Object obj19 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = obj19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.enqueue((java.lang.Object) (-4L));
        boolean boolean13 = queueAr7.isFull();
        queueAr7.dequeueAll();
        boolean boolean15 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        java.lang.Object obj17 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        queueAr19.enqueue((java.lang.Object) (-3));
        boolean boolean25 = queueAr19.isEmpty();
        java.lang.Object obj26 = queueAr19.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr19);
        queueAr19.makeEmpty();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + (-3) + "'", obj26, (-3));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj19 = queueAr1.dequeue();
        java.lang.Object obj20 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        queueAr6.makeEmpty();
        boolean boolean11 = queueAr6.isFull();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        java.lang.Object obj15 = queueAr13.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr13.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj23 = queueAr13.dequeue();
        java.lang.Object obj24 = queueAr13.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) 'a');
        queueAr13.enqueue((java.lang.Object) queueAr26);
        queueAr6.enqueue((java.lang.Object) queueAr26);
        queueAr1.enqueue((java.lang.Object) queueAr26);
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean32 = queueAr31.isEmpty();
        java.lang.Object obj33 = queueAr31.dequeue();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr35.dequeueAll();
        java.lang.Object obj37 = queueAr35.getFront();
        queueAr35.makeEmpty();
        boolean boolean39 = queueAr35.isFull();
        queueAr31.enqueue((java.lang.Object) queueAr35);
        java.lang.Object obj41 = queueAr31.dequeue();
        boolean boolean42 = queueAr31.isEmpty();
        boolean boolean43 = queueAr31.isFull();
        java.lang.Object obj44 = queueAr31.getFront();
        boolean boolean45 = queueAr31.isFull();
        java.lang.Object obj46 = queueAr31.getFront();
        java.lang.Object obj47 = queueAr31.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj47);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) '#');
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass20 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow67.addSuppressed((java.lang.Throwable) overflow81);
        overflow2.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray91 = overflow81.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray80 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow5.getSuppressed();
        java.lang.String str82 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DataStructures.Overflow" + "'", str82, "DataStructures.Overflow");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean13 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        java.lang.Class<?> wildcardClass15 = queueAr10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.makeEmpty();
        boolean boolean13 = queueAr5.isFull();
        boolean boolean14 = queueAr5.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj17 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        overflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray36 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow13.getSuppressed();
        java.lang.Class<?> wildcardClass38 = overflow13.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass38);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.String str5 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DataStructures.Overflow" + "'", str5, "DataStructures.Overflow");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow23.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str31 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) '#');
        java.lang.Object obj14 = queueAr13.getFront();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr1.enqueue(obj15);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        boolean boolean39 = queueAr37.isEmpty();
        queueAr37.dequeueAll();
        queueAr37.makeEmpty();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        queueAr37.enqueue((java.lang.Object) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray64 = overflow42.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow65.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow20.addSuppressed((java.lang.Throwable) overflow42);
        overflow0.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray74 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean8 = queueAr7.isEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean11 = queueAr10.isEmpty();
        java.lang.Object obj12 = queueAr10.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        queueAr14.makeEmpty();
        boolean boolean18 = queueAr14.isFull();
        queueAr10.enqueue((java.lang.Object) queueAr14);
        java.lang.Object obj20 = queueAr10.dequeue();
        queueAr7.enqueue((java.lang.Object) queueAr10);
        queueAr7.makeEmpty();
        java.lang.Object obj23 = queueAr7.dequeue();
        boolean boolean24 = queueAr7.isFull();
        java.lang.Class<?> wildcardClass25 = queueAr7.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass25);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        queueAr8.enqueue((java.lang.Object) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow13);
        java.lang.Object obj36 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "DataStructures.Overflow");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow8.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.String str17 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        java.lang.Object obj29 = queueAr27.getFront();
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow56);
        overflow34.addSuppressed((java.lang.Throwable) overflow44);
        queueAr27.enqueue((java.lang.Object) overflow34);
        overflow17.addSuppressed((java.lang.Throwable) overflow34);
        overflow5.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray66 = overflow5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow38.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray89 = overflow83.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray92 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        DataStructures.QueueAr queueAr44 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean45 = queueAr44.isEmpty();
        java.lang.Object obj46 = queueAr44.dequeue();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr48.dequeueAll();
        java.lang.Object obj50 = queueAr48.getFront();
        queueAr48.makeEmpty();
        boolean boolean52 = queueAr48.isFull();
        queueAr44.enqueue((java.lang.Object) queueAr48);
        java.lang.Object obj54 = queueAr44.dequeue();
        queueAr41.enqueue((java.lang.Object) queueAr44);
        java.lang.Object obj56 = queueAr44.getFront();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        queueAr44.enqueue((java.lang.Object) overflow69);
        overflow37.addSuppressed((java.lang.Throwable) overflow69);
        queueAr1.enqueue((java.lang.Object) overflow69);
        java.lang.Object obj76 = queueAr1.dequeue();
        java.lang.Object obj77 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "DataStructures.Overflow");
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray36 = overflow0.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray55 = overflow37.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.String str57 = overflow37.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DataStructures.Overflow" + "'", str57, "DataStructures.Overflow");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray98 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray99 = overflow23.getSuppressed();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr(2);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        boolean boolean18 = queueAr15.isEmpty();
        java.lang.Object obj19 = queueAr15.getFront();
        boolean boolean20 = queueAr15.isFull();
        java.lang.Object obj21 = queueAr15.getFront();
        java.lang.Object obj22 = queueAr15.getFront();
        boolean boolean23 = queueAr15.isFull();
        java.lang.Class<?> wildcardClass24 = queueAr15.getClass();
        queueAr11.enqueue((java.lang.Object) wildcardClass24);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        queueAr8.makeEmpty();
        java.lang.Object obj13 = queueAr8.dequeue();
        boolean boolean14 = queueAr8.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr(7);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr8.enqueue(obj18);
        queueAr1.enqueue(obj18);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow6.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow17.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow17.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        java.lang.Class<?> wildcardClass49 = overflow37.getClass();
        queueAr1.enqueue((java.lang.Object) overflow37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray96 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow83.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow0.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow44);
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow51);
        overflow0.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr5.makeEmpty();
        queueAr5.dequeueAll();
        queueAr5.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        overflow28.addSuppressed((java.lang.Throwable) overflow36);
        overflow20.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr20.makeEmpty();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        queueAr20.enqueue((java.lang.Object) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow49);
        overflow7.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow71.addSuppressed((java.lang.Throwable) overflow78);
        overflow56.addSuppressed((java.lang.Throwable) overflow78);
        overflow49.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray91 = overflow49.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        boolean boolean22 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr20.makeEmpty();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        queueAr20.enqueue((java.lang.Object) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow49);
        overflow7.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.String str54 = overflow49.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow2.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow46.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow46.addSuppressed((java.lang.Throwable) overflow66);
        overflow38.addSuppressed((java.lang.Throwable) overflow66);
        overflow11.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow84.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray88 = overflow84.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray90 = overflow38.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray92 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass93 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow38.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray89 = overflow83.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.String str92 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DataStructures.Overflow" + "'", str92, "DataStructures.Overflow");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean24 = queueAr17.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow50);
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.QueueAr queueAr61 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean62 = queueAr61.isEmpty();
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean65 = queueAr64.isEmpty();
        java.lang.Object obj66 = queueAr64.dequeue();
        DataStructures.QueueAr queueAr68 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr68.dequeueAll();
        java.lang.Object obj70 = queueAr68.getFront();
        queueAr68.makeEmpty();
        boolean boolean72 = queueAr68.isFull();
        queueAr64.enqueue((java.lang.Object) queueAr68);
        java.lang.Object obj74 = queueAr64.dequeue();
        queueAr61.enqueue((java.lang.Object) queueAr64);
        java.lang.Object obj76 = queueAr64.getFront();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow89);
        queueAr64.enqueue((java.lang.Object) overflow89);
        overflow57.addSuppressed((java.lang.Throwable) overflow89);
        overflow20.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray96 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        java.lang.Object obj2 = queueAr1.getFront();
        boolean boolean3 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        boolean boolean17 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean19 = queueAr12.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean19);
        java.lang.Object obj21 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + true + "'", obj21, true);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(8);
        boolean boolean2 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr(1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.dequeueAll();
        java.lang.Object obj9 = queueAr5.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow8.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray17 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        boolean boolean14 = queueAr5.isEmpty();
        boolean boolean15 = queueAr5.isEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray61 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow54.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr5.enqueue((java.lang.Object) overflow54);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = obj10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        DataStructures.QueueAr queueAr50 = new DataStructures.QueueAr(7);
        queueAr50.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr50);
        queueAr9.makeEmpty();
        boolean boolean54 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) 6);
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(2);
        java.lang.Object obj10 = queueAr9.dequeue();
        boolean boolean11 = queueAr9.isFull();
        java.lang.Object obj12 = queueAr9.dequeue();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.dequeueAll();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        overflow6.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray25 = overflow6.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str19 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DataStructures.Overflow" + "'", str19, "DataStructures.Overflow");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        boolean boolean16 = queueAr1.isFull();
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass18 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow38.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass18 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        java.lang.Object obj11 = queueAr9.getFront();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        boolean boolean48 = queueAr9.isEmpty();
        boolean boolean49 = queueAr9.isEmpty();
        java.lang.Object obj50 = queueAr9.getFront();
        queueAr9.enqueue((java.lang.Object) 5L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow11.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow22.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.QueueAr queueAr30 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr30.dequeueAll();
        boolean boolean32 = queueAr30.isEmpty();
        queueAr30.dequeueAll();
        queueAr30.makeEmpty();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        queueAr30.enqueue((java.lang.Object) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow35.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray65 = overflow22.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray65);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        queueAr12.makeEmpty();
        boolean boolean17 = queueAr12.isFull();
        java.lang.Object obj18 = queueAr12.getFront();
        queueAr12.dequeueAll();
        boolean boolean20 = queueAr12.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean20);
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        boolean boolean26 = queueAr24.isEmpty();
        queueAr24.dequeueAll();
        queueAr24.makeEmpty();
        java.lang.Object obj29 = queueAr24.dequeue();
        queueAr24.enqueue((java.lang.Object) (-5));
        queueAr24.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr5.makeEmpty();
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        java.lang.Object obj13 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj16 = queueAr1.dequeue();
        java.lang.Object obj17 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.getFront();
        java.lang.Object obj13 = queueAr5.getFront();
        java.lang.Object obj14 = queueAr5.getFront();
        java.lang.Object obj15 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow23.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray50 = overflow37.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray52 = overflow4.getSuppressed();
        java.lang.String str53 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DataStructures.Overflow" + "'", str53, "DataStructures.Overflow");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow28);
        overflow6.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow52.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow59.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow52.addSuppressed((java.lang.Throwable) overflow59);
        overflow36.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray72 = overflow36.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow76);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        overflow76.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow86);
        overflow73.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray91 = overflow73.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow73);
        overflow0.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray94 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray76 = overflow65.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow82);
        overflow52.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray89 = overflow82.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray91 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow38.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        overflow19.addSuppressed((java.lang.Throwable) overflow38);
        overflow11.addSuppressed((java.lang.Throwable) overflow38);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray45 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        boolean boolean49 = queueAr47.isEmpty();
        queueAr47.dequeueAll();
        queueAr47.makeEmpty();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        queueAr47.enqueue((java.lang.Object) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.String str58 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        queueAr1.makeEmpty();
        boolean boolean72 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray55 = overflow44.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow44);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        java.lang.Object obj25 = queueAr17.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr(6);
        queueAr17.enqueue((java.lang.Object) queueAr27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr33.isFull();
        DataStructures.QueueAr queueAr47 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr47.dequeueAll();
        java.lang.Object obj49 = queueAr47.getFront();
        java.lang.Object obj50 = queueAr47.getFront();
        boolean boolean51 = queueAr47.isFull();
        boolean boolean52 = queueAr47.isEmpty();
        boolean boolean53 = queueAr47.isEmpty();
        java.lang.Class<?> wildcardClass54 = queueAr47.getClass();
        queueAr33.enqueue((java.lang.Object) wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.getFront();
        boolean boolean17 = queueAr1.isFull();
        boolean boolean18 = queueAr1.isFull();
        java.lang.Object obj19 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        overflow38.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray78 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow67.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray81 = overflow67.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray83 = overflow67.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow6.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray24 = overflow13.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray36 = overflow30.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow30);
        java.lang.Throwable[] throwableArray38 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow30.getSuppressed();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        boolean boolean43 = queueAr41.isEmpty();
        queueAr41.dequeueAll();
        queueAr41.makeEmpty();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        queueAr41.enqueue((java.lang.Object) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.String str76 = overflow70.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DataStructures.Overflow" + "'", str76, "DataStructures.Overflow");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        overflow51.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow77);
        overflow51.addSuppressed((java.lang.Throwable) overflow71);
        overflow43.addSuppressed((java.lang.Throwable) overflow71);
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray85 = overflow16.getSuppressed();
        java.lang.Class<?> wildcardClass86 = throwableArray85.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        queueAr8.makeEmpty();
        java.lang.Object obj13 = queueAr8.dequeue();
        queueAr8.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray55 = overflow24.getSuppressed();
        java.lang.String str56 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DataStructures.Overflow" + "'", str56, "DataStructures.Overflow");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.getFront();
        java.lang.Object obj15 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.String str47 = overflow41.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DataStructures.Overflow" + "'", str47, "DataStructures.Overflow");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (byte) 10);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow35.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow35.addSuppressed((java.lang.Throwable) overflow55);
        overflow27.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.String str79 = overflow27.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DataStructures.Overflow" + "'", str79, "DataStructures.Overflow");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.enqueue((java.lang.Object) 2L);
        queueAr9.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean40 = queueAr9.isFull();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow41.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) overflow41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) 'a');
        queueAr1.enqueue((java.lang.Object) queueAr14);
        queueAr14.makeEmpty();
        java.lang.Class<?> wildcardClass17 = queueAr14.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow36.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray47 = overflow24.getSuppressed();
        java.lang.String str48 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DataStructures.Overflow" + "'", str48, "DataStructures.Overflow");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean17 = queueAr16.isEmpty();
        java.lang.Object obj18 = queueAr16.dequeue();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr20.dequeueAll();
        java.lang.Object obj22 = queueAr20.getFront();
        queueAr20.makeEmpty();
        boolean boolean24 = queueAr20.isFull();
        queueAr16.enqueue((java.lang.Object) queueAr20);
        java.lang.Object obj26 = queueAr16.dequeue();
        queueAr13.enqueue((java.lang.Object) queueAr16);
        java.lang.Object obj28 = queueAr16.getFront();
        java.lang.Object obj29 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow2.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        overflow23.addSuppressed((java.lang.Throwable) overflow45);
        overflow2.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.String str58 = overflow45.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        queueAr8.makeEmpty();
        java.lang.Object obj13 = queueAr8.dequeue();
        boolean boolean14 = queueAr8.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr(7);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr8.enqueue(obj18);
        queueAr1.enqueue(obj18);
        java.lang.Object obj21 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(100);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj5 = queueAr4.getFront();
        queueAr4.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj8 = queueAr4.dequeue();
        queueAr4.dequeueAll();
        boolean boolean10 = queueAr4.isFull();
        boolean boolean11 = queueAr4.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean13 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 9.6d + "'", obj8, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-5) + "'", obj9, (-5));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass14 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '4');
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        queueAr1.enqueue((java.lang.Object) overflow26);
        boolean boolean50 = queueAr1.isEmpty();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray36 = overflow2.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.QueueAr queueAr48 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean49 = queueAr48.isEmpty();
        java.lang.Object obj50 = queueAr48.dequeue();
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        java.lang.Object obj54 = queueAr52.getFront();
        queueAr52.makeEmpty();
        boolean boolean56 = queueAr52.isFull();
        queueAr48.enqueue((java.lang.Object) queueAr52);
        java.lang.Object obj58 = queueAr48.dequeue();
        boolean boolean59 = queueAr48.isEmpty();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow76);
        queueAr48.enqueue((java.lang.Object) overflow65);
        overflow42.addSuppressed((java.lang.Throwable) overflow65);
        overflow2.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray81 = overflow65.getSuppressed();
        java.lang.String str82 = overflow65.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "DataStructures.Overflow" + "'", str82, "DataStructures.Overflow");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-4L) + "'", obj10, (-4L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        java.lang.Class<?> wildcardClass20 = overflow7.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj18 = queueAr17.getFront();
        queueAr17.dequeueAll();
        java.lang.Object obj20 = queueAr17.dequeue();
        boolean boolean21 = queueAr17.isFull();
        queueAr1.enqueue((java.lang.Object) boolean21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow23.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray42 = overflow35.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray44 = overflow35.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr5.makeEmpty();
        queueAr5.makeEmpty();
        java.lang.Object obj13 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow31.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow60);
        overflow7.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        overflow71.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray86 = overflow71.getSuppressed();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray92 = overflow91.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow91.getSuppressed();
        overflow87.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray96 = overflow87.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow87);
        overflow31.addSuppressed((java.lang.Throwable) overflow87);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '4');
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        queueAr1.enqueue((java.lang.Object) overflow26);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow78);
        overflow56.addSuppressed((java.lang.Throwable) overflow66);
        overflow50.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray86 = overflow50.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow50);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray8);
        java.lang.Object obj10 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        java.lang.Object obj12 = queueAr5.dequeue();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.dequeueAll();
        java.lang.Object obj16 = queueAr14.getFront();
        java.lang.Object obj17 = queueAr14.getFront();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        queueAr14.enqueue((java.lang.Object) overflow18);
        java.lang.Throwable[] throwableArray30 = overflow18.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow38.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow51.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        overflow51.addSuppressed((java.lang.Throwable) overflow57);
        overflow38.addSuppressed((java.lang.Throwable) overflow51);
        overflow18.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray64 = overflow18.getSuppressed();
        queueAr5.enqueue((java.lang.Object) overflow18);
        java.lang.String str66 = overflow18.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DataStructures.Overflow" + "'", str66, "DataStructures.Overflow");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        overflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.QueueAr queueAr45 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr45.dequeueAll();
        java.lang.Object obj47 = queueAr45.getFront();
        queueAr45.makeEmpty();
        queueAr45.dequeueAll();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow74);
        overflow52.addSuppressed((java.lang.Throwable) overflow62);
        queueAr45.enqueue((java.lang.Object) overflow52);
        overflow23.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray83 = overflow23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = obj10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass21 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj7 = queueAr1.getFront();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = obj5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow46.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray69 = overflow46.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow73.addSuppressed((java.lang.Throwable) overflow79);
        overflow6.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray88 = overflow73.getSuppressed();
        java.lang.Class<?> wildcardClass89 = throwableArray88.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        java.lang.Object obj13 = queueAr11.getFront();
        java.lang.Object obj14 = queueAr11.getFront();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow15.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow15.addSuppressed((java.lang.Throwable) overflow21);
        queueAr11.enqueue((java.lang.Object) overflow15);
        queueAr1.enqueue((java.lang.Object) overflow15);
        java.lang.Object obj28 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        java.lang.Class<?> wildcardClass17 = throwableArray16.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        boolean boolean47 = queueAr9.isEmpty();
        boolean boolean48 = queueAr9.isEmpty();
        java.lang.Object obj49 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj12 = queueAr1.dequeue();
        boolean boolean13 = queueAr1.isEmpty();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean18 = queueAr17.isEmpty();
        java.lang.Object obj19 = queueAr17.dequeue();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        queueAr21.makeEmpty();
        boolean boolean25 = queueAr21.isFull();
        queueAr17.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj27 = queueAr17.dequeue();
        boolean boolean28 = queueAr17.isEmpty();
        boolean boolean29 = queueAr17.isFull();
        java.lang.Object obj30 = queueAr17.getFront();
        boolean boolean31 = queueAr17.isFull();
        java.lang.Object obj32 = queueAr17.getFront();
        boolean boolean33 = queueAr17.isFull();
        boolean boolean34 = queueAr17.isEmpty();
        java.lang.Class<?> wildcardClass35 = queueAr17.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow56.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray79 = overflow56.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow56);
        queueAr1.enqueue((java.lang.Object) overflow56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) 'a');
        DataStructures.QueueAr queueAr3 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean4 = queueAr3.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean7 = queueAr6.isEmpty();
        java.lang.Object obj8 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        queueAr6.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj16 = queueAr6.dequeue();
        queueAr3.enqueue((java.lang.Object) queueAr6);
        queueAr3.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr3);
        java.lang.Object obj20 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        queueAr22.makeEmpty();
        boolean boolean25 = queueAr22.isEmpty();
        queueAr22.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr22);
        java.lang.Object obj28 = queueAr22.dequeue();
        boolean boolean29 = queueAr22.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        queueAr5.makeEmpty();
        queueAr5.dequeueAll();
        java.lang.Class<?> wildcardClass13 = queueAr5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        java.lang.Object obj18 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr12.dequeueAll();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        queueAr12.enqueue((java.lang.Object) throwableArray27);
        queueAr1.enqueue((java.lang.Object) throwableArray27);
        java.lang.Class<?> wildcardClass30 = throwableArray27.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        boolean boolean10 = queueAr6.isEmpty();
        java.lang.Object obj11 = queueAr6.getFront();
        java.lang.Object obj12 = queueAr6.dequeue();
        java.lang.Object obj13 = queueAr6.dequeue();
        java.lang.Object obj14 = queueAr6.dequeue();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr6.enqueue((java.lang.Object) queueAr16);
        queueAr16.dequeueAll();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        boolean boolean18 = queueAr12.isEmpty();
        java.lang.Object obj19 = queueAr12.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        boolean boolean21 = queueAr12.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        queueAr8.enqueue((java.lang.Object) overflow13);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow13);
        java.lang.Object obj36 = queueAr1.getFront();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr38.dequeueAll();
        queueAr38.makeEmpty();
        boolean boolean41 = queueAr38.isEmpty();
        boolean boolean42 = queueAr38.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean42);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray87 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray53 = overflow49.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.String str62 = overflow37.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.QueueAr queueAr64 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr64.dequeueAll();
        java.lang.Object obj66 = queueAr64.getFront();
        queueAr64.makeEmpty();
        queueAr64.enqueue((java.lang.Object) (-3));
        java.lang.Object obj70 = queueAr64.dequeue();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow83.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow83);
        queueAr64.enqueue((java.lang.Object) overflow83);
        overflow26.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Class<?> wildcardClass91 = overflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + (-3) + "'", obj70, (-3));
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        java.lang.Object obj8 = queueAr5.getFront();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) boolean9);
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean13 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow12.getSuppressed();
        java.lang.String str23 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DataStructures.Overflow" + "'", str23, "DataStructures.Overflow");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.String str8 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DataStructures.Overflow" + "'", str8, "DataStructures.Overflow");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean16 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass14 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray16 = overflow8.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        queueAr18.makeEmpty();
        boolean boolean22 = queueAr18.isFull();
        boolean boolean23 = queueAr18.isEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow48.addSuppressed((java.lang.Throwable) overflow60);
        queueAr18.enqueue((java.lang.Object) overflow48);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow72.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow80.getSuppressed();
        overflow72.addSuppressed((java.lang.Throwable) overflow80);
        overflow48.addSuppressed((java.lang.Throwable) overflow72);
        overflow8.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray91 = overflow8.getSuppressed();
        java.lang.Class<?> wildcardClass92 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean16 = queueAr4.isFull();
        java.lang.Object obj17 = null;
        queueAr4.enqueue(obj17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(6);
        queueAr9.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        boolean boolean19 = queueAr13.isEmpty();
        java.lang.Object obj20 = queueAr13.getFront();
        queueAr13.makeEmpty();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow60);
        overflow30.addSuppressed((java.lang.Throwable) overflow60);
        queueAr13.enqueue((java.lang.Object) overflow30);
        queueAr13.dequeueAll();
        queueAr13.dequeueAll();
        queueAr9.enqueue((java.lang.Object) queueAr13);
        boolean boolean71 = queueAr13.isEmpty();
        queueAr13.makeEmpty();
        java.lang.Object obj73 = queueAr13.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-3) + "'", obj20, (-3));
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isEmpty();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        java.lang.Object obj23 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        boolean boolean25 = queueAr9.isFull();
        boolean boolean26 = queueAr9.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        java.lang.Object obj25 = queueAr9.dequeue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean11 = queueAr10.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean14 = queueAr13.isEmpty();
        java.lang.Object obj15 = queueAr13.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr13.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj23 = queueAr13.dequeue();
        queueAr10.enqueue((java.lang.Object) queueAr13);
        java.lang.Object obj25 = queueAr13.getFront();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        queueAr13.enqueue((java.lang.Object) overflow38);
        queueAr1.enqueue((java.lang.Object) overflow38);
        java.lang.Class<?> wildcardClass44 = overflow38.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow41);
        overflow19.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow19.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Class<?> wildcardClass52 = overflow19.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean13 = queueAr12.isEmpty();
        java.lang.Object obj14 = queueAr12.getFront();
        boolean boolean15 = queueAr12.isFull();
        queueAr12.makeEmpty();
        java.lang.Object obj17 = queueAr12.dequeue();
        java.lang.Object obj18 = queueAr12.dequeue();
        java.lang.Object obj19 = queueAr12.dequeue();
        queueAr12.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr12);
        boolean boolean22 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        java.lang.Object obj9 = queueAr7.getFront();
        queueAr7.makeEmpty();
        queueAr7.dequeueAll();
        queueAr7.dequeueAll();
        java.lang.Object obj13 = queueAr7.getFront();
        java.lang.Object obj14 = queueAr7.getFront();
        queueAr1.enqueue(obj14);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = obj6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        java.lang.Object obj17 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) ' ');
        queueAr9.makeEmpty();
        queueAr9.makeEmpty();
        java.lang.Class<?> wildcardClass12 = queueAr9.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray30);
        boolean boolean32 = queueAr1.isFull();
        java.lang.Object obj33 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj32 = queueAr1.getFront();
        boolean boolean33 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isFull();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + false + "'", obj14, false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean35 = queueAr34.isEmpty();
        java.lang.Object obj36 = queueAr34.dequeue();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr38.dequeueAll();
        java.lang.Object obj40 = queueAr38.getFront();
        queueAr38.makeEmpty();
        boolean boolean42 = queueAr38.isFull();
        queueAr34.enqueue((java.lang.Object) queueAr38);
        boolean boolean44 = queueAr38.isEmpty();
        boolean boolean45 = queueAr38.isFull();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray64 = overflow53.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow88);
        overflow70.addSuppressed((java.lang.Throwable) overflow82);
        queueAr38.enqueue((java.lang.Object) overflow70);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        overflow2.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray96 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray97 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray98 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray99 = overflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.enqueue((java.lang.Object) (-2));
        boolean boolean13 = queueAr10.isFull();
        queueAr10.makeEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        boolean boolean14 = queueAr10.isFull();
        java.lang.Object obj15 = queueAr10.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        queueAr10.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr20 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj21 = queueAr20.getFront();
        queueAr20.dequeueAll();
        java.lang.Object obj23 = queueAr20.dequeue();
        java.lang.Object obj24 = queueAr20.getFront();
        boolean boolean25 = queueAr20.isEmpty();
        queueAr20.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr20);
        queueAr20.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj32 = queueAr1.dequeue();
        java.lang.Object obj33 = queueAr1.getFront();
        boolean boolean34 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean26 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass27 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.enqueue((java.lang.Object) 1L);
        queueAr9.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray32 = overflow7.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow49);
        overflow7.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.String str52 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DataStructures.Overflow" + "'", str52, "DataStructures.Overflow");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj28 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean31 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 0);
        queueAr1.enqueue((java.lang.Object) queueAr33);
        boolean boolean35 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean37 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow24.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Class<?> wildcardClass54 = overflow11.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj10 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj12 = queueAr9.dequeue();
        boolean boolean13 = queueAr9.isFull();
        java.lang.Class<?> wildcardClass14 = queueAr9.getClass();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean16 = queueAr9.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        boolean boolean20 = queueAr15.isEmpty();
        queueAr15.makeEmpty();
        queueAr15.dequeueAll();
        queueAr15.makeEmpty();
        java.lang.Object obj24 = queueAr15.getFront();
        java.lang.Object obj25 = queueAr15.getFront();
        boolean boolean26 = queueAr15.isEmpty();
        queueAr1.enqueue((java.lang.Object) boolean26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj12 = queueAr1.dequeue();
        boolean boolean13 = queueAr1.isEmpty();
        java.lang.Object obj14 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        boolean boolean26 = queueAr1.isFull();
        java.lang.Object obj27 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass28 = obj27.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj32 = queueAr1.dequeue();
        java.lang.Object obj33 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "DataStructures.Overflow");
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        queueAr11.makeEmpty();
        queueAr11.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.String str68 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.String str54 = overflow40.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow0.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        overflow54.addSuppressed((java.lang.Throwable) overflow61);
        overflow39.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray82 = overflow73.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray84 = overflow61.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray86 = overflow33.getSuppressed();
        java.lang.String str87 = overflow33.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Overflow" + "'", str87, "DataStructures.Overflow");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        java.lang.Object obj17 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass13 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(10);
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        queueAr1.dequeueAll();
        boolean boolean39 = queueAr1.isEmpty();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow52.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow52.addSuppressed((java.lang.Throwable) overflow66);
        queueAr1.enqueue((java.lang.Object) overflow52);
        java.lang.Class<?> wildcardClass76 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        queueAr1.makeEmpty();
        boolean boolean71 = queueAr1.isFull();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray35 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow20.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray38 = overflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 0);
        java.lang.Object obj9 = queueAr8.getFront();
        boolean boolean10 = queueAr8.isEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr8.getClass();
        queueAr1.enqueue((java.lang.Object) queueAr8);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow37.addSuppressed((java.lang.Throwable) overflow49);
        queueAr5.enqueue((java.lang.Object) overflow37);
        java.lang.Object obj61 = queueAr5.dequeue();
        queueAr5.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "DataStructures.Overflow");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean35 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.makeEmpty();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        queueAr11.enqueue((java.lang.Object) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray38 = overflow16.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray46 = overflow16.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow16);
        java.lang.Object obj48 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "DataStructures.Overflow");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        java.lang.Object obj34 = queueAr1.getFront();
        java.lang.Object obj35 = queueAr1.getFront();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass34 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Class<?> wildcardClass24 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow25.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow38.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow25.addSuppressed((java.lang.Throwable) overflow38);
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray51 = overflow5.getSuppressed();
        java.lang.Class<?> wildcardClass52 = throwableArray51.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-6.9d) + "'", obj9, (-6.9d));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass24 = throwableArray23.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        boolean boolean15 = queueAr10.isFull();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj18 = queueAr17.getFront();
        queueAr17.dequeueAll();
        java.lang.Object obj20 = queueAr17.dequeue();
        queueAr10.enqueue(obj20);
        queueAr10.makeEmpty();
        boolean boolean23 = queueAr10.isEmpty();
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        boolean boolean27 = queueAr25.isEmpty();
        queueAr25.dequeueAll();
        queueAr25.makeEmpty();
        boolean boolean30 = queueAr25.isFull();
        DataStructures.QueueAr queueAr32 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj33 = queueAr32.getFront();
        queueAr32.dequeueAll();
        java.lang.Object obj35 = queueAr32.dequeue();
        queueAr25.enqueue(obj35);
        queueAr25.makeEmpty();
        queueAr25.dequeueAll();
        java.lang.Object obj39 = queueAr25.getFront();
        queueAr10.enqueue((java.lang.Object) queueAr25);
        java.lang.Object obj41 = queueAr25.getFront();
        java.lang.Object obj42 = queueAr25.dequeue();
        queueAr1.enqueue(obj42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow19.addSuppressed((java.lang.Throwable) overflow27);
        queueAr1.enqueue((java.lang.Object) overflow27);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        java.lang.Object obj19 = queueAr1.getFront();
        java.lang.Object obj20 = queueAr1.getFront();
        java.lang.Object obj21 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow11.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray18 = overflow6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean18 = queueAr1.isFull();
        java.lang.Object obj19 = queueAr1.getFront();
        java.lang.Object obj20 = queueAr1.dequeue();
        boolean boolean21 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.dequeue();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray28 = overflow17.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray38 = overflow34.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        overflow42.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        overflow42.addSuppressed((java.lang.Throwable) overflow62);
        overflow34.addSuppressed((java.lang.Throwable) overflow62);
        overflow7.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray84 = overflow80.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow80);
        queueAr1.enqueue((java.lang.Object) overflow34);
        java.lang.String str87 = overflow34.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Overflow" + "'", str87, "DataStructures.Overflow");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow31.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow60);
        overflow7.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray67 = overflow7.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow14.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        overflow14.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray63 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow59.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.String str87 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Overflow" + "'", str87, "DataStructures.Overflow");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.enqueue((java.lang.Object) 9.6d);
        java.lang.Object obj19 = queueAr15.dequeue();
        queueAr15.dequeueAll();
        boolean boolean21 = queueAr15.isFull();
        boolean boolean22 = queueAr15.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Class<?> wildcardClass24 = queueAr15.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + false + "'", obj11, false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + 9.6d + "'", obj19, 9.6d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow38.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow53.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray80 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow67.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow67);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isFull();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        java.lang.Object obj24 = queueAr21.getFront();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        queueAr21.enqueue((java.lang.Object) overflow25);
        java.lang.Object obj37 = queueAr21.getFront();
        java.lang.Object obj38 = queueAr21.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj40 = queueAr1.getFront();
        java.lang.Object obj41 = queueAr1.getFront();
        boolean boolean42 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj44 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        overflow35.addSuppressed((java.lang.Throwable) overflow53);
        overflow2.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        overflow35.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        overflow35.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray86 = overflow74.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray86);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        java.lang.Object obj3 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        queueAr1.dequeueAll();
        java.lang.Object obj18 = queueAr1.getFront();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        boolean boolean32 = queueAr1.isEmpty();
        java.lang.Object obj33 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        boolean boolean15 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.enqueue((java.lang.Object) (-4L));
        boolean boolean10 = queueAr4.isFull();
        queueAr4.dequeueAll();
        boolean boolean12 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr14.getClass();
        queueAr4.enqueue((java.lang.Object) wildcardClass18);
        queueAr4.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj22 = queueAr4.dequeue();
        queueAr4.makeEmpty();
        java.lang.Object obj24 = queueAr4.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Object obj5 = queueAr1.getFront();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj10 = queueAr1.dequeue();
        boolean boolean11 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj20 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow10.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray39 = overflow30.getSuppressed();
        java.lang.Class<?> wildcardClass40 = overflow30.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        boolean boolean17 = queueAr1.isEmpty();
        java.lang.Object obj18 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean20 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr40 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr40.enqueue((java.lang.Object) (-2));
        boolean boolean43 = queueAr40.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr40);
        queueAr40.makeEmpty();
        java.lang.Object obj46 = queueAr40.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        boolean boolean70 = queueAr1.isFull();
        java.lang.Object obj71 = queueAr1.dequeue();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "DataStructures.Overflow");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.getFront();
        boolean boolean16 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.dequeue();
        java.lang.Object obj26 = queueAr9.getFront();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean29 = queueAr28.isEmpty();
        java.lang.Object obj30 = queueAr28.dequeue();
        boolean boolean31 = queueAr28.isEmpty();
        queueAr28.makeEmpty();
        queueAr28.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr28);
        DataStructures.QueueAr queueAr36 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr36.dequeueAll();
        boolean boolean38 = queueAr36.isEmpty();
        queueAr36.dequeueAll();
        boolean boolean40 = queueAr36.isEmpty();
        java.lang.Object obj41 = queueAr36.getFront();
        java.lang.Object obj42 = queueAr36.dequeue();
        queueAr36.makeEmpty();
        java.lang.Object obj44 = queueAr36.getFront();
        queueAr36.dequeueAll();
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr36);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj14 = queueAr13.getFront();
        queueAr13.dequeueAll();
        java.lang.Object obj16 = queueAr13.dequeue();
        java.lang.Object obj17 = queueAr13.dequeue();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        queueAr13.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr13);
        boolean boolean22 = queueAr13.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isEmpty();
        java.lang.Object obj10 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        boolean boolean45 = queueAr33.isFull();
        java.lang.Class<?> wildcardClass46 = queueAr33.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj18 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        java.lang.Object obj17 = queueAr12.getFront();
        java.lang.Object obj18 = queueAr12.dequeue();
        java.lang.Object obj19 = queueAr12.dequeue();
        java.lang.Object obj20 = queueAr12.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj23 = queueAr22.getFront();
        queueAr12.enqueue((java.lang.Object) queueAr22);
        boolean boolean25 = queueAr12.isEmpty();
        boolean boolean26 = queueAr12.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean26);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-4L) + "'", obj8, (-4L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow21);
        overflow5.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow47.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow47);
        overflow5.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray66 = overflow47.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass12 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow8.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray30 = overflow20.getSuppressed();
        java.lang.Throwable throwable31 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow20.addSuppressed(throwable31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        java.lang.Object obj12 = queueAr1.dequeue();
        java.lang.Object obj13 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        boolean boolean20 = queueAr16.isEmpty();
        java.lang.Object obj21 = queueAr16.getFront();
        boolean boolean22 = queueAr16.isFull();
        queueAr16.makeEmpty();
        boolean boolean24 = queueAr16.isFull();
        java.lang.Object obj25 = queueAr16.dequeue();
        boolean boolean26 = queueAr16.isFull();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        queueAr16.enqueue((java.lang.Object) throwableArray43);
        boolean boolean45 = queueAr16.isFull();
        java.lang.Object obj46 = queueAr16.dequeue();
        queueAr1.enqueue(obj46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
    }
}

