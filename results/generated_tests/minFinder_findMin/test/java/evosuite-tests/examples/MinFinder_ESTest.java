/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 22:34:49 GMT 2023
 */

package examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import examples.MinFinder;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinFinder_ESTest extends MinFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-1));
      MinFinder.T minFinder_T1 = new MinFinder.T(0);
      boolean boolean0 = minFinder_T0.equals(minFinder_T1);
      assertFalse(boolean0);
      assertFalse(minFinder_T1.equals((Object)minFinder_T0));
      assertEquals((-1), minFinder_T0.getVal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      arrayList0.add((MinFinder.T) null);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      MinFinder.T minFinder_T0 = new MinFinder.T((-505));
      arrayList0.add(minFinder_T0);
      minFinder0.chval((MinFinder.T) null, (-1854));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder.T minFinder_T0 = new MinFinder.T((-1461));
      arrayList0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(448);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      minFinder0.add(minFinder_T1);
      assertEquals(448, minFinder_T1.getVal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder.T minFinder_T0 = new MinFinder.T((-1461));
      arrayList0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(448);
      arrayList0.add(minFinder_T1);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      minFinder0.add(minFinder_T0);
      assertEquals((-1461), minFinder_T0.getVal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(0);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = minFinder0.findMin();
      assertEquals(0, minFinder_T1.getVal());
      assertNotNull(minFinder_T1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(3111);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = minFinder0.findMin();
      assertNotNull(minFinder_T1);
      assertEquals(3111, minFinder_T1.getVal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder.T minFinder_T0 = new MinFinder.T((-1));
      arrayList0.add(minFinder_T0);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      MinFinder.T minFinder_T1 = minFinder0.findMin();
      assertEquals((-1), minFinder_T1.getVal());
      assertNotNull(minFinder_T1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder minFinder0 = new MinFinder(arrayList0);
      minFinder0.add((MinFinder.T) null);
      // Undeclared exception!
      try { 
        minFinder0.add((MinFinder.T) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinFinder minFinder0 = null;
      try {
        minFinder0 = new MinFinder((ArrayList<MinFinder.T>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-1));
      int int0 = minFinder_T0.getVal();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      minFinder0.clear();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinFinder.T minFinder_T0 = new MinFinder.T((-484));
      boolean boolean0 = minFinder_T0.equals(minFinder_T0);
      assertTrue(boolean0);
      assertEquals((-484), minFinder_T0.getVal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(347);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(12);
      // Undeclared exception!
      try { 
        minFinder0.chval(minFinder_T1, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("examples.MinFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder.T minFinder_T0 = new MinFinder.T(0);
      arrayList0.add(minFinder_T0);
      MinFinder minFinder0 = new MinFinder(arrayList0);
      arrayList0.add(minFinder_T0);
      minFinder0.chval((MinFinder.T) null, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<MinFinder.T> arrayList0 = new ArrayList<MinFinder.T>();
      MinFinder.T minFinder_T0 = new MinFinder.T((-36));
      arrayList0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T((-492));
      arrayList0.add(minFinder_T1);
      MinFinder minFinder0 = new MinFinder(arrayList0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = new MinFinder.T(347);
      minFinder0.add(minFinder_T0);
      MinFinder.T minFinder_T1 = new MinFinder.T(12);
      minFinder0.add(minFinder_T1);
      minFinder0.chval((MinFinder.T) null, 12);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinFinder minFinder0 = new MinFinder();
      MinFinder.T minFinder_T0 = minFinder0.findMin();
      assertNull(minFinder_T0);
  }
}
