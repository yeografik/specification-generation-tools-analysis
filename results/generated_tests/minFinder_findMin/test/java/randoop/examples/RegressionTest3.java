package examples;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t25 = minFinder0.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t31 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        minFinder33.add(t38);
        examples.MinFinder.T t41 = minFinder33.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        boolean boolean50 = t43.equals((java.lang.Object) 100.0d);
        minFinder33.add(t43);
        int int52 = t43.getVal();
        minFinder26.add(t43);
        minFinder0.add(t43);
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(t41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        int int43 = t42.getVal();
        minFinder40.chval(t42, (-100));
        minFinder39.add(t42);
        minFinder0.add(t42);
        examples.MinFinder.T t48 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-9) + "'", int43 == (-9));
        org.junit.Assert.assertNotNull(t48);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        java.lang.Class<?> wildcardClass77 = tList56.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        minFinder28.clear();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        minFinder30.clear();
        examples.MinFinder.T t44 = minFinder30.findMin();
        minFinder30.clear();
        minFinder30.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-1));
        minFinder47.chval(t52, 100);
        boolean boolean56 = t52.equals((java.lang.Object) 5L);
        minFinder30.add(t52);
        examples.MinFinder.T t58 = minFinder30.findMin();
        minFinder28.chval(t58, 10);
        minFinder28.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(t58);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        minFinder32.add(t61);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        java.lang.Object obj70 = null;
        boolean boolean71 = t65.equals(obj70);
        int int72 = t65.getVal();
        minFinder32.add(t65);
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        minFinder39.add(t53);
        examples.MinFinder.T t55 = minFinder39.findMin();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        int int64 = t63.getVal();
        minFinder56.chval(t63, 10);
        int int67 = t63.getVal();
        minFinder39.add(t63);
        examples.MinFinder.T t69 = minFinder39.findMin();
        minFinder0.chval(t69, (int) (short) 100);
        minFinder0.clear();
        examples.MinFinder.T t73 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass74 = t73.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-9) + "'", int67 == (-9));
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNull(t73);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder0.add(t66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        minFinder68.chval(t74, (int) ' ');
        int int83 = t74.getVal();
        java.lang.Class<?> wildcardClass84 = t74.getClass();
        boolean boolean85 = t66.equals((java.lang.Object) t74);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder.T t21 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList59);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t65 = minFinder63.findMin();
        boolean boolean66 = t14.equals((java.lang.Object) minFinder63);
        minFinder63.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        minFinder41.chval(t50, 0);
        examples.MinFinder.T t58 = null;
        minFinder41.add(t58);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        boolean boolean20 = t6.equals((java.lang.Object) minFinder7);
        minFinder7.clear();
        examples.MinFinder.T t22 = minFinder7.findMin();
        examples.MinFinder.T t23 = minFinder7.findMin();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        minFinder24.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        minFinder24.add(t29);
        examples.MinFinder.T t33 = new examples.MinFinder.T(1);
        boolean boolean34 = t29.equals((java.lang.Object) t33);
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder7.chval(t33, (int) (byte) 0);
        minFinder0.chval(t33, 100);
        examples.MinFinder.T t41 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(t41);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t31 = minFinder0.findMin();
        examples.MinFinder.T t32 = minFinder0.findMin();
        int int33 = t32.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(t31);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-9) + "'", int33 == (-9));
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-1));
        minFinder20.chval(t25, 100);
        boolean boolean29 = t25.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder30.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        minFinder30.chval(t45, (int) '4');
        boolean boolean48 = t25.equals((java.lang.Object) minFinder30);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        minFinder30.add(t50);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        minFinder55.add(t69);
        examples.MinFinder.T t72 = minFinder55.findMin();
        boolean boolean73 = t50.equals((java.lang.Object) minFinder55);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t77 = minFinder74.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-1));
        minFinder74.chval(t79, 100);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        minFinder74.add(t83);
        minFinder74.clear();
        boolean boolean88 = t50.equals((java.lang.Object) minFinder74);
        java.lang.Class<?> wildcardClass89 = t50.getClass();
        boolean boolean90 = t16.equals((java.lang.Object) t50);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t26 = minFinder13.findMin();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t32 = minFinder27.findMin();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder.T t35 = minFinder27.findMin();
        examples.MinFinder.T t36 = null;
        minFinder27.chval(t36, (-9));
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder39.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 0);
        minFinder39.chval(t54, (int) '4');
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        minFinder57.add(t66);
        minFinder57.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (short) 0);
        minFinder57.chval(t72, (int) '4');
        minFinder39.add(t72);
        examples.MinFinder.T t76 = minFinder39.findMin();
        examples.MinFinder.T t77 = minFinder39.findMin();
        minFinder27.chval(t77, 0);
        minFinder13.chval(t77, (-7));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        int int69 = t63.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t33, t35, t42, t47, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList71);
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder0.add(t80);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t80);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        minFinder17.add(t22);
        minFinder17.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        minFinder17.add(t27);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        minFinder17.add(t30);
        examples.MinFinder.T t32 = minFinder17.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(2);
        minFinder17.add(t34);
        int int36 = t34.getVal();
        minFinder0.add(t34);
        int int38 = t34.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        boolean boolean32 = t25.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        minFinder33.chval(t39, 0);
        minFinder33.clear();
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        boolean boolean51 = t49.equals((java.lang.Object) ' ');
        minFinder33.add(t49);
        boolean boolean53 = t25.equals((java.lang.Object) t49);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        minFinder82.add(t84);
        boolean boolean86 = t25.equals((java.lang.Object) t84);
        minFinder0.chval(t25, (int) ' ');
        examples.MinFinder.T t89 = null;
        minFinder0.add(t89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList29);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder.T t67 = minFinder66.findMin();
        int int68 = t67.getVal();
        minFinder38.add(t67);
        examples.MinFinder.T t70 = minFinder38.findMin();
        minFinder0.add(t70);
        examples.MinFinder.T t72 = minFinder0.findMin();
        examples.MinFinder.T t73 = minFinder0.findMin();
        int int74 = t73.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        examples.MinFinder.T t33 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(t33);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        examples.MinFinder.T[] tArray87 = new examples.MinFinder.T[] { t50, t52, t59, t64, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList88 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList88, tArray87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList88);
        examples.MinFinder.T t92 = new examples.MinFinder.T((-3));
        minFinder90.add(t92);
        examples.MinFinder.T t94 = minFinder90.findMin();
        int int95 = t94.getVal();
        boolean boolean97 = t94.equals((java.lang.Object) '4');
        minFinder0.add(t94);
        int int99 = t94.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(tArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-3) + "'", int99 == (-3));
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = minFinder23.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        int int91 = t90.getVal();
        minFinder61.add(t90);
        examples.MinFinder.T t93 = minFinder61.findMin();
        minFinder23.add(t93);
        examples.MinFinder.T t95 = minFinder23.findMin();
        examples.MinFinder.T t96 = minFinder23.findMin();
        examples.MinFinder.T t97 = minFinder23.findMin();
        minFinder2.add(t97);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertNotNull(t95);
        org.junit.Assert.assertNotNull(t96);
        org.junit.Assert.assertNotNull(t97);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(6);
        int int13 = t12.getVal();
        minFinder0.chval(t12, 97);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList43);
        boolean boolean51 = t17.equals((java.lang.Object) minFinder50);
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) '#');
        int int54 = t53.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        int int78 = t77.getVal();
        examples.MinFinder.T[] tArray79 = new examples.MinFinder.T[] { t58, t60, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList80 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList80, tArray79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList80);
        java.lang.Class<?> wildcardClass84 = tList80.getClass();
        boolean boolean85 = t56.equals((java.lang.Object) tList80);
        boolean boolean86 = t53.equals((java.lang.Object) t56);
        minFinder50.add(t53);
        minFinder0.chval(t53, 0);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertNotNull(tArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        minFinder39.clear();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        boolean boolean58 = t44.equals((java.lang.Object) minFinder45);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) (short) 0);
        int int61 = t60.getVal();
        minFinder45.chval(t60, (-5));
        minFinder39.chval(t60, (-4));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        minFinder57.add(t66);
        boolean boolean70 = t56.equals((java.lang.Object) minFinder57);
        minFinder57.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder57.chval(t73, 1);
        minFinder42.add(t73);
        int int77 = t73.getVal();
        minFinder41.add(t73);
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 100);
        minFinder73.add(t76);
        examples.MinFinder.T t78 = minFinder73.findMin();
        minFinder38.chval(t78, (int) (short) 100);
        minFinder38.clear();
        minFinder38.clear();
        examples.MinFinder.T t83 = minFinder38.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertNull(t83);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t34);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        minFinder38.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder38.chval(t54, 1);
        examples.MinFinder.T t57 = minFinder38.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        minFinder58.clear();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) (-1));
        int int79 = t76.getVal();
        minFinder62.chval(t76, 0);
        minFinder58.add(t76);
        minFinder38.chval(t76, 8);
        examples.MinFinder.T t86 = new examples.MinFinder.T(3);
        minFinder38.add(t86);
        examples.MinFinder.T t88 = minFinder38.findMin();
        minFinder29.add(t88);
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNotNull(t88);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(2);
        minFinder0.add(t85);
        java.lang.Class<?> wildcardClass87 = t85.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t11.equals((java.lang.Object) minFinder12);
        minFinder12.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder12.chval(t28, 1);
        examples.MinFinder.T t31 = minFinder12.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) (short) 100);
        minFinder59.add(t62);
        examples.MinFinder.T t64 = minFinder59.findMin();
        minFinder12.add(t64);
        int int66 = t64.getVal();
        minFinder0.add(t64);
        examples.MinFinder.T t68 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNotNull(t68);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        minFinder2.chval(t25, (int) ' ');
        minFinder0.add(t25);
        java.lang.Object obj32 = null;
        boolean boolean33 = t25.equals(obj32);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        boolean boolean63 = t25.equals((java.lang.Object) t61);
        java.lang.Class<?> wildcardClass64 = t61.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        boolean boolean36 = t34.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        int int57 = t56.getVal();
        minFinder37.chval(t56, (int) (byte) 0);
        examples.MinFinder.T t60 = minFinder37.findMin();
        boolean boolean61 = t34.equals((java.lang.Object) minFinder37);
        int int62 = t34.getVal();
        minFinder0.add(t34);
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        minFinder66.chval(t72, 0);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-9));
        int int82 = t81.getVal();
        minFinder79.chval(t81, (-100));
        minFinder66.chval(t81, 0);
        boolean boolean87 = t65.equals((java.lang.Object) t81);
        examples.MinFinder.T t89 = new examples.MinFinder.T(10);
        boolean boolean90 = t81.equals((java.lang.Object) 10);
        minFinder0.add(t81);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-9) + "'", int82 == (-9));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t38 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        examples.MinFinder.T t41 = minFinder33.findMin();
        examples.MinFinder.T t42 = minFinder33.findMin();
        examples.MinFinder.T t43 = minFinder33.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        boolean boolean52 = t45.equals((java.lang.Object) 100.0d);
        int int53 = t45.getVal();
        minFinder33.add(t45);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        minFinder55.chval(t61, 0);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        minFinder68.add(t77);
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        minFinder68.add(t82);
        minFinder55.add(t82);
        boolean boolean86 = t45.equals((java.lang.Object) minFinder55);
        examples.MinFinder.T t87 = minFinder55.findMin();
        minFinder0.chval(t87, 10);
        java.lang.Class<?> wildcardClass90 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        boolean boolean25 = t23.equals((java.lang.Object) 6);
        minFinder12.chval(t23, 97);
        boolean boolean28 = t10.equals((java.lang.Object) t23);
        int int29 = t10.getVal();
        minFinder0.chval(t10, (-6));
        minFinder0.clear();
        examples.MinFinder.T t33 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass34 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-8));
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        examples.MinFinder.T t8 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        minFinder2.add(t11);
        int int15 = t11.getVal();
        boolean boolean16 = t1.equals((java.lang.Object) t11);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        minFinder49.add(t52);
        examples.MinFinder.T t54 = minFinder49.findMin();
        minFinder2.add(t54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder69.chval(t72, (int) (short) -1);
        minFinder63.add(t72);
        boolean boolean76 = t62.equals((java.lang.Object) minFinder63);
        minFinder63.clear();
        examples.MinFinder.T t78 = minFinder63.findMin();
        examples.MinFinder.T t79 = minFinder63.findMin();
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t81 = minFinder80.findMin();
        minFinder80.clear();
        minFinder80.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) 'a');
        int int86 = t85.getVal();
        minFinder80.add(t85);
        examples.MinFinder.T t89 = new examples.MinFinder.T(1);
        boolean boolean90 = t85.equals((java.lang.Object) t89);
        int int91 = t89.getVal();
        int int92 = t89.getVal();
        minFinder63.chval(t89, (int) (byte) 0);
        minFinder56.chval(t89, 100);
        minFinder2.add(t89);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        int int69 = t29.getVal();
        int int70 = t29.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t26 = minFinder13.findMin();
        java.lang.Class<?> wildcardClass27 = minFinder13.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t52 = minFinder38.findMin();
        examples.MinFinder.T t53 = minFinder38.findMin();
        examples.MinFinder.T t54 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 0);
        int int58 = t57.getVal();
        boolean boolean60 = t57.equals((java.lang.Object) 2);
        int int61 = t57.getVal();
        minFinder38.chval(t57, (-6));
        minFinder38.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T(100);
        minFinder38.add(t66);
        minFinder0.chval(t66, 0);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        java.lang.Class<?> wildcardClass48 = t22.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t58 = new examples.MinFinder.T(0);
        minFinder56.add(t58);
        minFinder0.chval(t58, 100);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        minFinder0.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((int) (byte) 10);
        minFinder0.chval(t18, 0);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        minFinder21.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        minFinder21.add(t26);
        int int29 = t26.getVal();
        minFinder0.add(t26);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t34 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        minFinder31.chval(t37, 0);
        minFinder31.clear();
        examples.MinFinder.T t45 = minFinder31.findMin();
        examples.MinFinder.T t46 = minFinder31.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        boolean boolean62 = t48.equals((java.lang.Object) minFinder49);
        minFinder31.add(t48);
        int int64 = t48.getVal();
        int int65 = t48.getVal();
        minFinder0.add(t48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        minFinder49.add(t63);
        examples.MinFinder.T t65 = minFinder49.findMin();
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        minFinder66.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-9));
        int int74 = t73.getVal();
        minFinder66.chval(t73, 10);
        int int77 = t73.getVal();
        minFinder49.add(t73);
        examples.MinFinder.T t79 = minFinder49.findMin();
        minFinder47.add(t79);
        examples.MinFinder.T t81 = minFinder47.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-9) + "'", int74 == (-9));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(t81);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        boolean boolean41 = t39.equals((java.lang.Object) 9L);
        minFinder37.add(t39);
        minFinder37.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder37.chval(t45, (int) (short) 10);
        minFinder37.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        int int13 = t12.getVal();
        java.lang.Class<?> wildcardClass14 = t12.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        boolean boolean27 = t13.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t28 = minFinder14.findMin();
        examples.MinFinder.T t29 = minFinder14.findMin();
        examples.MinFinder.T t30 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        boolean boolean36 = t33.equals((java.lang.Object) 2);
        int int37 = t33.getVal();
        minFinder14.chval(t33, (-6));
        minFinder14.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T(100);
        minFinder14.add(t42);
        boolean boolean44 = t10.equals((java.lang.Object) t42);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        minFinder61.add(t63);
        examples.MinFinder.T t65 = minFinder61.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) (short) 0);
        int int68 = t67.getVal();
        minFinder61.add(t67);
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean73 = t71.equals((java.lang.Object) 'a');
        int int74 = t71.getVal();
        boolean boolean75 = t67.equals((java.lang.Object) t71);
        minFinder2.add(t67);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = t15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        int int2 = t1.getVal();
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        int int21 = t15.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        examples.MinFinder.T[] tArray25 = new examples.MinFinder.T[] { t4, t6, t13, t15, t23 };
        java.util.ArrayList<examples.MinFinder.T> tList26 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList26, tArray25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList26);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList26);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList26);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList26);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        minFinder33.chval(t39, 0);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        boolean boolean49 = t47.equals((java.lang.Object) (-1));
        int int50 = t47.getVal();
        minFinder33.chval(t47, 0);
        minFinder32.add(t47);
        examples.MinFinder.T t54 = minFinder32.findMin();
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        minFinder55.chval(t61, 0);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        minFinder55.add(t69);
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        boolean boolean77 = t69.equals((java.lang.Object) int76);
        minFinder32.add(t69);
        minFinder32.clear();
        boolean boolean80 = t1.equals((java.lang.Object) minFinder32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(tArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        java.lang.Class<?> wildcardClass32 = t17.getClass();
        boolean boolean33 = t1.equals((java.lang.Object) t17);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(2);
        minFinder0.add(t17);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        minFinder19.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        minFinder19.add(t29);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        minFinder31.chval(t33, (int) ' ');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        java.lang.Object obj47 = null;
        boolean boolean48 = t42.equals(obj47);
        int int49 = t42.getVal();
        minFinder31.chval(t42, 0);
        minFinder19.add(t42);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t42, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t15);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 100);
        examples.MinFinder.T t47 = minFinder42.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        int int33 = t32.getVal();
        minFinder30.chval(t32, (-100));
        minFinder17.chval(t32, 0);
        minFinder0.add(t32);
        examples.MinFinder.T t39 = minFinder0.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        minFinder43.chval(t45, (int) ' ');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-9));
        boolean boolean56 = t54.equals((java.lang.Object) 6);
        minFinder43.chval(t54, 97);
        boolean boolean59 = t41.equals((java.lang.Object) t54);
        int int60 = t41.getVal();
        minFinder0.add(t41);
        int int62 = t41.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-9) + "'", int33 == (-9));
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        minFinder36.add(t41);
        minFinder30.chval(t41, 5);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        minFinder46.add(t55);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-9));
        minFinder46.add(t60);
        minFinder30.chval(t60, (-10));
        examples.MinFinder.T t64 = minFinder30.findMin();
        examples.MinFinder.T t65 = minFinder30.findMin();
        boolean boolean66 = t25.equals((java.lang.Object) minFinder30);
        minFinder30.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) '#');
        minFinder30.add(t69);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder20.add(t34);
        minFinder0.add(t34);
        minFinder0.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-1));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder0.chval(t40, 9);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList37);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder.T t75 = minFinder74.findMin();
        int int76 = t75.getVal();
        minFinder46.add(t75);
        minFinder0.add(t75);
        examples.MinFinder.T t79 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t81 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNull(t81);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t44, t46, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList66);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        minFinder72.add(t74);
        examples.MinFinder.T t76 = minFinder72.findMin();
        boolean boolean77 = t37.equals((java.lang.Object) minFinder72);
        examples.MinFinder.T t78 = minFinder72.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        boolean boolean88 = t80.equals((java.lang.Object) (-8.7d));
        boolean boolean90 = t80.equals((java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass91 = t80.getClass();
        boolean boolean92 = t78.equals((java.lang.Object) t80);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder13.add(t27);
        minFinder0.add(t27);
        java.lang.Class<?> wildcardClass31 = t27.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t17, t19, t26, t31, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        boolean boolean62 = t60.equals((java.lang.Object) ' ');
        minFinder57.chval(t60, (int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder57.add(t66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        int int76 = t75.getVal();
        minFinder68.chval(t75, 10);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        int int86 = t85.getVal();
        int int87 = t85.getVal();
        int int88 = t85.getVal();
        int int89 = t85.getVal();
        minFinder79.chval(t85, 0);
        minFinder68.add(t85);
        minFinder57.add(t85);
        minFinder0.add(t85);
        examples.MinFinder.T t95 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-9) + "'", int76 == (-9));
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(t95);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        int int39 = t38.getVal();
        boolean boolean41 = t38.equals((java.lang.Object) 2);
        minFinder0.add(t38);
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        int int45 = t38.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        minFinder61.add(t63);
        examples.MinFinder.T t65 = minFinder61.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) (short) 0);
        int int68 = t67.getVal();
        minFinder61.add(t67);
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean73 = t71.equals((java.lang.Object) 'a');
        int int74 = t71.getVal();
        boolean boolean75 = t67.equals((java.lang.Object) t71);
        minFinder2.add(t67);
        java.lang.Class<?> wildcardClass77 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        minFinder29.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        boolean boolean39 = t32.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        minFinder40.clear();
        examples.MinFinder.T t54 = minFinder40.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        boolean boolean58 = t56.equals((java.lang.Object) ' ');
        minFinder40.add(t56);
        boolean boolean60 = t32.equals((java.lang.Object) t56);
        minFinder29.add(t32);
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        minFinder23.add(t28);
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder23.add(t32);
        boolean boolean34 = t22.equals((java.lang.Object) t32);
        int int35 = t32.getVal();
        minFinder2.chval(t32, 0);
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        boolean boolean46 = t39.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder.T t61 = minFinder47.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        boolean boolean65 = t63.equals((java.lang.Object) ' ');
        minFinder47.add(t63);
        boolean boolean67 = t39.equals((java.lang.Object) t63);
        minFinder2.add(t39);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        examples.MinFinder.T t52 = minFinder29.findMin();
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        minFinder43.clear();
        examples.MinFinder.T t45 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder.T t12 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-1));
        minFinder33.chval(t38, 100);
        java.lang.Class<?> wildcardClass41 = minFinder33.getClass();
        boolean boolean42 = t31.equals((java.lang.Object) wildcardClass41);
        int int43 = t31.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder0.add(t23);
        minFinder0.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList52);
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        minFinder67.chval(t69, (int) ' ');
        boolean boolean77 = t66.equals((java.lang.Object) t69);
        minFinder0.add(t66);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t81 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(t81);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        int int33 = t29.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '4');
        int int36 = t35.getVal();
        boolean boolean37 = t29.equals((java.lang.Object) t35);
        int int38 = t29.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        minFinder18.chval(t37, 100);
        examples.MinFinder.T t41 = minFinder18.findMin();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        minFinder42.clear();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        minFinder56.add(t65);
        minFinder56.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (short) 0);
        minFinder56.chval(t71, (int) '4');
        minFinder42.add(t71);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        boolean boolean81 = t71.equals((java.lang.Object) t76);
        boolean boolean83 = t76.equals((java.lang.Object) (byte) 0);
        minFinder18.add(t76);
        minFinder0.chval(t76, (-6));
        examples.MinFinder.T t87 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(t87);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T(5);
        int int7 = t6.getVal();
        minFinder0.chval(t6, 5);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t24 = minFinder10.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        examples.MinFinder.T t58 = null;
        minFinder57.chval(t58, (-1));
        minFinder57.clear();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        minFinder57.add(t71);
        minFinder10.add(t71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder10.add(t78);
        int int84 = t78.getVal();
        minFinder0.chval(t78, 0);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t28 = minFinder0.findMin();
        examples.MinFinder.T t29 = minFinder0.findMin();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t37 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        minFinder39.chval(t45, 0);
        minFinder39.clear();
        examples.MinFinder.T t53 = minFinder39.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        boolean boolean57 = t55.equals((java.lang.Object) ' ');
        minFinder39.add(t55);
        minFinder32.chval(t55, (int) ' ');
        minFinder30.add(t55);
        minFinder0.chval(t55, 5);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder2.chval(t13, 5);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        minFinder18.add(t32);
        minFinder2.chval(t32, (-10));
        boolean boolean36 = t1.equals((java.lang.Object) t32);
        examples.MinFinder.T t38 = new examples.MinFinder.T(8);
        boolean boolean39 = t32.equals((java.lang.Object) 8);
        java.lang.Class<?> wildcardClass40 = t32.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) (-8.7d));
        minFinder4.chval(t11, (-100));
        boolean boolean22 = t1.equals((java.lang.Object) t11);
        int int23 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        boolean boolean22 = t1.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder.T t24 = null;
        minFinder4.add(t24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        java.lang.Class<?> wildcardClass45 = t1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder7.add(t21);
        examples.MinFinder.T t24 = minFinder7.findMin();
        minFinder0.chval(t24, (-1));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder0.chval(t53, (-5));
        int int56 = t53.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder0.chval(t24, (-5));
        examples.MinFinder.T t27 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass28 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) ' ');
        minFinder0.add(t14);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-7));
        minFinder0.add(t19);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) (byte) 0);
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        minFinder2.chval(t22, 6);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Object obj4 = null;
        boolean boolean5 = t1.equals(obj4);
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList29);
        boolean boolean49 = t1.equals((java.lang.Object) minFinder48);
        minFinder48.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        java.lang.Object obj16 = null;
        boolean boolean17 = t11.equals(obj16);
        int int18 = t11.getVal();
        minFinder0.chval(t11, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList44);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder.T t82 = minFinder81.findMin();
        int int83 = t82.getVal();
        minFinder53.add(t82);
        examples.MinFinder.T t85 = minFinder53.findMin();
        boolean boolean86 = t11.equals((java.lang.Object) minFinder53);
        int int87 = t11.getVal();
        java.lang.Class<?> wildcardClass88 = t11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (short) 10);
        boolean boolean25 = t9.equals((java.lang.Object) t24);
        int int26 = t9.getVal();
        java.lang.Class<?> wildcardClass27 = t9.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder17.add(t33);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        boolean boolean40 = t37.equals((java.lang.Object) 2);
        int int41 = t37.getVal();
        minFinder17.add(t37);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        minFinder35.chval(t41, 0);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        int int51 = t50.getVal();
        minFinder48.chval(t50, (-100));
        minFinder35.chval(t50, 0);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        java.lang.Object obj62 = null;
        boolean boolean63 = t57.equals(obj62);
        minFinder35.add(t57);
        int int65 = t57.getVal();
        int int66 = t57.getVal();
        int int67 = t57.getVal();
        minFinder29.add(t57);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-9) + "'", int51 == (-9));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) '#');
        int int20 = t19.getVal();
        minFinder0.chval(t19, (int) (byte) 0);
        int int23 = t19.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder4.chval(t20, 1);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t24, t26, t33, t38, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder64.add(t66);
        examples.MinFinder.T t68 = minFinder64.findMin();
        minFinder4.add(t68);
        boolean boolean70 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t71 = minFinder4.findMin();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(t71);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        minFinder32.add(t61);
        examples.MinFinder.T t64 = minFinder32.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) '#');
        boolean boolean68 = t66.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder69.chval(t72, (int) (short) -1);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        minFinder69.add(t78);
        minFinder69.clear();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        minFinder69.chval(t84, (int) '4');
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) '#');
        int int89 = t88.getVal();
        minFinder69.chval(t88, (int) (byte) 0);
        examples.MinFinder.T t92 = minFinder69.findMin();
        boolean boolean93 = t66.equals((java.lang.Object) minFinder69);
        int int94 = t66.getVal();
        int int95 = t66.getVal();
        minFinder32.add(t66);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = null;
        minFinder27.chval(t32, (int) (byte) 10);
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (byte) 1);
        int int37 = t36.getVal();
        minFinder27.add(t36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        minFinder39.clear();
        minFinder39.clear();
        minFinder39.clear();
        minFinder39.clear();
        examples.MinFinder.T t49 = minFinder39.findMin();
        java.lang.Class<?> wildcardClass50 = minFinder39.getClass();
        boolean boolean51 = t36.equals((java.lang.Object) wildcardClass50);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        examples.MinFinder.T t49 = minFinder45.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t49);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-1));
        minFinder9.chval(t14, 100);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        minFinder9.add(t18);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t25 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t27 = minFinder22.findMin();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        boolean boolean31 = t18.equals((java.lang.Object) minFinder22);
        minFinder22.clear();
        examples.MinFinder.T t33 = minFinder22.findMin();
        examples.MinFinder.T t34 = minFinder22.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList58);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        minFinder64.add(t66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-1));
        minFinder68.chval(t73, 100);
        java.lang.Class<?> wildcardClass76 = minFinder68.getClass();
        boolean boolean77 = t66.equals((java.lang.Object) wildcardClass76);
        minFinder22.add(t66);
        minFinder0.chval(t66, (int) ' ');
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        minFinder61.add(t75);
        minFinder45.chval(t75, (-10));
        boolean boolean79 = t44.equals((java.lang.Object) t75);
        minFinder41.chval(t75, 1);
        int int82 = t75.getVal();
        int int83 = t75.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-9) + "'", int82 == (-9));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-9) + "'", int83 == (-9));
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        minFinder0.clear();
        examples.MinFinder.T t86 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass87 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t18 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        minFinder15.chval(t21, 0);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        int int31 = t30.getVal();
        minFinder28.chval(t30, (-100));
        minFinder15.chval(t30, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        java.lang.Object obj42 = null;
        boolean boolean43 = t37.equals(obj42);
        minFinder15.add(t37);
        boolean boolean45 = t14.equals((java.lang.Object) t37);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList69);
        boolean boolean81 = t14.equals((java.lang.Object) tList69);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList69);
        boolean boolean89 = t9.equals((java.lang.Object) tList69);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList69);
        examples.MinFinder.T t91 = minFinder90.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-9) + "'", int31 == (-9));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t91);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        int int13 = t7.getVal();
        boolean boolean15 = t7.equals((java.lang.Object) (-8.7d));
        minFinder0.chval(t7, (-100));
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-1));
        minFinder18.chval(t23, 100);
        boolean boolean27 = t23.equals((java.lang.Object) 5L);
        int int28 = t23.getVal();
        boolean boolean29 = t7.equals((java.lang.Object) int28);
        java.lang.Class<?> wildcardClass30 = t7.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        boolean boolean52 = t42.equals((java.lang.Object) t47);
        int int53 = t47.getVal();
        minFinder0.add(t47);
        examples.MinFinder.T t55 = null;
        minFinder0.chval(t55, 97);
        examples.MinFinder.T t58 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(t58);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder.T t61 = minFinder41.findMin();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-9));
        int int78 = t77.getVal();
        minFinder75.chval(t77, (-100));
        minFinder62.chval(t77, 0);
        examples.MinFinder.T t84 = new examples.MinFinder.T((-3));
        int int85 = t84.getVal();
        int int86 = t84.getVal();
        int int87 = t84.getVal();
        int int88 = t84.getVal();
        java.lang.Object obj89 = null;
        boolean boolean90 = t84.equals(obj89);
        minFinder62.add(t84);
        boolean boolean92 = t61.equals((java.lang.Object) minFinder62);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-9) + "'", int78 == (-9));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder38.add(t48);
        examples.MinFinder.T t53 = minFinder38.findMin();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder54.add(t68);
        boolean boolean71 = t53.equals((java.lang.Object) t68);
        minFinder0.chval(t68, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        minFinder74.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        minFinder74.add(t79);
        examples.MinFinder.T t83 = new examples.MinFinder.T(1);
        boolean boolean84 = t79.equals((java.lang.Object) t83);
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        minFinder0.add(t83);
        minFinder0.clear();
        examples.MinFinder.T t89 = null;
        minFinder0.chval(t89, 1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        minFinder78.add(t83);
        examples.MinFinder.T t87 = new examples.MinFinder.T(3);
        minFinder78.add(t87);
        examples.MinFinder.T t89 = minFinder78.findMin();
        java.lang.Object obj90 = null;
        boolean boolean91 = t89.equals(obj90);
        minFinder0.chval(t89, 4);
        examples.MinFinder.T t94 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(t94);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) (byte) -1);
        minFinder32.add(t66);
        int int68 = t66.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder.T t54 = minFinder35.findMin();
        examples.MinFinder.T t55 = minFinder35.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertNotNull(t55);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-1));
        minFinder2.chval(t7, 100);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        minFinder2.add(t11);
        minFinder2.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList43);
        boolean boolean53 = t17.equals((java.lang.Object) minFinder52);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        boolean boolean60 = t17.equals((java.lang.Object) minFinder54);
        minFinder2.chval(t17, 97);
        minFinder2.clear();
        boolean boolean64 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t65 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(t65);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        minFinder20.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        minFinder20.chval(t35, (int) '4');
        minFinder6.add(t35);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        boolean boolean45 = t35.equals((java.lang.Object) t40);
        int int46 = t35.getVal();
        boolean boolean47 = t3.equals((java.lang.Object) t35);
        int int48 = t35.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        examples.MinFinder.T[] tArray71 = new examples.MinFinder.T[] { t50, t52, t59, t61, t69 };
        java.util.ArrayList<examples.MinFinder.T> tList72 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList72, tArray71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList72);
        minFinder78.clear();
        boolean boolean80 = t35.equals((java.lang.Object) minFinder78);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        minFinder81.clear();
        examples.MinFinder.T t83 = minFinder81.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-9));
        boolean boolean87 = t85.equals((java.lang.Object) 6);
        int int88 = t85.getVal();
        minFinder81.chval(t85, (int) '#');
        minFinder78.add(t85);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(tArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-9) + "'", int88 == (-9));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        boolean boolean25 = t23.equals((java.lang.Object) 6);
        minFinder12.chval(t23, 97);
        boolean boolean28 = t10.equals((java.lang.Object) t23);
        int int29 = t10.getVal();
        minFinder0.chval(t10, (-6));
        minFinder0.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        boolean boolean42 = t34.equals((java.lang.Object) (-8.7d));
        boolean boolean44 = t34.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        boolean boolean58 = t34.equals((java.lang.Object) minFinder45);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) (short) -1);
        minFinder45.add(t60);
        examples.MinFinder.T t62 = minFinder45.findMin();
        minFinder0.add(t62);
        int int64 = t62.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-1));
        minFinder4.chval(t9, 100);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.chval(t19, 97);
        minFinder4.clear();
        boolean boolean66 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t67 = minFinder4.findMin();
        examples.MinFinder.T t68 = minFinder4.findMin();
        minFinder4.clear();
        java.lang.Class<?> wildcardClass70 = minFinder4.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-9) + "'", int2 == (-9));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-1));
        minFinder21.chval(t26, 100);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        boolean boolean38 = t36.equals((java.lang.Object) (-1));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList62);
        boolean boolean72 = t36.equals((java.lang.Object) minFinder71);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        boolean boolean79 = t36.equals((java.lang.Object) minFinder73);
        minFinder21.chval(t36, 97);
        int int82 = t36.getVal();
        java.lang.Object obj83 = null;
        boolean boolean84 = t36.equals(obj83);
        minFinder2.add(t36);
        int int86 = t36.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 0);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        boolean boolean62 = t48.equals((java.lang.Object) minFinder49);
        examples.MinFinder.T t63 = minFinder49.findMin();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        minFinder64.clear();
        boolean boolean78 = t63.equals((java.lang.Object) minFinder64);
        minFinder42.chval(t63, (int) ' ');
        minFinder42.clear();
        java.lang.Class<?> wildcardClass82 = minFinder42.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        minFinder23.add(t37);
        int int42 = t37.getVal();
        minFinder10.add(t37);
        minFinder0.add(t37);
        examples.MinFinder.T t45 = minFinder0.findMin();
        examples.MinFinder.T t46 = minFinder0.findMin();
        int int47 = t46.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-8));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-8) + "'", int2 == (-8));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-8) + "'", int3 == (-8));
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t30 = minFinder28.findMin();
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        minFinder31.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        minFinder31.add(t36);
        examples.MinFinder.T t39 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        minFinder49.add(t54);
        minFinder43.chval(t54, 5);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        minFinder59.add(t68);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-9));
        minFinder59.add(t73);
        minFinder43.chval(t73, (-10));
        boolean boolean77 = t42.equals((java.lang.Object) t73);
        minFinder31.chval(t73, (int) (short) 0);
        boolean boolean80 = t30.equals((java.lang.Object) t73);
        int int81 = t73.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-9) + "'", int81 == (-9));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-1));
        minFinder13.chval(t18, 100);
        examples.MinFinder.T t22 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        int int39 = t38.getVal();
        minFinder36.chval(t38, (-100));
        minFinder23.chval(t38, 0);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        java.lang.Object obj50 = null;
        boolean boolean51 = t45.equals(obj50);
        minFinder23.add(t45);
        boolean boolean53 = t22.equals((java.lang.Object) t45);
        minFinder13.chval(t22, (int) ' ');
        minFinder0.add(t22);
        int int57 = t22.getVal();
        int int58 = t22.getVal();
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t61 = new examples.MinFinder.T(100);
        minFinder59.add(t61);
        boolean boolean63 = t22.equals((java.lang.Object) minFinder59);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-9) + "'", int39 == (-9));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7 + "'", int58 == 7);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        minFinder23.add(t37);
        int int42 = t37.getVal();
        minFinder10.add(t37);
        minFinder0.add(t37);
        examples.MinFinder.T t45 = minFinder0.findMin();
        examples.MinFinder.T t46 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(t46);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        minFinder69.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        minFinder69.add(t74);
        minFinder69.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        minFinder69.add(t79);
        int int81 = t79.getVal();
        minFinder54.chval(t79, 8);
        java.lang.Class<?> wildcardClass84 = t79.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t71 = minFinder66.findMin();
        examples.MinFinder.T t72 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        minFinder66.add(t75);
        minFinder0.add(t75);
        examples.MinFinder.T t80 = minFinder0.findMin();
        examples.MinFinder.T t81 = minFinder0.findMin();
        int int82 = t81.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass10 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        int int14 = t8.getVal();
        boolean boolean16 = t8.equals((java.lang.Object) (-8.7d));
        boolean boolean18 = t8.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        boolean boolean32 = t8.equals((java.lang.Object) minFinder19);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) (short) -1);
        minFinder19.add(t34);
        examples.MinFinder.T t36 = minFinder19.findMin();
        minFinder0.add(t36);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(t36);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        java.lang.Class<?> wildcardClass69 = minFinder54.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        boolean boolean75 = t61.equals((java.lang.Object) minFinder62);
        minFinder62.clear();
        boolean boolean77 = t58.equals((java.lang.Object) minFinder62);
        int int78 = t58.getVal();
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        examples.MinFinder minFinder85 = new examples.MinFinder();
        examples.MinFinder.T t86 = minFinder85.findMin();
        examples.MinFinder.T t88 = new examples.MinFinder.T(3);
        minFinder85.chval(t88, (int) (short) -1);
        minFinder79.add(t88);
        examples.MinFinder.T t93 = new examples.MinFinder.T((int) 'a');
        int int94 = t93.getVal();
        minFinder79.add(t93);
        examples.MinFinder.T t96 = minFinder79.findMin();
        boolean boolean97 = t58.equals((java.lang.Object) t96);
        int int98 = t58.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertNotNull(t96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        minFinder26.clear();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder40.add(t49);
        minFinder40.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 0);
        minFinder40.chval(t55, (int) '4');
        minFinder26.add(t55);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        boolean boolean65 = t55.equals((java.lang.Object) t60);
        minFinder0.chval(t60, 10);
        examples.MinFinder.T t68 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t68);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder.T t44 = minFinder41.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList68);
        examples.MinFinder.T t78 = minFinder77.findMin();
        int int79 = t78.getVal();
        minFinder41.add(t78);
        examples.MinFinder.T t81 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t84 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNull(t84);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 0);
        minFinder41.chval(t56, (int) '4');
        minFinder27.add(t56);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        boolean boolean66 = t56.equals((java.lang.Object) t61);
        int int67 = t56.getVal();
        boolean boolean68 = t24.equals((java.lang.Object) t56);
        minFinder0.add(t56);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        minFinder11.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        minFinder11.add(t21);
        int int23 = t21.getVal();
        minFinder0.chval(t21, 4);
        examples.MinFinder.T t26 = null;
        minFinder0.add(t26);
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t33 = minFinder0.findMin();
        java.lang.Object obj34 = null;
        boolean boolean35 = t33.equals(obj34);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t16, t18, t25, t30, t36, t38, t46 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        minFinder56.add(t58);
        examples.MinFinder.T t60 = minFinder56.findMin();
        int int61 = t60.getVal();
        boolean boolean62 = t6.equals((java.lang.Object) t60);
        int int63 = t60.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder72.chval(t75, (int) (short) -1);
        minFinder66.add(t75);
        boolean boolean79 = t65.equals((java.lang.Object) minFinder66);
        minFinder66.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder66.chval(t82, 1);
        examples.MinFinder.T t85 = minFinder66.findMin();
        minFinder66.clear();
        boolean boolean87 = t60.equals((java.lang.Object) minFinder66);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder27.add(t50);
        int int55 = t50.getVal();
        minFinder26.add(t50);
        minFinder26.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        minFinder12.clear();
        minFinder12.clear();
        minFinder12.clear();
        minFinder12.clear();
        boolean boolean32 = t9.equals((java.lang.Object) minFinder12);
        examples.MinFinder.T t33 = minFinder12.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder.T t48 = minFinder34.findMin();
        examples.MinFinder.T t49 = minFinder34.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        boolean boolean65 = t51.equals((java.lang.Object) minFinder52);
        minFinder34.add(t51);
        int int67 = t51.getVal();
        minFinder12.chval(t51, 10);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        minFinder4.clear();
        minFinder4.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        minFinder11.chval(t17, (int) ' ');
        minFinder4.add(t17);
        examples.MinFinder.T t27 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder29.add(t34);
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder29.add(t38);
        examples.MinFinder.T t40 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        minFinder42.clear();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        minFinder56.add(t65);
        minFinder56.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (short) 0);
        minFinder56.chval(t71, (int) '4');
        minFinder42.add(t71);
        int int75 = t71.getVal();
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        examples.MinFinder.T t79 = minFinder76.findMin();
        minFinder76.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        int int83 = t82.getVal();
        int int84 = t82.getVal();
        int int85 = t82.getVal();
        int int86 = t82.getVal();
        minFinder76.chval(t82, 0);
        boolean boolean89 = t71.equals((java.lang.Object) 0);
        int int90 = t71.getVal();
        minFinder29.chval(t71, (int) (short) 0);
        minFinder4.chval(t71, 6);
        boolean boolean95 = t1.equals((java.lang.Object) 6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-9));
        minFinder17.add(t31);
        minFinder17.clear();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t36 = new examples.MinFinder.T(100);
        minFinder34.add(t36);
        minFinder17.chval(t36, (int) '#');
        int int40 = t36.getVal();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 0);
        minFinder41.chval(t56, (int) '4');
        examples.MinFinder.T t59 = minFinder41.findMin();
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder60.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-1));
        minFinder60.chval(t75, (int) (byte) 1);
        minFinder41.add(t75);
        boolean boolean79 = t36.equals((java.lang.Object) t75);
        minFinder2.add(t36);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        minFinder7.chval(t13, 0);
        minFinder7.clear();
        examples.MinFinder.T t21 = minFinder7.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        boolean boolean25 = t23.equals((java.lang.Object) ' ');
        minFinder7.add(t23);
        minFinder0.chval(t23, (int) ' ');
        examples.MinFinder.T t29 = minFinder0.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) (short) 100);
        minFinder57.add(t60);
        examples.MinFinder.T t62 = minFinder57.findMin();
        minFinder0.chval(t62, 5);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t62);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 1);
        int int18 = t17.getVal();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        boolean boolean21 = t17.equals((java.lang.Object) t20);
        minFinder0.chval(t17, 100);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        minFinder24.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        minFinder24.add(t38);
        minFinder24.clear();
        minFinder24.clear();
        minFinder24.clear();
        minFinder24.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-1));
        minFinder44.chval(t49, 100);
        examples.MinFinder.T t53 = new examples.MinFinder.T(7);
        minFinder44.chval(t53, (int) (byte) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        minFinder56.clear();
        examples.MinFinder.T t70 = minFinder56.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        boolean boolean74 = t72.equals((java.lang.Object) ' ');
        minFinder56.add(t72);
        examples.MinFinder.T t76 = minFinder56.findMin();
        minFinder44.chval(t76, 1);
        minFinder24.chval(t76, (int) (short) -1);
        int int81 = t76.getVal();
        minFinder0.chval(t76, (int) '4');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        minFinder43.add(t52);
        boolean boolean56 = t42.equals((java.lang.Object) minFinder43);
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder43.add(t58);
        examples.MinFinder.T t61 = minFinder43.findMin();
        examples.MinFinder.T t62 = minFinder43.findMin();
        boolean boolean63 = t1.equals((java.lang.Object) minFinder43);
        minFinder43.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        int int48 = t47.getVal();
        minFinder41.add(t47);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t52 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(t52);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        boolean boolean17 = t10.equals((java.lang.Object) 100.0d);
        minFinder0.add(t10);
        examples.MinFinder.T t19 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(t19);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList56);
        examples.MinFinder.T t90 = minFinder89.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(t90);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        minFinder26.chval(t28, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-9));
        boolean boolean39 = t37.equals((java.lang.Object) 6);
        minFinder26.chval(t37, 97);
        int int42 = t37.getVal();
        minFinder13.chval(t37, 0);
        minFinder13.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        examples.MinFinder.T t48 = minFinder28.findMin();
        java.lang.Object obj49 = new java.lang.Object();
        boolean boolean50 = t48.equals(obj49);
        minFinder26.add(t48);
        minFinder26.clear();
        examples.MinFinder.T t53 = null;
        minFinder26.add(t53);
        minFinder26.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T(5);
        int int7 = t6.getVal();
        minFinder0.chval(t6, 5);
        examples.MinFinder.T t10 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNull(t10);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder26.chval(t28, (-100));
        minFinder13.chval(t28, 0);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        java.lang.Object obj40 = null;
        boolean boolean41 = t35.equals(obj40);
        minFinder13.add(t35);
        boolean boolean43 = t12.equals((java.lang.Object) t35);
        int int44 = t35.getVal();
        int int45 = t35.getVal();
        minFinder2.chval(t35, 8);
        java.lang.Class<?> wildcardClass48 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        int int20 = t1.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList44);
        minFinder54.clear();
        examples.MinFinder.T t56 = minFinder54.findMin();
        boolean boolean57 = t1.equals((java.lang.Object) minFinder54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList56);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder minFinder1 = new examples.MinFinder();
        examples.MinFinder.T t2 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t4 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t6 = minFinder1.findMin();
        minFinder1.clear();
        minFinder1.clear();
        examples.MinFinder.T t9 = minFinder1.findMin();
        examples.MinFinder.T t10 = minFinder1.findMin();
        examples.MinFinder.T t11 = minFinder1.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        boolean boolean20 = t13.equals((java.lang.Object) 100.0d);
        int int21 = t13.getVal();
        minFinder1.add(t13);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder23.add(t50);
        boolean boolean54 = t13.equals((java.lang.Object) minFinder23);
        minFinder0.add(t13);
        examples.MinFinder.T t56 = minFinder0.findMin();
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(t56);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        boolean boolean58 = t44.equals((java.lang.Object) minFinder45);
        minFinder45.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder45.chval(t61, 1);
        minFinder30.add(t61);
        boolean boolean65 = t26.equals((java.lang.Object) t61);
        minFinder13.chval(t61, 32);
        examples.MinFinder.T t68 = minFinder13.findMin();
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t74 = minFinder69.findMin();
        minFinder69.clear();
        minFinder69.clear();
        examples.MinFinder.T t77 = minFinder69.findMin();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        minFinder78.add(t83);
        minFinder69.chval(t83, (-5));
        minFinder13.chval(t83, (-1));
        int int90 = t83.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        minFinder10.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder22.add(t27);
        minFinder16.chval(t27, 5);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-9));
        minFinder32.add(t46);
        minFinder16.chval(t46, (-10));
        boolean boolean50 = t15.equals((java.lang.Object) t46);
        minFinder10.chval(t46, 7);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        minFinder53.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (short) 0);
        minFinder53.chval(t68, (int) '4');
        boolean boolean71 = t46.equals((java.lang.Object) minFinder53);
        boolean boolean73 = t46.equals((java.lang.Object) true);
        minFinder2.chval(t46, 4);
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) (short) 0);
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        boolean boolean81 = t46.equals((java.lang.Object) t77);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-9));
        int int19 = t18.getVal();
        minFinder16.chval(t18, (-100));
        minFinder3.chval(t18, 0);
        minFinder0.add(t18);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-9) + "'", int19 == (-9));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) '#');
        int int4 = t3.getVal();
        examples.MinFinder.T t6 = new examples.MinFinder.T(3);
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        int int25 = t19.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        examples.MinFinder.T[] tArray29 = new examples.MinFinder.T[] { t8, t10, t17, t19, t27 };
        java.util.ArrayList<examples.MinFinder.T> tList30 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList30, tArray29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList30);
        java.lang.Class<?> wildcardClass34 = tList30.getClass();
        boolean boolean35 = t6.equals((java.lang.Object) tList30);
        boolean boolean36 = t3.equals((java.lang.Object) t6);
        minFinder0.chval(t3, (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(tArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder29.add(t34);
        examples.MinFinder.T t38 = new examples.MinFinder.T(1);
        boolean boolean39 = t34.equals((java.lang.Object) t38);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        int int57 = t54.getVal();
        minFinder40.chval(t54, 0);
        minFinder40.clear();
        examples.MinFinder.T t61 = minFinder40.findMin();
        boolean boolean62 = t34.equals((java.lang.Object) t61);
        minFinder26.chval(t61, (-2));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t72 = minFinder67.findMin();
        minFinder67.clear();
        minFinder67.clear();
        examples.MinFinder.T t75 = minFinder67.findMin();
        examples.MinFinder.T t76 = minFinder67.findMin();
        examples.MinFinder.T t77 = minFinder67.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        int int80 = t79.getVal();
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        int int83 = t79.getVal();
        int int84 = t79.getVal();
        boolean boolean86 = t79.equals((java.lang.Object) 100.0d);
        int int87 = t79.getVal();
        minFinder67.add(t79);
        examples.MinFinder.T t89 = minFinder67.findMin();
        minFinder0.add(t89);
        int int91 = t89.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList56);
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t83 = minFinder81.findMin();
        examples.MinFinder.T t84 = minFinder81.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(t84);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder0.add(t25);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t31, t33, t40, t45, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        minFinder71.add(t73);
        examples.MinFinder.T t75 = minFinder71.findMin();
        int int76 = t75.getVal();
        boolean boolean78 = t75.equals((java.lang.Object) '4');
        int int79 = t75.getVal();
        minFinder0.add(t75);
        minFinder0.clear();
        examples.MinFinder.T t82 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNull(t82);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        int int46 = t42.getVal();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        boolean boolean60 = t42.equals((java.lang.Object) 0);
        int int61 = t42.getVal();
        minFinder0.chval(t42, (int) (short) 0);
        int int64 = t42.getVal();
        java.lang.Class<?> wildcardClass65 = t42.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t37 = minFinder32.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        boolean boolean46 = t39.equals((java.lang.Object) 0.0d);
        boolean boolean48 = t39.equals((java.lang.Object) (-4.6d));
        minFinder32.chval(t39, 7);
        minFinder32.clear();
        boolean boolean52 = t16.equals((java.lang.Object) minFinder32);
        examples.MinFinder.T t53 = minFinder32.findMin();
        examples.MinFinder.T t54 = minFinder32.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t54);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        minFinder32.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        minFinder32.chval(t47, (int) '4');
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 0);
        minFinder50.chval(t65, (int) '4');
        minFinder32.add(t65);
        minFinder27.add(t65);
        java.lang.Class<?> wildcardClass70 = t65.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass13 = t12.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        boolean boolean75 = t61.equals((java.lang.Object) minFinder62);
        minFinder62.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder62.chval(t78, 1);
        minFinder47.add(t78);
        boolean boolean82 = t43.equals((java.lang.Object) t78);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        minFinder83.clear();
        minFinder83.clear();
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) 'a');
        int int89 = t88.getVal();
        minFinder83.add(t88);
        examples.MinFinder.T t92 = new examples.MinFinder.T(3);
        minFinder83.add(t92);
        examples.MinFinder.T t94 = minFinder83.findMin();
        boolean boolean95 = t78.equals((java.lang.Object) t94);
        int int96 = t94.getVal();
        minFinder37.chval(t94, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder41.chval(t47, 0);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        boolean boolean57 = t55.equals((java.lang.Object) (-1));
        int int58 = t55.getVal();
        minFinder41.chval(t55, 0);
        minFinder40.add(t55);
        minFinder40.clear();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder63.add(t72);
        examples.MinFinder.T t74 = minFinder63.findMin();
        java.lang.Object obj75 = null;
        boolean boolean76 = t74.equals(obj75);
        minFinder40.chval(t74, (-6));
        boolean boolean79 = t1.equals((java.lang.Object) minFinder40);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) '#');
        minFinder40.add(t81);
        examples.MinFinder.T t83 = minFinder40.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(t83);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-1));
        minFinder17.chval(t22, 100);
        boolean boolean26 = t22.equals((java.lang.Object) 5L);
        minFinder0.add(t22);
        examples.MinFinder.T t28 = minFinder0.findMin();
        int int29 = t28.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        boolean boolean45 = t31.equals((java.lang.Object) minFinder32);
        examples.MinFinder.T t46 = minFinder32.findMin();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        boolean boolean61 = t46.equals((java.lang.Object) minFinder47);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        minFinder62.add(t76);
        boolean boolean81 = t46.equals((java.lang.Object) minFinder62);
        java.lang.Class<?> wildcardClass82 = minFinder62.getClass();
        boolean boolean83 = t28.equals((java.lang.Object) minFinder62);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder68.chval(t70, (-100));
        minFinder67.add(t70);
        minFinder0.add(t70);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t77 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t42 = minFinder40.findMin();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        examples.MinFinder.T t51 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        minFinder55.chval(t66, 5);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        examples.MinFinder.T t85 = new examples.MinFinder.T((-9));
        minFinder71.add(t85);
        minFinder55.chval(t85, (-10));
        boolean boolean89 = t54.equals((java.lang.Object) t85);
        minFinder43.chval(t85, (int) (short) 0);
        boolean boolean92 = t42.equals((java.lang.Object) t85);
        minFinder0.add(t42);
        examples.MinFinder.T t94 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(t41);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(t94);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t32 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t32);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        minFinder0.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t46 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t49 = minFinder41.findMin();
        examples.MinFinder.T t50 = minFinder41.findMin();
        examples.MinFinder.T t51 = minFinder41.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        boolean boolean60 = t53.equals((java.lang.Object) 100.0d);
        int int61 = t53.getVal();
        minFinder41.add(t53);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        minFinder63.chval(t69, 0);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T(3);
        minFinder76.chval(t79, (int) (short) -1);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(3);
        minFinder82.chval(t85, (int) (short) -1);
        minFinder76.add(t85);
        examples.MinFinder.T t90 = new examples.MinFinder.T((int) 'a');
        int int91 = t90.getVal();
        minFinder76.add(t90);
        minFinder63.add(t90);
        boolean boolean94 = t53.equals((java.lang.Object) minFinder63);
        examples.MinFinder.T t95 = minFinder63.findMin();
        minFinder0.chval(t95, (int) ' ');
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(t95);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) ' ');
        int int4 = t1.getVal();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        int int26 = t25.getVal();
        examples.MinFinder.T[] tArray27 = new examples.MinFinder.T[] { t6, t8, t15, t17, t25 };
        java.util.ArrayList<examples.MinFinder.T> tList28 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList28, tArray27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList28);
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        boolean boolean46 = t1.equals((java.lang.Object) minFinder42);
        int int47 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(tArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-9));
        minFinder51.add(t65);
        examples.MinFinder.T t67 = minFinder51.findMin();
        int int68 = t67.getVal();
        minFinder32.add(t67);
        examples.MinFinder.T t70 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-9) + "'", int68 == (-9));
        org.junit.Assert.assertNotNull(t70);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        boolean boolean29 = t22.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        minFinder30.clear();
        examples.MinFinder.T t44 = minFinder30.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) ' ');
        minFinder30.add(t46);
        boolean boolean50 = t22.equals((java.lang.Object) t46);
        int int51 = t22.getVal();
        int int52 = t22.getVal();
        minFinder2.add(t22);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-9));
        int int30 = t29.getVal();
        minFinder27.chval(t29, (-100));
        minFinder14.chval(t29, 0);
        minFinder0.chval(t29, (int) (byte) -1);
        minFinder0.clear();
        examples.MinFinder.T t38 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-9) + "'", int30 == (-9));
        org.junit.Assert.assertNull(t38);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Object obj4 = null;
        boolean boolean5 = t1.equals(obj4);
        int int6 = t1.getVal();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        int int25 = t19.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        examples.MinFinder.T[] tArray29 = new examples.MinFinder.T[] { t8, t10, t17, t19, t27 };
        java.util.ArrayList<examples.MinFinder.T> tList30 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList30, tArray29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList30);
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        minFinder36.add(t38);
        examples.MinFinder.T t40 = minFinder36.findMin();
        examples.MinFinder.T t41 = null;
        minFinder36.chval(t41, (-9));
        minFinder36.clear();
        examples.MinFinder.T t45 = minFinder36.findMin();
        examples.MinFinder.T t46 = minFinder36.findMin();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        minFinder47.add(t61);
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        boolean boolean69 = t61.equals((java.lang.Object) int68);
        minFinder36.chval(t61, (int) (short) 100);
        boolean boolean72 = t1.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(tArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        examples.MinFinder.T[] tArray48 = new examples.MinFinder.T[] { t27, t29, t36, t38, t46 };
        java.util.ArrayList<examples.MinFinder.T> tList49 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList49, tArray48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList49);
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        minFinder55.add(t57);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        minFinder59.clear();
        examples.MinFinder.T t62 = minFinder59.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-1));
        minFinder59.chval(t64, 100);
        java.lang.Class<?> wildcardClass67 = minFinder59.getClass();
        boolean boolean68 = t57.equals((java.lang.Object) wildcardClass67);
        minFinder13.add(t57);
        examples.MinFinder.T t70 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder13.add(t70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(tArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        int int25 = t19.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        examples.MinFinder.T[] tArray29 = new examples.MinFinder.T[] { t8, t10, t17, t19, t27 };
        java.util.ArrayList<examples.MinFinder.T> tList30 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList30, tArray29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList30);
        examples.MinFinder.T t44 = minFinder43.findMin();
        int int45 = t44.getVal();
        minFinder0.chval(t44, (-4));
        examples.MinFinder.T t48 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(tArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t34 = minFinder31.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-1));
        minFinder31.chval(t36, 100);
        examples.MinFinder.T t40 = new examples.MinFinder.T(7);
        minFinder31.chval(t40, (int) (byte) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        minFinder43.chval(t49, (int) ' ');
        boolean boolean58 = t40.equals((java.lang.Object) ' ');
        boolean boolean60 = t40.equals((java.lang.Object) 7);
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList84);
        examples.MinFinder.T t94 = minFinder93.findMin();
        java.lang.Class<?> wildcardClass95 = t94.getClass();
        boolean boolean96 = t40.equals((java.lang.Object) t94);
        minFinder0.add(t94);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        minFinder0.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList47);
        examples.MinFinder.T t57 = null;
        minFinder56.chval(t57, (-1));
        minFinder56.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder56.add(t70);
        minFinder0.chval(t70, (int) (short) 0);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        minFinder2.chval(t25, (int) ' ');
        minFinder0.add(t25);
        java.lang.Object obj32 = null;
        boolean boolean33 = t25.equals(obj32);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        boolean boolean63 = t25.equals((java.lang.Object) t61);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        int int81 = t76.getVal();
        int int82 = t76.getVal();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        int int85 = t84.getVal();
        examples.MinFinder.T[] tArray86 = new examples.MinFinder.T[] { t65, t67, t74, t76, t84 };
        java.util.ArrayList<examples.MinFinder.T> tList87 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList87, tArray86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList87);
        examples.MinFinder.T t95 = new examples.MinFinder.T((int) 'a');
        minFinder93.add(t95);
        examples.MinFinder.T t97 = minFinder93.findMin();
        int int98 = t97.getVal();
        boolean boolean99 = t25.equals((java.lang.Object) t97);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertNotNull(tArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(t97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-3) + "'", int98 == (-3));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }
}

