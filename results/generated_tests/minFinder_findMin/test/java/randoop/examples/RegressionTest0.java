package examples;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        java.lang.Class<?> wildcardClass8 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass6 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        java.lang.Class<?> wildcardClass13 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        java.lang.Class<?> wildcardClass60 = t58.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass28 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.ArrayList<examples.MinFinder.T> tList0 = null;
        // The following exception was thrown during execution in test generation
        try {
            examples.MinFinder minFinder1 = new examples.MinFinder(tList0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        java.lang.Class<?> wildcardClass20 = t16.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        java.lang.Class<?> wildcardClass46 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass21 = t20.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        java.lang.Class<?> wildcardClass30 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass29 = minFinder28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) (short) 100);
        minFinder88.add(t91);
        examples.MinFinder.T t93 = minFinder88.findMin();
        boolean boolean94 = t60.equals((java.lang.Object) minFinder88);
        int int95 = t60.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        java.lang.Class<?> wildcardClass16 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        java.lang.Class<?> wildcardClass23 = t19.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        java.lang.Class<?> wildcardClass28 = minFinder26.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        java.lang.Class<?> wildcardClass8 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        minFinder21.chval(t27, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        int int37 = t36.getVal();
        minFinder34.chval(t36, (-100));
        minFinder21.chval(t36, 0);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        java.lang.Object obj48 = null;
        boolean boolean49 = t43.equals(obj48);
        minFinder21.add(t43);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t43, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-9) + "'", int37 == (-9));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T(0);
        java.lang.Object obj35 = null;
        boolean boolean36 = t34.equals(obj35);
        // The following exception was thrown during execution in test generation
        try {
            minFinder32.chval(t34, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        java.lang.Class<?> wildcardClass6 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass61 = t60.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) (short) 100);
        minFinder88.add(t91);
        examples.MinFinder.T t93 = minFinder88.findMin();
        boolean boolean94 = t60.equals((java.lang.Object) minFinder88);
        boolean boolean96 = t60.equals((java.lang.Object) 5L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        minFinder8.add(t17);
        minFinder8.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) (short) 0);
        minFinder8.chval(t23, (int) '4');
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) 0);
        int int28 = t27.getVal();
        minFinder8.chval(t27, 100);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t27, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t53 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        minFinder50.chval(t56, 0);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        boolean boolean66 = t64.equals((java.lang.Object) (-1));
        int int67 = t64.getVal();
        minFinder50.chval(t64, 0);
        minFinder49.add(t64);
        examples.MinFinder.T t71 = minFinder49.findMin();
        boolean boolean72 = t14.equals((java.lang.Object) minFinder49);
        examples.MinFinder.T t73 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder49.add(t73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        java.lang.Class<?> wildcardClass42 = tList39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        examples.MinFinder.T t92 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass93 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t11 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        minFinder8.chval(t14, 0);
        minFinder8.clear();
        examples.MinFinder.T t22 = minFinder8.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) ' ');
        minFinder8.add(t24);
        examples.MinFinder.T t28 = minFinder8.findMin();
        int int29 = t28.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t28, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Class<?> wildcardClass4 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        java.lang.Class<?> wildcardClass8 = t5.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass33 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        int int13 = t7.getVal();
        boolean boolean15 = t7.equals((java.lang.Object) (-8.7d));
        minFinder0.chval(t7, (-100));
        java.lang.Class<?> wildcardClass18 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        int int34 = t30.getVal();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        minFinder35.chval(t41, 0);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        boolean boolean51 = t49.equals((java.lang.Object) (-1));
        int int52 = t49.getVal();
        minFinder35.chval(t49, 0);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        minFinder55.chval(t66, 5);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        examples.MinFinder.T t85 = new examples.MinFinder.T((-9));
        minFinder71.add(t85);
        minFinder55.chval(t85, (-10));
        minFinder35.chval(t85, (-1));
        boolean boolean91 = t30.equals((java.lang.Object) minFinder35);
        boolean boolean92 = t20.equals((java.lang.Object) boolean91);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        java.lang.Class<?> wildcardClass33 = t31.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t53 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        minFinder50.chval(t56, 0);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        boolean boolean66 = t64.equals((java.lang.Object) (-1));
        int int67 = t64.getVal();
        minFinder50.chval(t64, 0);
        minFinder49.add(t64);
        examples.MinFinder.T t71 = minFinder49.findMin();
        boolean boolean72 = t14.equals((java.lang.Object) minFinder49);
        java.lang.Class<?> wildcardClass73 = minFinder49.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        boolean boolean75 = t2.equals((java.lang.Object) t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t2.equals((java.lang.Object) t86);
        int int89 = t86.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder0.chval(t84, (int) ' ');
        java.lang.Class<?> wildcardClass88 = t84.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        boolean boolean22 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t30, t32, t39, t44, t50, t52, t60 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        minFinder70.clear();
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        minFinder72.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-9));
        int int80 = t79.getVal();
        minFinder72.chval(t79, 10);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        minFinder83.clear();
        examples.MinFinder.T t86 = minFinder83.findMin();
        minFinder83.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        int int90 = t89.getVal();
        int int91 = t89.getVal();
        int int92 = t89.getVal();
        int int93 = t89.getVal();
        minFinder83.chval(t89, 0);
        minFinder72.add(t89);
        minFinder70.add(t89);
        minFinder23.add(t89);
        minFinder4.add(t89);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-9) + "'", int80 == (-9));
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        examples.MinFinder.T t92 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass93 = t92.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass18 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = t16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder72.chval(t78, 0);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        boolean boolean88 = t86.equals((java.lang.Object) (-1));
        int int89 = t86.getVal();
        minFinder72.chval(t86, 0);
        minFinder71.add(t86);
        minFinder41.add(t86);
        java.lang.Class<?> wildcardClass94 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-1));
        minFinder4.chval(t9, 100);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.chval(t19, 97);
        minFinder4.clear();
        boolean boolean66 = t1.equals((java.lang.Object) minFinder4);
        int int67 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-9) + "'", int2 == (-9));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-9) + "'", int67 == (-9));
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        java.lang.Class<?> wildcardClass12 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass12 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-1));
        minFinder20.chval(t25, 100);
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        minFinder20.add(t29);
        minFinder0.add(t29);
        java.lang.Class<?> wildcardClass34 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        int int33 = t29.getVal();
        boolean boolean35 = t29.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        java.lang.Class<?> wildcardClass27 = minFinder25.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        examples.MinFinder.T t1 = new examples.MinFinder.T(97);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        examples.MinFinder.T t1 = new examples.MinFinder.T(4);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        java.lang.Class<?> wildcardClass94 = t90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass4 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        minFinder62.add(t67);
        minFinder56.chval(t67, 5);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder72.chval(t75, (int) (short) -1);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder78.chval(t81, (int) (short) -1);
        minFinder72.add(t81);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-9));
        minFinder72.add(t86);
        minFinder56.chval(t86, (-10));
        int int90 = t86.getVal();
        int int91 = t86.getVal();
        boolean boolean92 = t50.equals((java.lang.Object) int91);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-9) + "'", int90 == (-9));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        boolean boolean18 = t16.equals((java.lang.Object) (-100));
        int int19 = t16.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        int int24 = t23.getVal();
        minFinder16.chval(t23, 10);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder16.add(t33);
        boolean boolean42 = t33.equals((java.lang.Object) 2L);
        boolean boolean43 = t11.equals((java.lang.Object) 2L);
        java.lang.Class<?> wildcardClass44 = t11.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-9) + "'", int24 == (-9));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder29.add(t39);
        java.lang.Class<?> wildcardClass44 = t39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass18 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        java.lang.Class<?> wildcardClass41 = t36.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        int int69 = t1.getVal();
        int int70 = t1.getVal();
        java.lang.Class<?> wildcardClass71 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass34 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass19 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) -1);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        minFinder58.add(t60);
        boolean boolean62 = t1.equals((java.lang.Object) t60);
        java.lang.Class<?> wildcardClass63 = t60.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder.T t45 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder25.add(t45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        boolean boolean64 = t50.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder51.chval(t67, 1);
        minFinder36.add(t67);
        minFinder35.add(t67);
        examples.MinFinder.T t72 = minFinder35.findMin();
        java.lang.Class<?> wildcardClass73 = minFinder35.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        java.lang.Class<?> wildcardClass33 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass14 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        minFinder12.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder12.add(t17);
        minFinder6.chval(t17, 5);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        minFinder22.add(t36);
        minFinder6.chval(t36, (-10));
        boolean boolean40 = t5.equals((java.lang.Object) t36);
        minFinder0.chval(t36, 7);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        minFinder43.add(t52);
        minFinder43.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) (short) 0);
        minFinder43.chval(t58, (int) '4');
        boolean boolean61 = t36.equals((java.lang.Object) minFinder43);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        int int74 = t73.getVal();
        minFinder68.add(t73);
        minFinder62.chval(t73, 5);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder78.chval(t81, (int) (short) -1);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        examples.MinFinder.T t87 = new examples.MinFinder.T(3);
        minFinder84.chval(t87, (int) (short) -1);
        minFinder78.add(t87);
        examples.MinFinder.T t92 = new examples.MinFinder.T((-9));
        minFinder78.add(t92);
        minFinder62.chval(t92, (-10));
        minFinder43.chval(t92, (-10));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t85);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        boolean boolean24 = t20.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        minFinder0.clear();
        java.lang.Class<?> wildcardClass16 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        boolean boolean10 = t8.equals((java.lang.Object) (-1));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList34);
        boolean boolean42 = t8.equals((java.lang.Object) minFinder41);
        minFinder0.chval(t8, (int) (short) 0);
        int int45 = t8.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t11 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        minFinder8.chval(t14, 0);
        minFinder8.clear();
        examples.MinFinder.T t22 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-1));
        minFinder25.chval(t30, 100);
        boolean boolean34 = t30.equals((java.lang.Object) 5L);
        minFinder8.add(t30);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder.T t57 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t57);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        examples.MinFinder.T t89 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder76.add(t89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t31 = minFinder0.findMin();
        examples.MinFinder.T t32 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(t31);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        java.lang.Class<?> wildcardClass34 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        java.lang.Class<?> wildcardClass49 = t46.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        java.lang.Class<?> wildcardClass21 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        java.lang.Object obj9 = null;
        boolean boolean10 = t8.equals(obj9);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        examples.MinFinder.T t1 = new examples.MinFinder.T(5);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        int int29 = t28.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList53);
        minFinder62.clear();
        examples.MinFinder.T t64 = minFinder62.findMin();
        boolean boolean65 = t28.equals((java.lang.Object) t64);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        examples.MinFinder.T t52 = minFinder29.findMin();
        java.lang.Class<?> wildcardClass53 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = t6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        int int37 = t33.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        minFinder41.clear();
        java.lang.Class<?> wildcardClass62 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        java.lang.Object obj74 = null;
        boolean boolean75 = t69.equals(obj74);
        minFinder29.add(t69);
        java.lang.Class<?> wildcardClass77 = t69.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        int int46 = t45.getVal();
        boolean boolean48 = t45.equals((java.lang.Object) '4');
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        minFinder49.chval(t55, (int) ' ');
        int int64 = t55.getVal();
        java.lang.Class<?> wildcardClass65 = t55.getClass();
        boolean boolean66 = t45.equals((java.lang.Object) wildcardClass65);
        int int67 = t45.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        java.lang.Class<?> wildcardClass62 = t59.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        minFinder23.add(t37);
        int int42 = t37.getVal();
        boolean boolean43 = t20.equals((java.lang.Object) int42);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        java.lang.Class<?> wildcardClass45 = t43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder2.chval(t13, 5);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        minFinder18.add(t32);
        minFinder2.chval(t32, (-10));
        boolean boolean36 = t1.equals((java.lang.Object) t32);
        java.lang.Class<?> wildcardClass37 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        java.lang.Class<?> wildcardClass18 = t15.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        java.lang.Class<?> wildcardClass6 = t3.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        int int34 = t30.getVal();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        minFinder35.chval(t41, 0);
        boolean boolean48 = t30.equals((java.lang.Object) 0);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-9) + "'", int34 == (-9));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t31 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass32 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(t31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        minFinder44.add(t56);
        int int62 = t56.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        boolean boolean77 = t73.equals((java.lang.Object) 4.8d);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = minFinder27.findMin();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        boolean boolean35 = t32.equals((java.lang.Object) t34);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t52 = minFinder38.findMin();
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        minFinder53.chval(t59, 0);
        minFinder53.clear();
        boolean boolean67 = t52.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = t34.equals((java.lang.Object) minFinder53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = null;
        minFinder27.chval(t32, (int) (byte) 10);
        java.lang.Class<?> wildcardClass35 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        java.lang.Class<?> wildcardClass17 = t14.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        boolean boolean75 = t61.equals((java.lang.Object) minFinder62);
        minFinder62.clear();
        boolean boolean77 = t58.equals((java.lang.Object) minFinder62);
        examples.MinFinder.T t78 = minFinder62.findMin();
        minFinder62.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(t78);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        int int85 = t27.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        boolean boolean53 = t48.equals((java.lang.Object) t52);
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        minFinder41.chval(t52, (int) 'a');
        int int58 = t52.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        boolean boolean68 = t60.equals((java.lang.Object) (-8.7d));
        boolean boolean69 = t52.equals((java.lang.Object) boolean68);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder65.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        minFinder65.chval(t80, (int) '4');
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder65.chval(t84, 100);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        int int91 = t90.getVal();
        minFinder88.chval(t90, (-100));
        minFinder65.add(t90);
        minFinder32.add(t90);
        examples.MinFinder.T t96 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder32.add(t96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        boolean boolean86 = t78.equals((java.lang.Object) (-8.7d));
        boolean boolean88 = t78.equals((java.lang.Object) "hi!");
        minFinder0.add(t78);
        java.lang.Class<?> wildcardClass90 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        java.lang.Class<?> wildcardClass11 = t9.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        int int12 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        int int15 = t6.getVal();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-9));
        int int32 = t31.getVal();
        minFinder29.chval(t31, (-100));
        minFinder16.chval(t31, 0);
        boolean boolean37 = t6.equals((java.lang.Object) 0);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t41 = minFinder38.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-1));
        minFinder38.chval(t43, 100);
        examples.MinFinder.T t47 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        int int64 = t63.getVal();
        minFinder61.chval(t63, (-100));
        minFinder48.chval(t63, 0);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        java.lang.Object obj75 = null;
        boolean boolean76 = t70.equals(obj75);
        minFinder48.add(t70);
        boolean boolean78 = t47.equals((java.lang.Object) t70);
        minFinder38.chval(t47, (int) ' ');
        boolean boolean81 = t6.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = null;
        minFinder29.chval(t51, (-100));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        minFinder12.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T(100);
        minFinder29.add(t31);
        minFinder12.chval(t31, (int) '#');
        int int35 = t31.getVal();
        minFinder0.add(t31);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        minFinder37.add(t42);
        minFinder37.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        minFinder37.add(t47);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        minFinder49.chval(t51, (int) ' ');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        java.lang.Object obj65 = null;
        boolean boolean66 = t60.equals(obj65);
        int int67 = t60.getVal();
        minFinder49.chval(t60, 0);
        minFinder37.add(t60);
        minFinder37.clear();
        boolean boolean72 = t31.equals((java.lang.Object) minFinder37);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-8));
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        java.lang.Object obj12 = null;
        boolean boolean13 = t11.equals(obj12);
        java.lang.Class<?> wildcardClass14 = t11.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        java.lang.Object obj6 = null;
        boolean boolean7 = t1.equals(obj6);
        java.lang.Class<?> wildcardClass8 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        int int6 = t2.getVal();
        java.lang.Class<?> wildcardClass7 = t2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-9) + "'", int6 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder2.add(t66);
        examples.MinFinder.T t68 = null;
        minFinder2.chval(t68, 6);
        java.lang.Class<?> wildcardClass71 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        java.lang.Class<?> wildcardClass32 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        examples.MinFinder.T t92 = minFinder41.findMin();
        int int93 = t92.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        boolean boolean3 = t1.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) '#');
        int int24 = t23.getVal();
        minFinder4.chval(t23, (int) (byte) 0);
        examples.MinFinder.T t27 = minFinder4.findMin();
        boolean boolean28 = t1.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        minFinder30.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        minFinder30.add(t35);
        examples.MinFinder.T t38 = minFinder30.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        boolean boolean47 = t40.equals((java.lang.Object) 100.0d);
        minFinder30.add(t40);
        int int49 = t40.getVal();
        minFinder4.add(t40);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(t38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t31 = minFinder0.findMin();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        minFinder32.chval(t38, (int) ' ');
        boolean boolean47 = t31.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder0.add(t47);
        java.lang.Class<?> wildcardClass49 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder.T t38 = minFinder37.findMin();
        java.lang.Class<?> wildcardClass39 = minFinder37.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 0);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        boolean boolean62 = t48.equals((java.lang.Object) minFinder49);
        examples.MinFinder.T t63 = minFinder49.findMin();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        minFinder64.clear();
        boolean boolean78 = t63.equals((java.lang.Object) minFinder64);
        minFinder42.chval(t63, (int) ' ');
        java.lang.Class<?> wildcardClass81 = t63.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList50);
        boolean boolean58 = t24.equals((java.lang.Object) minFinder57);
        boolean boolean59 = t19.equals((java.lang.Object) t24);
        int int60 = t19.getVal();
        int int61 = t19.getVal();
        int int62 = t19.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        int int89 = t81.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        int int92 = t83.getVal();
        java.lang.Class<?> wildcardClass93 = t83.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass18 = t17.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass38 = minFinder37.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        java.lang.Class<?> wildcardClass38 = minFinder36.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        java.lang.Class<?> wildcardClass30 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList37);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder.T t75 = minFinder74.findMin();
        int int76 = t75.getVal();
        minFinder46.add(t75);
        minFinder0.add(t75);
        examples.MinFinder.T t80 = new examples.MinFinder.T((-1));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        minFinder0.add(t80);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        java.lang.Class<?> wildcardClass76 = t73.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass9 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        examples.MinFinder.T t48 = minFinder28.findMin();
        java.lang.Object obj49 = new java.lang.Object();
        boolean boolean50 = t48.equals(obj49);
        minFinder26.add(t48);
        int int52 = t48.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        minFinder0.add(t15);
        java.lang.Class<?> wildcardClass20 = t15.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-1));
        minFinder30.chval(t35, 100);
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        minFinder30.add(t39);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t48 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        minFinder43.clear();
        boolean boolean52 = t39.equals((java.lang.Object) minFinder43);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t39, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass32 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        java.lang.Class<?> wildcardClass36 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 100);
        minFinder73.add(t76);
        examples.MinFinder.T t78 = minFinder73.findMin();
        minFinder38.chval(t78, (int) (short) 100);
        java.lang.Class<?> wildcardClass81 = t78.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        java.lang.Class<?> wildcardClass47 = minFinder43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        examples.MinFinder.T t28 = new examples.MinFinder.T(1);
        boolean boolean29 = t24.equals((java.lang.Object) t28);
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        minFinder2.chval(t28, (int) (byte) 0);
        examples.MinFinder.T t34 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(t34);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        minFinder37.add(t42);
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder37.add(t46);
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        minFinder79.add(t81);
        examples.MinFinder.T t84 = new examples.MinFinder.T((-9));
        int int85 = t84.getVal();
        minFinder79.add(t84);
        minFinder37.chval(t84, (-2));
        minFinder36.add(t84);
        int int90 = t84.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-9) + "'", int85 == (-9));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-9) + "'", int90 == (-9));
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass9 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        minFinder52.chval(t58, 0);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        minFinder67.add(t76);
        boolean boolean80 = t66.equals((java.lang.Object) minFinder67);
        minFinder67.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T(3);
        minFinder67.chval(t83, 1);
        minFinder52.add(t83);
        boolean boolean87 = t48.equals((java.lang.Object) t83);
        minFinder0.add(t83);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) '#');
        int int18 = t17.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) int18);
        java.lang.Class<?> wildcardClass20 = t11.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder0.chval(t24, (-5));
        java.lang.Class<?> wildcardClass27 = t24.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass26 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        java.lang.Class<?> wildcardClass89 = minFinder76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t16 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = t16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        minFinder65.chval(t71, 0);
        minFinder65.clear();
        examples.MinFinder.T t79 = minFinder65.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) ' ');
        minFinder65.add(t81);
        examples.MinFinder.T t85 = minFinder65.findMin();
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = t85.equals(obj86);
        minFinder63.add(t85);
        examples.MinFinder.T t89 = minFinder63.findMin();
        boolean boolean90 = t33.equals((java.lang.Object) minFinder63);
        minFinder63.clear();
        examples.MinFinder.T t93 = new examples.MinFinder.T((-3));
        int int94 = t93.getVal();
        int int95 = t93.getVal();
        int int96 = t93.getVal();
        int int97 = t93.getVal();
        minFinder63.chval(t93, 97);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-3) + "'", int97 == (-3));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder59.add(t69);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t69, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder0.chval(t24, (-5));
        java.lang.Class<?> wildcardClass27 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        java.lang.Class<?> wildcardClass32 = t16.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder34.add(t48);
        minFinder33.add(t48);
        examples.MinFinder.T t52 = minFinder33.findMin();
        int int53 = t52.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        java.lang.Class<?> wildcardClass65 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        minFinder0.add(t15);
        java.lang.Class<?> wildcardClass20 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        minFinder0.clear();
        examples.MinFinder.T t38 = minFinder0.findMin();
        examples.MinFinder.T t39 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass40 = t39.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t39);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        minFinder33.clear();
        boolean boolean38 = t24.equals((java.lang.Object) minFinder33);
        minFinder33.clear();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        minFinder40.add(t54);
        examples.MinFinder.T t59 = minFinder40.findMin();
        minFinder33.add(t59);
        minFinder33.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(t59);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        int int46 = t42.getVal();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        boolean boolean60 = t42.equals((java.lang.Object) 0);
        int int61 = t42.getVal();
        minFinder0.chval(t42, (int) (short) 0);
        boolean boolean65 = t42.equals((java.lang.Object) (-6));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 100);
        minFinder42.add(t45);
        minFinder0.chval(t45, 6);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        minFinder49.clear();
        examples.MinFinder.T t51 = minFinder49.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        boolean boolean55 = t53.equals((java.lang.Object) 6);
        int int56 = t53.getVal();
        minFinder49.chval(t53, (int) '#');
        minFinder0.chval(t53, (-8));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-9) + "'", int56 == (-9));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) '#');
        int int20 = t19.getVal();
        minFinder0.chval(t19, (int) (byte) 0);
        java.lang.Class<?> wildcardClass23 = t19.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        java.lang.Class<?> wildcardClass71 = minFinder14.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        minFinder65.chval(t71, 0);
        minFinder65.clear();
        examples.MinFinder.T t79 = minFinder65.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) ' ');
        minFinder65.add(t81);
        examples.MinFinder.T t85 = minFinder65.findMin();
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = t85.equals(obj86);
        minFinder63.add(t85);
        examples.MinFinder.T t89 = minFinder63.findMin();
        boolean boolean90 = t33.equals((java.lang.Object) minFinder63);
        minFinder63.clear();
        java.lang.Class<?> wildcardClass92 = minFinder63.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        java.lang.Class<?> wildcardClass68 = t63.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        minFinder29.chval(t78, (-9));
        java.lang.Class<?> wildcardClass87 = t78.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        int int62 = t59.getVal();
        java.lang.Class<?> wildcardClass63 = t59.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-1));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        boolean boolean45 = t1.equals((java.lang.Object) t42);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        boolean boolean59 = t1.equals((java.lang.Object) minFinder46);
        java.lang.Class<?> wildcardClass60 = minFinder46.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        minFinder65.chval(t71, 0);
        minFinder65.clear();
        examples.MinFinder.T t79 = minFinder65.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) ' ');
        minFinder65.add(t81);
        examples.MinFinder.T t85 = minFinder65.findMin();
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = t85.equals(obj86);
        minFinder63.add(t85);
        examples.MinFinder.T t89 = minFinder63.findMin();
        boolean boolean90 = t33.equals((java.lang.Object) minFinder63);
        java.lang.Class<?> wildcardClass91 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        boolean boolean3 = t1.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) '#');
        int int24 = t23.getVal();
        minFinder4.chval(t23, (int) (byte) 0);
        examples.MinFinder.T t27 = minFinder4.findMin();
        boolean boolean28 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        int int91 = t90.getVal();
        minFinder61.add(t90);
        examples.MinFinder.T t93 = minFinder61.findMin();
        int int94 = t93.getVal();
        int int95 = t93.getVal();
        minFinder4.add(t93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder2.add(t17);
        minFinder2.clear();
        examples.MinFinder.T t21 = null;
        minFinder2.chval(t21, (int) (short) 100);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        minFinder12.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder12.add(t17);
        minFinder6.chval(t17, 5);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        minFinder22.add(t36);
        minFinder6.chval(t36, (-10));
        boolean boolean40 = t5.equals((java.lang.Object) t36);
        minFinder0.chval(t36, 7);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        minFinder43.add(t52);
        minFinder43.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) (short) 0);
        minFinder43.chval(t58, (int) '4');
        boolean boolean61 = t36.equals((java.lang.Object) minFinder43);
        boolean boolean63 = t36.equals((java.lang.Object) true);
        int int64 = t36.getVal();
        int int65 = t36.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-9) + "'", int65 == (-9));
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t23 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass24 = t23.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNotNull(t23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t25 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        minFinder22.chval(t28, 0);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        minFinder22.add(t49);
        boolean boolean53 = t12.equals((java.lang.Object) minFinder22);
        java.lang.Class<?> wildcardClass54 = minFinder22.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        boolean boolean35 = t1.equals((java.lang.Object) minFinder34);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) '#');
        int int38 = t37.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        examples.MinFinder.T[] tArray63 = new examples.MinFinder.T[] { t42, t44, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList64 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList64, tArray63);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList64);
        java.lang.Class<?> wildcardClass68 = tList64.getClass();
        boolean boolean69 = t40.equals((java.lang.Object) tList64);
        boolean boolean70 = t37.equals((java.lang.Object) t40);
        minFinder34.add(t37);
        java.lang.Class<?> wildcardClass72 = t37.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(tArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        java.lang.Class<?> wildcardClass37 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        java.lang.Class<?> wildcardClass42 = minFinder37.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        java.lang.Class<?> wildcardClass4 = t1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = minFinder42.findMin();
        java.lang.Class<?> wildcardClass44 = t43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        int int11 = t9.getVal();
        boolean boolean13 = t9.equals((java.lang.Object) 3L);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        minFinder14.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        int int20 = t19.getVal();
        minFinder14.add(t19);
        examples.MinFinder.T t23 = new examples.MinFinder.T(1);
        boolean boolean24 = t19.equals((java.lang.Object) t23);
        java.lang.Class<?> wildcardClass25 = t23.getClass();
        boolean boolean26 = t9.equals((java.lang.Object) t23);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        examples.MinFinder.T t95 = new examples.MinFinder.T(100);
        minFinder0.add(t95);
        java.lang.Class<?> wildcardClass97 = t95.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass84 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass36 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        minFinder36.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 0);
        minFinder50.chval(t65, (int) '4');
        minFinder36.add(t65);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        boolean boolean75 = t65.equals((java.lang.Object) t70);
        int int76 = t65.getVal();
        boolean boolean77 = t33.equals((java.lang.Object) t65);
        int int78 = t65.getVal();
        minFinder0.add(t65);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        int int69 = t29.getVal();
        java.lang.Class<?> wildcardClass70 = t29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        boolean boolean64 = t50.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder51.chval(t67, 1);
        minFinder36.add(t67);
        minFinder35.add(t67);
        int int72 = t67.getVal();
        java.lang.Class<?> wildcardClass73 = t67.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder2.add(t66);
        examples.MinFinder.T t68 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNotNull(t68);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder.T t76 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass77 = t76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t21 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass22 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        boolean boolean53 = t48.equals((java.lang.Object) t52);
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        minFinder41.chval(t52, (int) 'a');
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t60 = null;
        minFinder41.add(t60);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        minFinder38.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder38.chval(t54, 1);
        minFinder23.add(t54);
        boolean boolean58 = t19.equals((java.lang.Object) t54);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-1));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        boolean boolean63 = t19.equals((java.lang.Object) t60);
        minFinder0.add(t60);
        int int65 = t60.getVal();
        java.lang.Class<?> wildcardClass66 = t60.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder72.chval(t78, 0);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        boolean boolean88 = t86.equals((java.lang.Object) (-1));
        int int89 = t86.getVal();
        minFinder72.chval(t86, 0);
        minFinder71.add(t86);
        minFinder41.add(t86);
        int int94 = t86.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        boolean boolean35 = t30.equals((java.lang.Object) 8);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        minFinder77.clear();
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        minFinder83.clear();
        minFinder83.clear();
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) 'a');
        int int89 = t88.getVal();
        minFinder83.add(t88);
        examples.MinFinder.T t92 = new examples.MinFinder.T(3);
        minFinder83.add(t92);
        examples.MinFinder.T t94 = minFinder83.findMin();
        minFinder77.add(t94);
        boolean boolean96 = t30.equals((java.lang.Object) minFinder77);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 0);
        int int57 = t56.getVal();
        minFinder37.chval(t56, 100);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        boolean boolean63 = t61.equals((java.lang.Object) (-1));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        int int81 = t76.getVal();
        int int82 = t76.getVal();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        int int85 = t84.getVal();
        examples.MinFinder.T[] tArray86 = new examples.MinFinder.T[] { t65, t67, t74, t76, t84 };
        java.util.ArrayList<examples.MinFinder.T> tList87 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList87, tArray86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList87);
        examples.MinFinder minFinder94 = new examples.MinFinder(tList87);
        boolean boolean95 = t61.equals((java.lang.Object) minFinder94);
        boolean boolean96 = t56.equals((java.lang.Object) t61);
        int int97 = t56.getVal();
        int int98 = t56.getVal();
        minFinder32.add(t56);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertNotNull(tArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 0);
        int int15 = t14.getVal();
        minFinder0.chval(t14, (-9));
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        minFinder24.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        minFinder24.add(t29);
        minFinder18.chval(t29, 5);
        examples.MinFinder.T t34 = minFinder18.findMin();
        examples.MinFinder.T t35 = minFinder18.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder41.chval(t47, 0);
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        minFinder56.add(t65);
        boolean boolean69 = t55.equals((java.lang.Object) minFinder56);
        minFinder56.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder56.chval(t72, 1);
        minFinder41.add(t72);
        boolean boolean76 = t37.equals((java.lang.Object) t72);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-1));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        boolean boolean81 = t37.equals((java.lang.Object) t78);
        minFinder18.add(t78);
        int int83 = t78.getVal();
        minFinder0.chval(t78, 5);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        minFinder37.add(t42);
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder37.add(t46);
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        minFinder79.add(t81);
        examples.MinFinder.T t84 = new examples.MinFinder.T((-9));
        int int85 = t84.getVal();
        minFinder79.add(t84);
        minFinder37.chval(t84, (-2));
        minFinder36.add(t84);
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-9) + "'", int85 == (-9));
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder0.add(t23);
        java.lang.Class<?> wildcardClass28 = t23.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) (short) 100);
        minFinder88.add(t91);
        examples.MinFinder.T t93 = minFinder88.findMin();
        boolean boolean94 = t60.equals((java.lang.Object) minFinder88);
        java.lang.Class<?> wildcardClass95 = t60.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass15 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        int int71 = t9.getVal();
        java.lang.Class<?> wildcardClass72 = t9.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        int int2 = t1.getVal();
        examples.MinFinder.T t4 = new examples.MinFinder.T(3);
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        int int26 = t25.getVal();
        examples.MinFinder.T[] tArray27 = new examples.MinFinder.T[] { t6, t8, t15, t17, t25 };
        java.util.ArrayList<examples.MinFinder.T> tList28 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList28, tArray27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList28);
        java.lang.Class<?> wildcardClass32 = tList28.getClass();
        boolean boolean33 = t4.equals((java.lang.Object) tList28);
        boolean boolean34 = t1.equals((java.lang.Object) t4);
        java.lang.Class<?> wildcardClass35 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(tArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        int int51 = t50.getVal();
        minFinder43.chval(t50, 10);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        minFinder54.chval(t60, 0);
        minFinder43.add(t60);
        minFinder41.add(t60);
        minFinder41.clear();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-9) + "'", int51 == (-9));
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 100);
        minFinder73.add(t76);
        examples.MinFinder.T t78 = minFinder73.findMin();
        minFinder38.chval(t78, (int) (short) 100);
        examples.MinFinder.T t81 = null;
        minFinder38.add(t81);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t78);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder0.chval(t64, 1);
        java.lang.Class<?> wildcardClass68 = t64.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder2.add(t17);
        examples.MinFinder.T t20 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass21 = t20.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass38 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-1));
        minFinder2.chval(t7, 100);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        minFinder2.add(t11);
        minFinder2.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList43);
        boolean boolean53 = t17.equals((java.lang.Object) minFinder52);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        boolean boolean60 = t17.equals((java.lang.Object) minFinder54);
        minFinder2.chval(t17, 97);
        minFinder2.clear();
        boolean boolean64 = t1.equals((java.lang.Object) minFinder2);
        java.lang.Class<?> wildcardClass65 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder minFinder1 = new examples.MinFinder();
        examples.MinFinder.T t2 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t4 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t6 = minFinder1.findMin();
        minFinder1.clear();
        minFinder1.clear();
        examples.MinFinder.T t9 = minFinder1.findMin();
        examples.MinFinder.T t10 = minFinder1.findMin();
        examples.MinFinder.T t11 = minFinder1.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        boolean boolean20 = t13.equals((java.lang.Object) 100.0d);
        int int21 = t13.getVal();
        minFinder1.add(t13);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder23.add(t50);
        boolean boolean54 = t13.equals((java.lang.Object) minFinder23);
        minFinder0.add(t13);
        java.lang.Class<?> wildcardClass56 = t13.getClass();
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t77 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 0);
        java.lang.Class<?> wildcardClass47 = minFinder42.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        examples.MinFinder.T t1 = new examples.MinFinder.T(35);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t18 = minFinder4.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        minFinder19.clear();
        boolean boolean33 = t18.equals((java.lang.Object) minFinder19);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        minFinder34.add(t48);
        boolean boolean53 = t18.equals((java.lang.Object) minFinder34);
        boolean boolean54 = t1.equals((java.lang.Object) boolean53);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        examples.MinFinder.T t28 = new examples.MinFinder.T(1);
        boolean boolean29 = t24.equals((java.lang.Object) t28);
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        minFinder2.chval(t28, (int) (byte) 0);
        java.lang.Class<?> wildcardClass34 = t28.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) (short) 0);
        int int64 = t63.getVal();
        boolean boolean65 = t59.equals((java.lang.Object) t63);
        java.lang.Class<?> wildcardClass66 = t59.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder59.add(t69);
        examples.MinFinder.T t74 = minFinder59.findMin();
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder81.chval(t84, (int) (short) -1);
        minFinder75.add(t84);
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        int int90 = t89.getVal();
        minFinder75.add(t89);
        boolean boolean92 = t74.equals((java.lang.Object) t89);
        minFinder0.add(t89);
        java.lang.Class<?> wildcardClass94 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        boolean boolean74 = t31.equals((java.lang.Object) minFinder68);
        examples.MinFinder.T t75 = minFinder68.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder68.add(t77);
        minFinder29.add(t77);
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass5 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t28, t30, t37, t42, t48, t50, t58 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        minFinder68.clear();
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        minFinder70.clear();
        minFinder70.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        minFinder70.add(t75);
        examples.MinFinder.T t79 = new examples.MinFinder.T(1);
        boolean boolean80 = t75.equals((java.lang.Object) t79);
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        minFinder68.chval(t79, (int) 'a');
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        int int87 = t86.getVal();
        int int88 = t86.getVal();
        int int89 = t86.getVal();
        int int90 = t86.getVal();
        int int91 = t86.getVal();
        int int92 = t86.getVal();
        boolean boolean94 = t86.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass95 = t86.getClass();
        boolean boolean96 = t79.equals((java.lang.Object) t86);
        minFinder0.add(t86);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        int int46 = t42.getVal();
        minFinder0.chval(t42, 35);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        java.lang.Class<?> wildcardClass30 = minFinder28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 6);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        minFinder69.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        boolean boolean64 = t50.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        examples.MinFinder.T t66 = minFinder51.findMin();
        boolean boolean67 = t44.equals((java.lang.Object) t66);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = t66.getVal();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        int int15 = t6.getVal();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-9));
        int int32 = t31.getVal();
        minFinder29.chval(t31, (-100));
        minFinder16.chval(t31, 0);
        boolean boolean37 = t6.equals((java.lang.Object) 0);
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) (byte) 1);
        boolean boolean40 = t6.equals((java.lang.Object) t39);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        int int82 = t78.getVal();
        java.lang.Object obj83 = null;
        boolean boolean84 = t78.equals(obj83);
        int int85 = t78.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((int) 'a');
        int int8 = t7.getVal();
        minFinder2.add(t7);
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder2.add(t11);
        boolean boolean13 = t1.equals((java.lang.Object) t11);
        int int14 = t11.getVal();
        java.lang.Class<?> wildcardClass15 = t11.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder2.chval(t64, (int) (short) 10);
        boolean boolean69 = t64.equals((java.lang.Object) (-6));
        int int70 = t64.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t20 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t20);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        minFinder12.chval(t18, 0);
        minFinder12.clear();
        examples.MinFinder.T t26 = minFinder12.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) ' ');
        minFinder12.add(t28);
        examples.MinFinder.T t32 = minFinder12.findMin();
        minFinder0.chval(t32, 1);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) (short) 100);
        minFinder88.add(t91);
        examples.MinFinder.T t93 = minFinder88.findMin();
        boolean boolean94 = t60.equals((java.lang.Object) minFinder88);
        java.lang.Class<?> wildcardClass95 = minFinder88.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        examples.MinFinder.T t34 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 100);
        minFinder72.add(t75);
        examples.MinFinder.T t77 = minFinder72.findMin();
        minFinder25.add(t77);
        examples.MinFinder.T t79 = null;
        minFinder25.chval(t79, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        java.lang.Class<?> wildcardClass34 = minFinder28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        java.lang.Class<?> wildcardClass9 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        minFinder71.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        examples.MinFinder.T[] tArray87 = new examples.MinFinder.T[] { t50, t52, t59, t64, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList88 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList88, tArray87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList88);
        examples.MinFinder.T t92 = new examples.MinFinder.T((-3));
        minFinder90.add(t92);
        examples.MinFinder.T t94 = minFinder90.findMin();
        int int95 = t94.getVal();
        boolean boolean97 = t94.equals((java.lang.Object) '4');
        minFinder0.add(t94);
        java.lang.Class<?> wildcardClass99 = t94.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(tArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        java.lang.Class<?> wildcardClass25 = minFinder13.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        java.lang.Class<?> wildcardClass47 = tList39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass8 = minFinder0.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        boolean boolean52 = t44.equals((java.lang.Object) 0.0f);
        minFinder41.add(t44);
        java.lang.Class<?> wildcardClass54 = t44.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder57.chval(t87, 10);
        minFinder0.add(t87);
        examples.MinFinder minFinder91 = new examples.MinFinder();
        examples.MinFinder.T t92 = minFinder91.findMin();
        examples.MinFinder.T t94 = new examples.MinFinder.T(3);
        minFinder91.chval(t94, (int) (short) -1);
        minFinder0.add(t94);
        examples.MinFinder.T t98 = minFinder0.findMin();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNotNull(t98);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t7 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = t7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t7);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        java.lang.Class<?> wildcardClass97 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        int int60 = t59.getVal();
        minFinder52.chval(t59, 10);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        minFinder63.chval(t69, 0);
        minFinder52.add(t69);
        minFinder41.add(t69);
        int int78 = t69.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass41 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        int int54 = t48.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t18, t20, t27, t32, t38, t40, t48 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        minFinder58.add(t60);
        examples.MinFinder.T t62 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        minFinder64.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        minFinder64.add(t69);
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder64.add(t73);
        examples.MinFinder.T t75 = minFinder64.findMin();
        minFinder58.add(t75);
        minFinder0.add(t75);
        java.lang.Class<?> wildcardClass78 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t31, t33, t40, t45, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        minFinder71.add(t73);
        examples.MinFinder.T t75 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        minFinder77.clear();
        minFinder77.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        minFinder77.add(t82);
        examples.MinFinder.T t86 = new examples.MinFinder.T(3);
        minFinder77.add(t86);
        examples.MinFinder.T t88 = minFinder77.findMin();
        minFinder71.add(t88);
        examples.MinFinder.T t90 = minFinder71.findMin();
        java.lang.Class<?> wildcardClass91 = minFinder71.getClass();
        boolean boolean92 = t22.equals((java.lang.Object) minFinder71);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        int int83 = t82.getVal();
        java.lang.Class<?> wildcardClass84 = t82.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        java.lang.Class<?> wildcardClass32 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        minFinder34.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (short) 0);
        minFinder34.chval(t49, (int) '4');
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        int int54 = t53.getVal();
        minFinder34.chval(t53, 100);
        examples.MinFinder.T t57 = minFinder34.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(0);
        java.lang.Object obj60 = null;
        boolean boolean61 = t59.equals(obj60);
        minFinder34.chval(t59, (int) '#');
        minFinder0.chval(t59, (-8));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        java.lang.Class<?> wildcardClass45 = minFinder43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t34);
        examples.MinFinder.T t36 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t36);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        java.lang.Object obj21 = new java.lang.Object();
        boolean boolean22 = t20.equals(obj21);
        int int23 = t20.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder2.chval(t64, (int) (short) 10);
        java.lang.Class<?> wildcardClass68 = t64.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        java.lang.Class<?> wildcardClass11 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-9));
        int int42 = t41.getVal();
        minFinder39.chval(t41, (-100));
        int int45 = t41.getVal();
        minFinder36.chval(t41, (-4));
        java.lang.Class<?> wildcardClass48 = t41.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        java.lang.Class<?> wildcardClass42 = t37.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 0);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        java.lang.Class<?> wildcardClass31 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(0);
        java.lang.Object obj10 = null;
        boolean boolean11 = t9.equals(obj10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList35);
        minFinder44.clear();
        boolean boolean46 = t9.equals((java.lang.Object) minFinder44);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-9));
        int int50 = t49.getVal();
        minFinder47.chval(t49, (-100));
        int int53 = t49.getVal();
        minFinder44.chval(t49, (-4));
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder56.add(t61);
        minFinder56.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        minFinder56.add(t66);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        minFinder56.add(t69);
        minFinder44.add(t69);
        minFinder0.add(t69);
        java.lang.Class<?> wildcardClass73 = t69.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-9) + "'", int50 == (-9));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-9) + "'", int53 == (-9));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        boolean boolean34 = t31.equals((java.lang.Object) 8.4d);
        int int35 = t31.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = t9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder17.add(t33);
        java.lang.Class<?> wildcardClass36 = t33.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        int int48 = t47.getVal();
        minFinder41.add(t47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder.T t77 = minFinder76.findMin();
        boolean boolean78 = t47.equals((java.lang.Object) minFinder76);
        minFinder76.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        boolean boolean64 = t50.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder51.chval(t67, 1);
        minFinder36.add(t67);
        minFinder35.add(t67);
        minFinder35.clear();
        minFinder35.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder0.chval(t24, (-5));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        boolean boolean38 = t36.equals((java.lang.Object) (-1));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList62);
        boolean boolean72 = t36.equals((java.lang.Object) minFinder71);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        boolean boolean79 = t36.equals((java.lang.Object) minFinder73);
        minFinder27.add(t36);
        minFinder0.add(t36);
        java.lang.Class<?> wildcardClass82 = t36.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        boolean boolean55 = t53.equals((java.lang.Object) (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList79);
        boolean boolean89 = t53.equals((java.lang.Object) minFinder88);
        examples.MinFinder minFinder90 = new examples.MinFinder();
        examples.MinFinder.T t91 = minFinder90.findMin();
        examples.MinFinder.T t93 = new examples.MinFinder.T(3);
        minFinder90.chval(t93, (int) (short) -1);
        boolean boolean96 = t53.equals((java.lang.Object) minFinder90);
        boolean boolean97 = t51.equals((java.lang.Object) minFinder90);
        minFinder90.clear();
        java.lang.Class<?> wildcardClass99 = minFinder90.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(t91);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder72.chval(t78, 0);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        boolean boolean88 = t86.equals((java.lang.Object) (-1));
        int int89 = t86.getVal();
        minFinder72.chval(t86, 0);
        minFinder71.add(t86);
        minFinder41.add(t86);
        examples.MinFinder.T t94 = minFinder41.findMin();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(t94);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        minFinder61.add(t75);
        minFinder41.add(t75);
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) 0.0f);
        int int10 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        int int42 = t37.getVal();
        java.lang.Class<?> wildcardClass43 = t37.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        minFinder52.add(t54);
        minFinder13.add(t54);
        int int59 = t54.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder29.add(t39);
        examples.MinFinder.T t44 = minFinder29.findMin();
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder45.add(t59);
        boolean boolean62 = t44.equals((java.lang.Object) t59);
        int int63 = t44.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass22 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder52.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) (short) 0);
        minFinder52.chval(t67, (int) '4');
        examples.MinFinder.T t70 = minFinder52.findMin();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        minFinder71.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((-1));
        minFinder71.chval(t86, (int) (byte) 1);
        minFinder52.add(t86);
        minFinder29.chval(t86, (int) 'a');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        java.lang.Class<?> wildcardClass21 = t15.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T(5);
        minFinder28.add(t35);
        int int37 = t35.getVal();
        java.lang.Class<?> wildcardClass38 = t35.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        boolean boolean68 = t54.equals((java.lang.Object) minFinder55);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        minFinder55.add(t70);
        minFinder41.add(t70);
        examples.MinFinder.T t74 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(t74);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder38.add(t47);
        java.lang.Class<?> wildcardClass53 = minFinder38.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        java.lang.Class<?> wildcardClass6 = t2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        minFinder23.add(t28);
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder23.add(t32);
        boolean boolean34 = t22.equals((java.lang.Object) t32);
        int int35 = t32.getVal();
        minFinder2.chval(t32, 0);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        minFinder33.add(t42);
        boolean boolean46 = t32.equals((java.lang.Object) minFinder33);
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        minFinder48.clear();
        boolean boolean62 = t47.equals((java.lang.Object) minFinder48);
        minFinder0.add(t47);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) (short) 0);
        int int79 = t78.getVal();
        minFinder64.chval(t78, (-9));
        int int82 = t78.getVal();
        minFinder0.add(t78);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        minFinder84.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        int int90 = t89.getVal();
        minFinder84.add(t89);
        int int92 = t89.getVal();
        int int93 = t89.getVal();
        int int94 = t89.getVal();
        minFinder0.add(t89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        int int30 = t1.getVal();
        int int31 = t1.getVal();
        java.lang.Object obj32 = null;
        boolean boolean33 = t1.equals(obj32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder81.chval(t84, (int) (short) -1);
        minFinder75.add(t84);
        boolean boolean88 = t74.equals((java.lang.Object) minFinder75);
        minFinder75.clear();
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder75.chval(t91, 1);
        minFinder60.add(t91);
        minFinder59.add(t91);
        examples.MinFinder.T t96 = minFinder59.findMin();
        minFinder13.chval(t96, (-6));
        int int99 = t96.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-3) + "'", int99 == (-3));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t19 = minFinder14.findMin();
        examples.MinFinder.T t20 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t29, t31, t38, t40, t48 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList51);
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        int int90 = t89.getVal();
        minFinder60.add(t89);
        minFinder14.add(t89);
        minFinder0.add(t89);
        examples.MinFinder.T t94 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertNotNull(t94);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        minFinder6.add(t15);
        int int19 = t15.getVal();
        minFinder0.add(t15);
        int int21 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        minFinder44.clear();
        minFinder44.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass8 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        int int34 = t31.getVal();
        minFinder17.chval(t31, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) (-1));
        int int84 = t81.getVal();
        minFinder67.chval(t81, 0);
        minFinder66.add(t81);
        examples.MinFinder.T t88 = minFinder66.findMin();
        boolean boolean89 = t31.equals((java.lang.Object) minFinder66);
        minFinder0.add(t31);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        int int67 = t61.getVal();
        int int68 = t61.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) 'a');
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (short) 10);
        boolean boolean25 = t9.equals((java.lang.Object) t24);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-1));
        minFinder26.chval(t31, 100);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        minFinder26.add(t35);
        minFinder26.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        boolean boolean43 = t41.equals((java.lang.Object) (-1));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        int int65 = t64.getVal();
        examples.MinFinder.T[] tArray66 = new examples.MinFinder.T[] { t45, t47, t54, t56, t64 };
        java.util.ArrayList<examples.MinFinder.T> tList67 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList67, tArray66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList67);
        boolean boolean77 = t41.equals((java.lang.Object) minFinder76);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder78.chval(t81, (int) (short) -1);
        boolean boolean84 = t41.equals((java.lang.Object) minFinder78);
        minFinder26.chval(t41, 97);
        examples.MinFinder minFinder87 = new examples.MinFinder();
        examples.MinFinder.T t88 = minFinder87.findMin();
        minFinder87.clear();
        examples.MinFinder.T t90 = minFinder87.findMin();
        minFinder87.clear();
        minFinder87.clear();
        examples.MinFinder.T t94 = new examples.MinFinder.T((-9));
        int int95 = t94.getVal();
        minFinder87.chval(t94, 10);
        boolean boolean98 = t41.equals((java.lang.Object) 10);
        boolean boolean99 = t9.equals((java.lang.Object) t41);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertNotNull(tArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertNull(t90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-9) + "'", int95 == (-9));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        boolean boolean35 = t1.equals((java.lang.Object) minFinder34);
        java.lang.Class<?> wildcardClass36 = minFinder34.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        int int4 = t1.getVal();
        java.lang.Class<?> wildcardClass5 = t1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-9) + "'", int4 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder11.clear();
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        minFinder25.add(t34);
        minFinder25.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        minFinder25.chval(t40, (int) '4');
        minFinder11.add(t40);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        boolean boolean50 = t40.equals((java.lang.Object) t45);
        minFinder0.add(t45);
        java.lang.Class<?> wildcardClass52 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        int int33 = t17.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList57);
        examples.MinFinder.T t71 = minFinder70.findMin();
        int int72 = t71.getVal();
        boolean boolean73 = t17.equals((java.lang.Object) t71);
        java.lang.Class<?> wildcardClass74 = t17.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        int int19 = t15.getVal();
        minFinder0.chval(t15, (-7));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        minFinder52.chval(t58, 0);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        boolean boolean68 = t66.equals((java.lang.Object) (-1));
        int int69 = t66.getVal();
        minFinder52.chval(t66, 0);
        minFinder51.add(t66);
        examples.MinFinder.T t73 = minFinder51.findMin();
        examples.MinFinder.T t74 = minFinder51.findMin();
        boolean boolean75 = t15.equals((java.lang.Object) t74);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-9) + "'", int19 == (-9));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        minFinder33.clear();
        boolean boolean38 = t24.equals((java.lang.Object) minFinder33);
        minFinder33.clear();
        java.lang.Class<?> wildcardClass40 = minFinder33.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t49 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t49);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t43 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass44 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        minFinder37.add(t51);
        minFinder32.chval(t51, (int) (short) 100);
        java.lang.Class<?> wildcardClass58 = t51.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-1));
        minFinder4.chval(t9, 100);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.chval(t19, 97);
        minFinder4.clear();
        boolean boolean66 = t1.equals((java.lang.Object) minFinder4);
        boolean boolean68 = t1.equals((java.lang.Object) (-8L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-9) + "'", int2 == (-9));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-1));
        minFinder49.chval(t54, 100);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        minFinder49.add(t58);
        minFinder2.add(t58);
        java.lang.Class<?> wildcardClass63 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        minFinder69.chval(t75, 0);
        int int82 = t75.getVal();
        minFinder54.add(t75);
        minFinder54.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        java.lang.Class<?> wildcardClass31 = tList25.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass31 = t30.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        boolean boolean73 = t59.equals((java.lang.Object) minFinder60);
        minFinder60.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder60.chval(t76, 1);
        minFinder45.add(t76);
        minFinder44.add(t76);
        examples.MinFinder.T t81 = minFinder44.findMin();
        minFinder2.chval(t81, (-7));
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) (byte) 1);
        int int86 = t85.getVal();
        boolean boolean87 = t81.equals((java.lang.Object) int86);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-9));
        int int35 = t34.getVal();
        minFinder29.add(t34);
        java.lang.Class<?> wildcardClass37 = t34.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-9) + "'", int35 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-9) + "'", int17 == (-9));
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        java.lang.Class<?> wildcardClass41 = tList37.getClass();
        boolean boolean42 = t13.equals((java.lang.Object) tList37);
        int int43 = t13.getVal();
        minFinder0.chval(t13, (-9));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        int int82 = t77.getVal();
        int int83 = t77.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t47, t49, t56, t61, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        minFinder87.add(t89);
        java.lang.Object obj91 = null;
        boolean boolean92 = t89.equals(obj91);
        minFinder0.add(t89);
        examples.MinFinder.T t95 = new examples.MinFinder.T((int) ' ');
        boolean boolean96 = t89.equals((java.lang.Object) ' ');
        int int97 = t89.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-3) + "'", int97 == (-3));
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        minFinder37.add(t51);
        minFinder32.chval(t51, (int) (short) 100);
        examples.MinFinder.T t58 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNull(t58);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        boolean boolean64 = t50.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder51.chval(t67, 1);
        minFinder36.add(t67);
        minFinder35.add(t67);
        examples.MinFinder.T t72 = minFinder35.findMin();
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder.T t76 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        int int80 = t79.getVal();
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        int int83 = t79.getVal();
        int int84 = t79.getVal();
        int int85 = t79.getVal();
        minFinder73.chval(t79, (int) ' ');
        boolean boolean88 = t72.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-9) + "'", int17 == (-9));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        java.lang.Class<?> wildcardClass74 = tList56.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        minFinder26.clear();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder40.add(t49);
        minFinder40.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 0);
        minFinder40.chval(t55, (int) '4');
        minFinder26.add(t55);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        boolean boolean65 = t55.equals((java.lang.Object) t60);
        minFinder0.chval(t60, 10);
        int int68 = t60.getVal();
        java.lang.Class<?> wildcardClass69 = t60.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder65.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        minFinder65.chval(t80, (int) '4');
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder65.chval(t84, 100);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        int int91 = t90.getVal();
        minFinder88.chval(t90, (-100));
        minFinder65.add(t90);
        minFinder32.add(t90);
        java.lang.Class<?> wildcardClass96 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t39 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder.T t42 = minFinder34.findMin();
        examples.MinFinder.T t43 = minFinder34.findMin();
        examples.MinFinder.T t44 = minFinder34.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        minFinder34.chval(t46, (-2));
        examples.MinFinder.T t51 = minFinder34.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        boolean boolean55 = t53.equals((java.lang.Object) 6);
        int int56 = t53.getVal();
        minFinder34.add(t53);
        minFinder0.chval(t53, 9);
        int int60 = t53.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-9) + "'", int56 == (-9));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        minFinder25.chval(t31, 0);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder25.chval(t40, (-5));
        boolean boolean44 = t19.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-9));
        int int63 = t62.getVal();
        minFinder60.chval(t62, (-100));
        minFinder47.chval(t62, 0);
        boolean boolean68 = t46.equals((java.lang.Object) t62);
        boolean boolean69 = t19.equals((java.lang.Object) t46);
        int int70 = t19.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-9) + "'", int63 == (-9));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t16 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass17 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        int int60 = t58.getVal();
        java.lang.Class<?> wildcardClass61 = t58.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t34);
        java.lang.Class<?> wildcardClass36 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        minFinder31.add(t40);
        minFinder31.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-1));
        minFinder31.chval(t46, (int) (byte) 1);
        boolean boolean49 = t30.equals((java.lang.Object) t46);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        int int39 = t33.getVal();
        java.lang.Class<?> wildcardClass40 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-1));
        minFinder13.chval(t18, 100);
        examples.MinFinder.T t22 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        int int39 = t38.getVal();
        minFinder36.chval(t38, (-100));
        minFinder23.chval(t38, 0);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        java.lang.Object obj50 = null;
        boolean boolean51 = t45.equals(obj50);
        minFinder23.add(t45);
        boolean boolean53 = t22.equals((java.lang.Object) t45);
        minFinder13.chval(t22, (int) ' ');
        minFinder0.add(t22);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        minFinder57.chval(t63, 0);
        minFinder57.clear();
        examples.MinFinder.T t71 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t77 = minFinder74.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-1));
        minFinder74.chval(t79, 100);
        boolean boolean83 = t79.equals((java.lang.Object) 5L);
        minFinder57.add(t79);
        examples.MinFinder.T t85 = minFinder57.findMin();
        int int86 = t85.getVal();
        boolean boolean87 = t22.equals((java.lang.Object) t85);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-9) + "'", int39 == (-9));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 1);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t24, t26, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList46);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        boolean boolean55 = t53.equals((java.lang.Object) (-1));
        minFinder51.add(t53);
        boolean boolean58 = t53.equals((java.lang.Object) 8);
        boolean boolean59 = t9.equals((java.lang.Object) t53);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        java.lang.Class<?> wildcardClass66 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        examples.MinFinder.T t89 = minFinder76.findMin();
        int int90 = t89.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (short) 0);
        minFinder21.chval(t36, (int) '4');
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder21.chval(t40, 100);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        boolean boolean47 = t45.equals((java.lang.Object) (-1));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        boolean boolean79 = t45.equals((java.lang.Object) minFinder78);
        boolean boolean80 = t40.equals((java.lang.Object) t45);
        minFinder2.add(t45);
        examples.MinFinder.T t82 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        java.lang.Class<?> wildcardClass71 = t9.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder2.chval(t13, 5);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        minFinder18.add(t32);
        minFinder2.chval(t32, (-10));
        boolean boolean36 = t1.equals((java.lang.Object) t32);
        int int37 = t1.getVal();
        int int38 = t1.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t47 = minFinder45.findMin();
        java.lang.Class<?> wildcardClass48 = minFinder45.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        examples.MinFinder.T t97 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t99 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(t97);
        org.junit.Assert.assertNull(t99);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder.T t34 = null;
        minFinder29.chval(t34, (-9));
        java.lang.Class<?> wildcardClass37 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        minFinder25.chval(t31, 0);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder25.chval(t40, (-5));
        boolean boolean44 = t19.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-9));
        int int63 = t62.getVal();
        minFinder60.chval(t62, (-100));
        minFinder47.chval(t62, 0);
        boolean boolean68 = t46.equals((java.lang.Object) t62);
        boolean boolean69 = t19.equals((java.lang.Object) t46);
        int int70 = t46.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-9) + "'", int63 == (-9));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder65.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        minFinder65.chval(t80, (int) '4');
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder65.chval(t84, 100);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        int int91 = t90.getVal();
        minFinder88.chval(t90, (-100));
        minFinder65.add(t90);
        minFinder32.add(t90);
        examples.MinFinder minFinder96 = new examples.MinFinder();
        examples.MinFinder.T t97 = minFinder96.findMin();
        examples.MinFinder.T t98 = minFinder96.findMin();
        boolean boolean99 = t90.equals((java.lang.Object) t98);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
        org.junit.Assert.assertNull(t97);
        org.junit.Assert.assertNull(t98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        examples.MinFinder.T t92 = minFinder41.findMin();
        examples.MinFinder.T t93 = minFinder41.findMin();
        int int94 = t93.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder81.chval(t84, (int) (short) -1);
        minFinder75.add(t84);
        boolean boolean88 = t74.equals((java.lang.Object) minFinder75);
        minFinder75.clear();
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder75.chval(t91, 1);
        minFinder60.add(t91);
        minFinder59.add(t91);
        examples.MinFinder.T t96 = minFinder59.findMin();
        minFinder13.chval(t96, (-6));
        minFinder13.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t96);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t27 = minFinder25.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t27);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        java.lang.Class<?> wildcardClass4 = minFinder0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass10 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t23 = minFinder0.findMin();
        int int24 = t23.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNotNull(t23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        minFinder49.add(t52);
        examples.MinFinder.T t54 = minFinder49.findMin();
        minFinder2.add(t54);
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        java.lang.Class<?> wildcardClass39 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder0.chval(t84, (int) ' ');
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        java.lang.Class<?> wildcardClass20 = t14.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        minFinder33.clear();
        boolean boolean38 = t24.equals((java.lang.Object) minFinder33);
        minFinder33.clear();
        examples.MinFinder.T t40 = minFinder33.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t40);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        java.lang.Class<?> wildcardClass81 = tList77.getClass();
        boolean boolean82 = t53.equals((java.lang.Object) tList77);
        int int83 = t53.getVal();
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        minFinder84.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        int int90 = t89.getVal();
        minFinder84.add(t89);
        int int92 = t89.getVal();
        boolean boolean93 = t53.equals((java.lang.Object) t89);
        int int94 = t89.getVal();
        minFinder41.add(t89);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        boolean boolean72 = t70.equals((java.lang.Object) (-1));
        int int73 = t70.getVal();
        minFinder56.chval(t70, 0);
        minFinder56.clear();
        boolean boolean77 = t50.equals((java.lang.Object) minFinder56);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        minFinder0.clear();
        examples.MinFinder.T t21 = null;
        minFinder0.add(t21);
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        minFinder25.add(t34);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        minFinder25.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder25.chval(t41, 1);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T[] tArray82 = new examples.MinFinder.T[] { t45, t47, t54, t59, t65, t67, t75 };
        java.util.ArrayList<examples.MinFinder.T> tList83 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList83, tArray82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList83);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        minFinder85.add(t87);
        minFinder25.chval(t87, (int) (short) 10);
        boolean boolean92 = t87.equals((java.lang.Object) (-6));
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t87, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(tArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        boolean boolean69 = t17.equals((java.lang.Object) minFinder62);
        java.lang.Class<?> wildcardClass70 = t17.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = minFinder41.findMin();
        examples.MinFinder.T t48 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        int int84 = t83.getVal();
        examples.MinFinder.T t86 = new examples.MinFinder.T(7);
        boolean boolean87 = t83.equals((java.lang.Object) t86);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder4.chval(t20, 1);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t24, t26, t33, t38, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder64.add(t66);
        examples.MinFinder.T t68 = minFinder64.findMin();
        minFinder4.add(t68);
        boolean boolean70 = t1.equals((java.lang.Object) minFinder4);
        java.lang.Class<?> wildcardClass71 = minFinder4.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        minFinder29.chval(t78, (-9));
        minFinder29.clear();
        examples.MinFinder.T t88 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNull(t88);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        boolean boolean32 = t25.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        minFinder33.chval(t39, 0);
        minFinder33.clear();
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        boolean boolean51 = t49.equals((java.lang.Object) ' ');
        minFinder33.add(t49);
        boolean boolean53 = t25.equals((java.lang.Object) t49);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        minFinder82.add(t84);
        boolean boolean86 = t25.equals((java.lang.Object) t84);
        minFinder0.chval(t25, (int) ' ');
        java.lang.Object obj89 = null;
        boolean boolean90 = t25.equals(obj89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        int int11 = t5.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        int int30 = t1.getVal();
        int int31 = t1.getVal();
        int int32 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList59);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t65 = minFinder63.findMin();
        boolean boolean66 = t14.equals((java.lang.Object) minFinder63);
        java.lang.Class<?> wildcardClass67 = t14.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = null;
        minFinder0.add(t10);
        java.lang.Class<?> wildcardClass12 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        minFinder38.chval(t40, (int) ' ');
        boolean boolean48 = t37.equals((java.lang.Object) t40);
        java.lang.Class<?> wildcardClass49 = t40.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        minFinder12.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T(100);
        minFinder29.add(t31);
        minFinder12.chval(t31, (int) '#');
        int int35 = t31.getVal();
        minFinder0.add(t31);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        minFinder37.add(t42);
        examples.MinFinder.T t45 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        minFinder55.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        int int61 = t60.getVal();
        minFinder55.add(t60);
        minFinder49.chval(t60, 5);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-9));
        minFinder65.add(t79);
        minFinder49.chval(t79, (-10));
        boolean boolean83 = t48.equals((java.lang.Object) t79);
        minFinder37.chval(t79, (int) (short) 0);
        examples.MinFinder minFinder86 = new examples.MinFinder();
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder86.clear();
        minFinder86.clear();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) 'a');
        int int92 = t91.getVal();
        minFinder86.add(t91);
        int int94 = t91.getVal();
        boolean boolean95 = t79.equals((java.lang.Object) int94);
        minFinder0.add(t79);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        int int54 = t48.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t18, t20, t27, t32, t38, t40, t48 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        minFinder58.add(t60);
        examples.MinFinder.T t62 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        minFinder64.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        minFinder64.add(t69);
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder64.add(t73);
        examples.MinFinder.T t75 = minFinder64.findMin();
        minFinder58.add(t75);
        minFinder0.add(t75);
        int int78 = t75.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        int int69 = t29.getVal();
        boolean boolean71 = t29.equals((java.lang.Object) 4L);
        int int72 = t29.getVal();
        int int73 = t29.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        int int34 = t30.getVal();
        java.lang.Class<?> wildcardClass35 = t30.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t37 = null;
        minFinder0.add(t37);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        minFinder39.chval(t45, 0);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-9));
        int int55 = t54.getVal();
        minFinder52.chval(t54, (-100));
        minFinder39.chval(t54, 0);
        int int60 = t54.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-9) + "'", int55 == (-9));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t50 = minFinder0.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        int int69 = t63.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        int int72 = t71.getVal();
        examples.MinFinder.T[] tArray73 = new examples.MinFinder.T[] { t52, t54, t61, t63, t71 };
        java.util.ArrayList<examples.MinFinder.T> tList74 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList74, tArray73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList74);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList74);
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) (short) 100);
        minFinder78.add(t81);
        minFinder0.chval(t81, (int) (byte) 100);
        int int85 = t81.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertNotNull(tArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder.T t35 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-9));
        int int52 = t51.getVal();
        minFinder49.chval(t51, (-100));
        minFinder36.chval(t51, 0);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        java.lang.Object obj63 = null;
        boolean boolean64 = t58.equals(obj63);
        minFinder36.add(t58);
        boolean boolean66 = t35.equals((java.lang.Object) t58);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        minFinder67.clear();
        minFinder67.clear();
        boolean boolean72 = t58.equals((java.lang.Object) minFinder67);
        examples.MinFinder.T t74 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t78 = minFinder75.findMin();
        minFinder75.clear();
        minFinder75.clear();
        boolean boolean81 = t74.equals((java.lang.Object) minFinder75);
        int int82 = t74.getVal();
        minFinder67.chval(t74, 97);
        boolean boolean85 = t31.equals((java.lang.Object) t74);
        int int86 = t31.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-9) + "'", int52 == (-9));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-6) + "'", int86 == (-6));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        boolean boolean45 = t1.equals((java.lang.Object) int44);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-1));
        minFinder20.chval(t25, 100);
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        minFinder20.add(t29);
        minFinder0.add(t29);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-9));
        minFinder34.add(t48);
        examples.MinFinder.T t50 = minFinder34.findMin();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-9));
        int int59 = t58.getVal();
        minFinder51.chval(t58, 10);
        int int62 = t58.getVal();
        minFinder34.add(t58);
        int int64 = t58.getVal();
        int int65 = t58.getVal();
        minFinder0.add(t58);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-9) + "'", int59 == (-9));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-9) + "'", int65 == (-9));
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-9));
        int int42 = t41.getVal();
        minFinder39.chval(t41, (-100));
        int int45 = t41.getVal();
        minFinder36.chval(t41, (-4));
        minFinder36.clear();
        java.lang.Class<?> wildcardClass49 = minFinder36.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        boolean boolean33 = t16.equals((java.lang.Object) false);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder29.add(t39);
        examples.MinFinder.T t44 = minFinder29.findMin();
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder45.add(t59);
        boolean boolean62 = t44.equals((java.lang.Object) t59);
        java.lang.Class<?> wildcardClass63 = t44.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder10.chval(t25, 0);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        java.lang.Object obj37 = null;
        boolean boolean38 = t32.equals(obj37);
        minFinder10.add(t32);
        boolean boolean40 = t9.equals((java.lang.Object) t32);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        examples.MinFinder.T[] tArray63 = new examples.MinFinder.T[] { t42, t44, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList64 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList64, tArray63);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList64);
        boolean boolean76 = t9.equals((java.lang.Object) tList64);
        int int77 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder.T t79 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass80 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(tArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.add(t19);
        boolean boolean64 = t1.equals((java.lang.Object) minFinder4);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) -1);
        int int2 = t1.getVal();
        java.lang.Class<?> wildcardClass3 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 100.0d);
        int int9 = t1.getVal();
        java.lang.Class<?> wildcardClass10 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        examples.MinFinder.T t6 = new examples.MinFinder.T(3);
        minFinder3.chval(t6, (int) (short) -1);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(3);
        minFinder9.chval(t12, (int) (short) -1);
        minFinder3.add(t12);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        minFinder3.add(t17);
        examples.MinFinder.T t19 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        minFinder50.add(t60);
        int int65 = t60.getVal();
        minFinder3.chval(t60, (int) (byte) 10);
        minFinder3.clear();
        boolean boolean69 = t1.equals((java.lang.Object) minFinder3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        boolean boolean12 = t9.equals((java.lang.Object) 1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        int int26 = t22.getVal();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        boolean boolean43 = t41.equals((java.lang.Object) (-1));
        int int44 = t41.getVal();
        minFinder27.chval(t41, 0);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder53.add(t58);
        minFinder47.chval(t58, 5);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder69.chval(t72, (int) (short) -1);
        minFinder63.add(t72);
        examples.MinFinder.T t77 = new examples.MinFinder.T((-9));
        minFinder63.add(t77);
        minFinder47.chval(t77, (-10));
        minFinder27.chval(t77, (-1));
        boolean boolean83 = t22.equals((java.lang.Object) minFinder27);
        boolean boolean84 = t9.equals((java.lang.Object) t22);
        int int85 = t22.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t56 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass57 = t56.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t56);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t46);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t65 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        minFinder69.chval(t75, 0);
        boolean boolean82 = t68.equals((java.lang.Object) minFinder69);
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder69.chval(t84, (-5));
        minFinder32.add(t84);
        int int89 = t84.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-9));
        int int11 = t10.getVal();
        minFinder8.chval(t10, (-100));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t15, t17, t24, t29, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        minFinder55.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        int int65 = t64.getVal();
        minFinder57.chval(t64, 10);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        minFinder68.chval(t74, 0);
        minFinder57.add(t74);
        minFinder55.add(t74);
        boolean boolean83 = t10.equals((java.lang.Object) t74);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        minFinder84.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        int int90 = t89.getVal();
        minFinder84.add(t89);
        minFinder84.clear();
        examples.MinFinder.T t94 = new examples.MinFinder.T((int) 'a');
        minFinder84.add(t94);
        boolean boolean96 = t10.equals((java.lang.Object) t94);
        minFinder0.chval(t94, (-1));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-9) + "'", int11 == (-9));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-9) + "'", int65 == (-9));
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList25);
        boolean boolean40 = t1.equals((java.lang.Object) tList25);
        int int41 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        minFinder33.add(t42);
        boolean boolean46 = t32.equals((java.lang.Object) minFinder33);
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        minFinder48.clear();
        boolean boolean62 = t47.equals((java.lang.Object) minFinder48);
        minFinder0.add(t47);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) (short) 0);
        int int79 = t78.getVal();
        minFinder64.chval(t78, (-9));
        int int82 = t78.getVal();
        minFinder0.add(t78);
        java.lang.Class<?> wildcardClass84 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass43 = minFinder42.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-1));
        minFinder49.chval(t54, 100);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        minFinder49.add(t58);
        minFinder2.add(t58);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-1));
        minFinder63.chval(t68, 100);
        examples.MinFinder.T t72 = new examples.MinFinder.T(7);
        minFinder63.chval(t72, (int) (byte) -1);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t78 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        int int86 = t81.getVal();
        int int87 = t81.getVal();
        minFinder75.chval(t81, (int) ' ');
        boolean boolean90 = t72.equals((java.lang.Object) ' ');
        minFinder2.add(t72);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        minFinder12.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T(100);
        minFinder29.add(t31);
        minFinder12.chval(t31, (int) '#');
        int int35 = t31.getVal();
        minFinder0.add(t31);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        minFinder37.chval(t48, 5);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-9));
        int int61 = t60.getVal();
        minFinder53.chval(t60, 10);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        minFinder53.add(t70);
        boolean boolean79 = t70.equals((java.lang.Object) 2L);
        boolean boolean80 = t48.equals((java.lang.Object) 2L);
        minFinder0.add(t48);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-9) + "'", int61 == (-9));
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        minFinder43.clear();
        java.lang.Class<?> wildcardClass45 = minFinder43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        boolean boolean30 = t23.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t34 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        minFinder31.chval(t37, 0);
        minFinder31.clear();
        examples.MinFinder.T t45 = minFinder31.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        boolean boolean49 = t47.equals((java.lang.Object) ' ');
        minFinder31.add(t47);
        boolean boolean51 = t23.equals((java.lang.Object) t47);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        int int73 = t72.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t53, t55, t62, t64, t72 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList75);
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        minFinder80.add(t82);
        boolean boolean84 = t23.equals((java.lang.Object) t82);
        minFinder0.chval(t82, (int) ' ');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T[] tArray79 = new examples.MinFinder.T[] { t42, t44, t51, t56, t62, t64, t72 };
        java.util.ArrayList<examples.MinFinder.T> tList80 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList80, tArray79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList80);
        examples.MinFinder.T t84 = new examples.MinFinder.T((-3));
        minFinder82.add(t84);
        minFinder82.clear();
        minFinder82.clear();
        examples.MinFinder.T t88 = minFinder82.findMin();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-7));
        minFinder82.add(t90);
        boolean boolean92 = t36.equals((java.lang.Object) t90);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertNotNull(tArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        int int8 = t2.getVal();
        java.lang.Object obj9 = null;
        boolean boolean10 = t2.equals(obj9);
        int int11 = t2.getVal();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t13, t15, t22, t27, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        minFinder53.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        minFinder57.chval(t68, 5);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-9));
        minFinder73.add(t87);
        minFinder57.chval(t87, (-10));
        boolean boolean91 = t56.equals((java.lang.Object) t87);
        minFinder53.chval(t87, 1);
        boolean boolean94 = t2.equals((java.lang.Object) t87);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-9) + "'", int6 == (-9));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-9) + "'", int7 == (-9));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-9) + "'", int11 == (-9));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t5, t7, t14, t19, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        minFinder45.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) ' ');
        minFinder45.chval(t48, (int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        minFinder45.add(t54);
        java.lang.Class<?> wildcardClass56 = t54.getClass();
        boolean boolean57 = t1.equals((java.lang.Object) t54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass34 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t34 = minFinder28.findMin();
        int int35 = t34.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        minFinder0.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) '#');
        boolean boolean71 = t69.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder72.chval(t75, (int) (short) -1);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder78.chval(t81, (int) (short) -1);
        minFinder72.add(t81);
        minFinder72.clear();
        examples.MinFinder.T t87 = new examples.MinFinder.T((int) (short) 0);
        minFinder72.chval(t87, (int) '4');
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) '#');
        int int92 = t91.getVal();
        minFinder72.chval(t91, (int) (byte) 0);
        examples.MinFinder.T t95 = minFinder72.findMin();
        boolean boolean96 = t69.equals((java.lang.Object) minFinder72);
        minFinder0.add(t69);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertNull(t95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass21 = t20.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t20);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        minFinder43.clear();
        examples.MinFinder.T t45 = minFinder43.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        minFinder74.add(t76);
        minFinder43.chval(t76, 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T(5);
        minFinder28.add(t35);
        minFinder28.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder72.chval(t78, 0);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        boolean boolean88 = t86.equals((java.lang.Object) (-1));
        int int89 = t86.getVal();
        minFinder72.chval(t86, 0);
        minFinder71.add(t86);
        minFinder41.add(t86);
        examples.MinFinder.T t94 = minFinder41.findMin();
        int int95 = t94.getVal();
        java.lang.Class<?> wildcardClass96 = t94.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t71 = minFinder14.findMin();
        minFinder14.clear();
        minFinder14.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t71);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        int int20 = t14.getVal();
        int int21 = t14.getVal();
        java.lang.Class<?> wildcardClass22 = t14.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        minFinder45.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder45.add(t50);
        minFinder39.chval(t50, 5);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-9));
        minFinder55.add(t69);
        minFinder39.chval(t69, (-10));
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder.T t76 = minFinder73.findMin();
        minFinder73.clear();
        minFinder73.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-9));
        int int81 = t80.getVal();
        minFinder73.chval(t80, 10);
        examples.MinFinder.T t84 = minFinder73.findMin();
        boolean boolean85 = t69.equals((java.lang.Object) t84);
        minFinder36.add(t69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-9) + "'", int81 == (-9));
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T(3);
        minFinder48.chval(t51, (int) (short) -1);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        minFinder48.add(t57);
        minFinder48.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) (short) 0);
        minFinder48.chval(t63, (int) '4');
        minFinder34.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        boolean boolean73 = t63.equals((java.lang.Object) t68);
        int int74 = t63.getVal();
        int int75 = t63.getVal();
        minFinder0.add(t63);
        int int77 = t63.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        minFinder20.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        minFinder20.chval(t35, (int) '4');
        minFinder6.add(t35);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        boolean boolean45 = t35.equals((java.lang.Object) t40);
        int int46 = t35.getVal();
        boolean boolean47 = t3.equals((java.lang.Object) t35);
        java.lang.Class<?> wildcardClass48 = t3.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t65 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        minFinder69.chval(t75, 0);
        boolean boolean82 = t68.equals((java.lang.Object) minFinder69);
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder69.chval(t84, (-5));
        minFinder32.add(t84);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-3));
        int int91 = t90.getVal();
        int int92 = t90.getVal();
        int int93 = t90.getVal();
        int int94 = t90.getVal();
        int int95 = t90.getVal();
        int int96 = t90.getVal();
        boolean boolean98 = t90.equals((java.lang.Object) (-8.7d));
        minFinder32.add(t90);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = minFinder27.findMin();
        minFinder27.clear();
        java.lang.Class<?> wildcardClass34 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t53 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        minFinder50.chval(t56, 0);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        boolean boolean66 = t64.equals((java.lang.Object) (-1));
        int int67 = t64.getVal();
        minFinder50.chval(t64, 0);
        minFinder49.add(t64);
        examples.MinFinder.T t71 = minFinder49.findMin();
        boolean boolean72 = t14.equals((java.lang.Object) minFinder49);
        minFinder49.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        minFinder32.add(t61);
        examples.MinFinder.T t64 = minFinder32.findMin();
        java.lang.Class<?> wildcardClass65 = t64.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        minFinder14.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        int int20 = t19.getVal();
        minFinder14.add(t19);
        minFinder8.chval(t19, 5);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        minFinder24.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        minFinder24.add(t38);
        minFinder8.chval(t38, (-10));
        boolean boolean42 = t7.equals((java.lang.Object) t38);
        minFinder2.chval(t38, 7);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        minFinder45.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) (short) 0);
        minFinder45.chval(t60, (int) '4');
        boolean boolean63 = t38.equals((java.lang.Object) minFinder45);
        boolean boolean65 = t38.equals((java.lang.Object) true);
        int int66 = t38.getVal();
        boolean boolean67 = t1.equals((java.lang.Object) t38);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-9) + "'", int66 == (-9));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        java.lang.Class<?> wildcardClass23 = minFinder13.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t38);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        examples.MinFinder.T t48 = minFinder28.findMin();
        java.lang.Object obj49 = new java.lang.Object();
        boolean boolean50 = t48.equals(obj49);
        minFinder26.add(t48);
        examples.MinFinder.T t52 = minFinder26.findMin();
        examples.MinFinder.T t53 = minFinder26.findMin();
        java.lang.Class<?> wildcardClass54 = t53.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        boolean boolean41 = t39.equals((java.lang.Object) 9L);
        minFinder37.add(t39);
        minFinder37.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder37.chval(t45, (int) (short) 10);
        examples.MinFinder.T t48 = minFinder37.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        minFinder57.add(t66);
        boolean boolean70 = t56.equals((java.lang.Object) minFinder57);
        minFinder57.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder57.chval(t73, 1);
        minFinder42.add(t73);
        int int77 = t73.getVal();
        minFinder41.add(t73);
        java.lang.Class<?> wildcardClass79 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        examples.MinFinder.T t89 = minFinder76.findMin();
        java.lang.Class<?> wildcardClass90 = t89.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(6);
        int int13 = t12.getVal();
        minFinder0.chval(t12, 97);
        java.lang.Class<?> wildcardClass16 = t12.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        boolean boolean58 = t44.equals((java.lang.Object) minFinder45);
        minFinder45.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder45.chval(t61, 1);
        minFinder30.add(t61);
        boolean boolean65 = t26.equals((java.lang.Object) t61);
        minFinder13.chval(t61, 32);
        java.lang.Class<?> wildcardClass68 = minFinder13.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        minFinder5.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        int int11 = t10.getVal();
        minFinder5.add(t10);
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        minFinder0.chval(t10, 10);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        minFinder41.add(t46);
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder41.add(t50);
        examples.MinFinder.T t52 = minFinder41.findMin();
        boolean boolean53 = t36.equals((java.lang.Object) t52);
        java.lang.Class<?> wildcardClass54 = t52.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        int int24 = t23.getVal();
        minFinder16.chval(t23, 10);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder16.add(t33);
        boolean boolean42 = t33.equals((java.lang.Object) 2L);
        boolean boolean43 = t11.equals((java.lang.Object) 2L);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T[] tArray82 = new examples.MinFinder.T[] { t45, t47, t54, t59, t65, t67, t75 };
        java.util.ArrayList<examples.MinFinder.T> tList83 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList83, tArray82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList83);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        minFinder85.add(t87);
        examples.MinFinder.T t89 = minFinder85.findMin();
        java.lang.Class<?> wildcardClass90 = t89.getClass();
        boolean boolean91 = t11.equals((java.lang.Object) t89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-9) + "'", int24 == (-9));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(tArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass77 = t76.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        int int51 = t44.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        minFinder12.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder12.add(t17);
        minFinder6.chval(t17, 5);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        minFinder22.add(t36);
        minFinder6.chval(t36, (-10));
        boolean boolean40 = t5.equals((java.lang.Object) t36);
        minFinder0.chval(t36, 7);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        minFinder43.add(t52);
        minFinder43.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) (short) 0);
        minFinder43.chval(t58, (int) '4');
        boolean boolean61 = t36.equals((java.lang.Object) minFinder43);
        java.lang.Class<?> wildcardClass62 = minFinder43.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-1));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        boolean boolean45 = t1.equals((java.lang.Object) t42);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        boolean boolean59 = t1.equals((java.lang.Object) minFinder46);
        examples.MinFinder.T t60 = minFinder46.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(t60);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        minFinder28.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        java.lang.Class<?> wildcardClass4 = t1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        minFinder0.clear();
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-9));
        minFinder51.add(t65);
        examples.MinFinder.T t67 = minFinder51.findMin();
        int int68 = t67.getVal();
        minFinder32.add(t67);
        java.lang.Class<?> wildcardClass70 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-9) + "'", int68 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder28.clear();
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t47 = new examples.MinFinder.T(100);
        minFinder45.add(t47);
        minFinder28.chval(t47, (int) '#');
        java.lang.Class<?> wildcardClass51 = minFinder28.getClass();
        boolean boolean52 = t26.equals((java.lang.Object) minFinder28);
        minFinder0.add(t26);
        int int54 = t26.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-9) + "'", int54 == (-9));
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        examples.MinFinder.T t48 = minFinder28.findMin();
        java.lang.Object obj49 = new java.lang.Object();
        boolean boolean50 = t48.equals(obj49);
        minFinder26.add(t48);
        examples.MinFinder.T t52 = minFinder26.findMin();
        java.lang.Class<?> wildcardClass53 = minFinder26.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean3 = t1.equals((java.lang.Object) 'a');
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        minFinder4.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((int) 'a');
        int int10 = t9.getVal();
        minFinder4.add(t9);
        examples.MinFinder.T t12 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder22.add(t27);
        minFinder16.chval(t27, 5);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-9));
        minFinder32.add(t46);
        minFinder16.chval(t46, (-10));
        boolean boolean50 = t15.equals((java.lang.Object) t46);
        minFinder4.chval(t46, (int) (short) 0);
        boolean boolean53 = t1.equals((java.lang.Object) minFinder4);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        minFinder34.add(t39);
        minFinder34.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        minFinder34.add(t44);
        int int46 = t44.getVal();
        minFinder23.chval(t44, 4);
        minFinder0.add(t44);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        int int84 = t83.getVal();
        java.lang.Class<?> wildcardClass85 = t83.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder7.add(t21);
        examples.MinFinder.T t24 = minFinder7.findMin();
        minFinder0.chval(t24, (-1));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t24);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        minFinder58.add(t60);
        boolean boolean62 = t1.equals((java.lang.Object) t60);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-1));
        minFinder63.chval(t68, 100);
        boolean boolean72 = t68.equals((java.lang.Object) 5L);
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        boolean boolean75 = t60.equals((java.lang.Object) t68);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t50 = minFinder0.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        int int69 = t63.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        int int72 = t71.getVal();
        examples.MinFinder.T[] tArray73 = new examples.MinFinder.T[] { t52, t54, t61, t63, t71 };
        java.util.ArrayList<examples.MinFinder.T> tList74 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList74, tArray73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList74);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList74);
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) (short) 100);
        minFinder78.add(t81);
        minFinder0.chval(t81, (int) (byte) 100);
        java.lang.Class<?> wildcardClass85 = t81.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertNotNull(tArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 10);
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        int int97 = t61.getVal();
        int int98 = t61.getVal();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList40);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        minFinder46.add(t48);
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        minFinder46.add(t51);
        boolean boolean53 = t12.equals((java.lang.Object) t51);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        minFinder69.chval(t75, 0);
        int int82 = t75.getVal();
        minFinder54.add(t75);
        examples.MinFinder.T t84 = minFinder54.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertNotNull(t84);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        examples.MinFinder.T t97 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass98 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(t97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        minFinder49.add(t54);
        int int57 = t54.getVal();
        boolean boolean58 = t42.equals((java.lang.Object) int57);
        int int59 = t42.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-9) + "'", int59 == (-9));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        int int23 = t19.getVal();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        boolean boolean40 = t38.equals((java.lang.Object) (-1));
        int int41 = t38.getVal();
        minFinder24.chval(t38, 0);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        minFinder44.chval(t55, 5);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-9));
        minFinder60.add(t74);
        minFinder44.chval(t74, (-10));
        minFinder24.chval(t74, (-1));
        boolean boolean80 = t19.equals((java.lang.Object) minFinder24);
        int int81 = t19.getVal();
        boolean boolean82 = t1.equals((java.lang.Object) t19);
        int int83 = t1.getVal();
        java.lang.Class<?> wildcardClass84 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        minFinder28.clear();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        minFinder30.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        minFinder44.add(t53);
        minFinder44.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) (short) 0);
        minFinder44.chval(t59, (int) '4');
        minFinder30.add(t59);
        int int63 = t59.getVal();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        boolean boolean77 = t59.equals((java.lang.Object) 0);
        int int78 = t59.getVal();
        minFinder28.chval(t59, 6);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-6));
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass18 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList29);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder.T t67 = minFinder66.findMin();
        int int68 = t67.getVal();
        minFinder38.add(t67);
        examples.MinFinder.T t70 = minFinder38.findMin();
        minFinder0.add(t70);
        examples.MinFinder.T t72 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertNotNull(t70);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass14 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass14 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-9));
        int int69 = t68.getVal();
        minFinder61.chval(t68, 10);
        boolean boolean72 = t15.equals((java.lang.Object) 10);
        int int73 = t15.getVal();
        int int74 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-9) + "'", int69 == (-9));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder.T t57 = minFinder0.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        minFinder65.chval(t71, (int) ' ');
        minFinder58.add(t71);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        int int83 = t82.getVal();
        int int84 = t82.getVal();
        int int85 = t82.getVal();
        int int86 = t82.getVal();
        java.lang.Object obj87 = null;
        boolean boolean88 = t82.equals(obj87);
        minFinder58.add(t82);
        examples.MinFinder.T t90 = minFinder58.findMin();
        examples.MinFinder.T t91 = minFinder58.findMin();
        minFinder0.add(t91);
        int int93 = t91.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        minFinder41.add(t46);
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder41.add(t50);
        examples.MinFinder.T t52 = minFinder41.findMin();
        boolean boolean53 = t36.equals((java.lang.Object) t52);
        examples.MinFinder.T t55 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-9));
        int int72 = t71.getVal();
        minFinder69.chval(t71, (-100));
        minFinder56.chval(t71, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        java.lang.Object obj83 = null;
        boolean boolean84 = t78.equals(obj83);
        minFinder56.add(t78);
        boolean boolean86 = t55.equals((java.lang.Object) t78);
        boolean boolean87 = t52.equals((java.lang.Object) boolean86);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-9) + "'", int72 == (-9));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder.T t54 = minFinder35.findMin();
        int int55 = t54.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        int int2 = t1.getVal();
        examples.MinFinder.T t4 = new examples.MinFinder.T(3);
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        int int26 = t25.getVal();
        examples.MinFinder.T[] tArray27 = new examples.MinFinder.T[] { t6, t8, t15, t17, t25 };
        java.util.ArrayList<examples.MinFinder.T> tList28 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList28, tArray27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList28);
        java.lang.Class<?> wildcardClass32 = tList28.getClass();
        boolean boolean33 = t4.equals((java.lang.Object) tList28);
        boolean boolean34 = t1.equals((java.lang.Object) t4);
        java.lang.Class<?> wildcardClass35 = t4.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(tArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder.T t54 = minFinder35.findMin();
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        minFinder55.chval(t61, 0);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        boolean boolean71 = t69.equals((java.lang.Object) (-1));
        int int72 = t69.getVal();
        minFinder55.chval(t69, 0);
        minFinder55.clear();
        examples.MinFinder.T t76 = minFinder55.findMin();
        examples.MinFinder.T t77 = minFinder55.findMin();
        boolean boolean78 = t54.equals((java.lang.Object) t77);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder11.clear();
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        minFinder25.add(t34);
        minFinder25.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        minFinder25.chval(t40, (int) '4');
        minFinder11.add(t40);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        boolean boolean50 = t40.equals((java.lang.Object) t45);
        minFinder0.add(t45);
        int int52 = t45.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        int int2 = t1.getVal();
        java.lang.Class<?> wildcardClass3 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder0.chval(t84, (int) ' ');
        examples.MinFinder.T t88 = minFinder0.findMin();
        examples.MinFinder.T t89 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertNull(t89);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        java.lang.Class<?> wildcardClass2 = t1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        minFinder20.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        minFinder20.chval(t35, (int) '4');
        minFinder6.add(t35);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        boolean boolean45 = t35.equals((java.lang.Object) t40);
        int int46 = t35.getVal();
        boolean boolean47 = t3.equals((java.lang.Object) t35);
        int int48 = t35.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        examples.MinFinder.T[] tArray71 = new examples.MinFinder.T[] { t50, t52, t59, t61, t69 };
        java.util.ArrayList<examples.MinFinder.T> tList72 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList72, tArray71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList72);
        minFinder78.clear();
        boolean boolean80 = t35.equals((java.lang.Object) minFinder78);
        java.lang.Class<?> wildcardClass81 = t35.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(tArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t50 = minFinder0.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        boolean boolean66 = t52.equals((java.lang.Object) minFinder53);
        examples.MinFinder.T t67 = minFinder53.findMin();
        boolean boolean69 = t67.equals((java.lang.Object) (-100));
        minFinder0.chval(t67, (-5));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        boolean boolean53 = t51.equals((java.lang.Object) (-1));
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList77);
        boolean boolean87 = t51.equals((java.lang.Object) minFinder86);
        boolean boolean88 = t49.equals((java.lang.Object) boolean87);
        minFinder0.add(t49);
        java.lang.Class<?> wildcardClass90 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 100);
        minFinder73.add(t76);
        examples.MinFinder.T t78 = minFinder73.findMin();
        minFinder38.chval(t78, (int) (short) 100);
        int int81 = t78.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        boolean boolean13 = t6.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        minFinder14.clear();
        examples.MinFinder.T t28 = minFinder14.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) ' ');
        minFinder14.add(t30);
        boolean boolean34 = t6.equals((java.lang.Object) t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        minFinder41.add(t46);
        minFinder35.chval(t46, 5);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-9));
        minFinder51.add(t65);
        minFinder35.chval(t65, (-10));
        examples.MinFinder.T t69 = minFinder35.findMin();
        examples.MinFinder.T t70 = minFinder35.findMin();
        boolean boolean71 = t30.equals((java.lang.Object) minFinder35);
        int int72 = t30.getVal();
        minFinder0.add(t30);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t77 = minFinder0.findMin();
        examples.MinFinder.T t78 = minFinder0.findMin();
        int int79 = t78.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t7 = null;
        minFinder0.chval(t7, 0);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass44 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t50 = minFinder0.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder53.add(t58);
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder53.add(t62);
        boolean boolean64 = t52.equals((java.lang.Object) t62);
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder0.chval(t62, 4);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass70 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t40 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        minFinder42.clear();
        examples.MinFinder.T t56 = minFinder42.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        boolean boolean60 = t58.equals((java.lang.Object) ' ');
        minFinder42.add(t58);
        minFinder35.chval(t58, (int) ' ');
        minFinder33.add(t58);
        boolean boolean65 = t32.equals((java.lang.Object) t58);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder0.chval(t84, (int) ' ');
        java.lang.Class<?> wildcardClass88 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        boolean boolean7 = t1.equals((java.lang.Object) 1);
        int int8 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = null;
        minFinder27.chval(t32, (int) (byte) 10);
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (byte) 1);
        int int37 = t36.getVal();
        minFinder27.add(t36);
        minFinder27.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        minFinder10.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        int int16 = t15.getVal();
        minFinder10.add(t15);
        examples.MinFinder.T t18 = minFinder10.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        boolean boolean27 = t20.equals((java.lang.Object) 100.0d);
        minFinder10.add(t20);
        minFinder0.add(t20);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t17 = null;
        minFinder11.add(t17);
        examples.MinFinder.T t19 = minFinder11.findMin();
        boolean boolean20 = t9.equals((java.lang.Object) t19);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass16 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t4 = minFinder0.findMin();
        examples.MinFinder.T t6 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        minFinder7.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        int int13 = t12.getVal();
        minFinder7.add(t12);
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder7.add(t16);
        boolean boolean18 = t6.equals((java.lang.Object) t16);
        minFinder0.add(t16);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        minFinder7.chval(t13, 0);
        minFinder7.clear();
        examples.MinFinder.T t21 = minFinder7.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        boolean boolean25 = t23.equals((java.lang.Object) ' ');
        minFinder7.add(t23);
        minFinder0.chval(t23, (int) ' ');
        minFinder0.clear();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder30.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        minFinder30.chval(t45, (int) '4');
        examples.MinFinder.T t48 = minFinder30.findMin();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        minFinder49.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-1));
        minFinder49.chval(t64, (int) (byte) 1);
        minFinder30.add(t64);
        minFinder0.add(t64);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t28 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass29 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        minFinder32.clear();
        java.lang.Class<?> wildcardClass52 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-9));
        minFinder43.add(t48);
        int int50 = t48.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-9) + "'", int50 == (-9));
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 100);
        minFinder42.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder.T t34 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t34);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass22 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }
}

